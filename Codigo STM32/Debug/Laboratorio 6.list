
Laboratorio 6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9d4  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800ab6c  0800ab6c  0000bb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abcc  0800abcc  0000c12c  2**0
                  CONTENTS
  4 .ARM          00000008  0800abcc  0800abcc  0000bbcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abd4  0800abd4  0000c12c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abd4  0800abd4  0000bbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abd8  0800abd8  0000bbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  20000000  0800abdc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002018  2000012c  0800ad08  0000c12c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002144  0800ad08  0000c144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c12c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001560d  00000000  00000000  0000c15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003897  00000000  00000000  00021769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00025000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea1  00000000  00000000  00026320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5d3  00000000  00000000  000271c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018413  00000000  00000000  00041794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c3e0  00000000  00000000  00059ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5f87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005158  00000000  00000000  000f5fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000fb124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000012c 	.word	0x2000012c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ab54 	.word	0x0800ab54

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000130 	.word	0x20000130
 80001d4:	0800ab54 	.word	0x0800ab54

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <calcularCRC>:
PAQUETE pk1;

int16_t aplicarFiltroFIR(int16_t RPM_actual);
int8_t serializarPaquete(const PAQUETE* paquete, uint8_t *buffer);

uint8_t calcularCRC(uint8_t *datos, uint8_t tam){
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	70fb      	strb	r3, [r7, #3]
	uint8_t crc =0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < tam; i++ ){
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	e009      	b.n	8000dbe <calcularCRC+0x2a>
		crc ^= datos[i];
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	4413      	add	r3, r2
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	4053      	eors	r3, r2
 8000db6:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < tam; i++ ){
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf1      	blt.n	8000daa <calcularCRC+0x16>
	}
	return crc;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <datos_enviar>:


void datos_enviar(int16_t rev, int32_t contador, uint32_t tiempo, int16_t mm_s, int16_t rad_s,
                  uint16_t adc1, uint16_t adc2, uint16_t adc3, uint16_t adc4,
                  float volt1, float volt2, float volt3, float volt4,
                  uint16_t dist1, uint16_t dist2, uint16_t dist3, uint16_t dist4) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	@ 0x38
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	61b9      	str	r1, [r7, #24]
 8000ddc:	617a      	str	r2, [r7, #20]
 8000dde:	461a      	mov	r2, r3
 8000de0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000de4:	edc7 0a03 	vstr	s1, [r7, #12]
 8000de8:	ed87 1a02 	vstr	s2, [r7, #8]
 8000dec:	edc7 1a01 	vstr	s3, [r7, #4]
 8000df0:	4603      	mov	r3, r0
 8000df2:	83fb      	strh	r3, [r7, #30]
 8000df4:	4613      	mov	r3, r2
 8000df6:	83bb      	strh	r3, [r7, #28]

    int idxx = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34

    buffer[idxx++] = 1;
 8000dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e02:	4aa2      	ldr	r2, [pc, #648]	@ (800108c <datos_enviar+0x2b8>)
 8000e04:	2101      	movs	r1, #1
 8000e06:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (rev >> 8) & 0xFF;
 8000e08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e0c:	121b      	asrs	r3, r3, #8
 8000e0e:	b219      	sxth	r1, r3
 8000e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e16:	b2c9      	uxtb	r1, r1
 8000e18:	4a9c      	ldr	r2, [pc, #624]	@ (800108c <datos_enviar+0x2b8>)
 8000e1a:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = rev & 0xFF;
 8000e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e1e:	1c5a      	adds	r2, r3, #1
 8000e20:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e22:	8bfa      	ldrh	r2, [r7, #30]
 8000e24:	b2d1      	uxtb	r1, r2
 8000e26:	4a99      	ldr	r2, [pc, #612]	@ (800108c <datos_enviar+0x2b8>)
 8000e28:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 2;
 8000e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e30:	4a96      	ldr	r2, [pc, #600]	@ (800108c <datos_enviar+0x2b8>)
 8000e32:	2102      	movs	r1, #2
 8000e34:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (contador >> 24) & 0xFF;
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	0e19      	lsrs	r1, r3, #24
 8000e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e3c:	1c5a      	adds	r2, r3, #1
 8000e3e:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e40:	b2c9      	uxtb	r1, r1
 8000e42:	4a92      	ldr	r2, [pc, #584]	@ (800108c <datos_enviar+0x2b8>)
 8000e44:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (contador >> 16) & 0xFF;
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	1419      	asrs	r1, r3, #16
 8000e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e50:	b2c9      	uxtb	r1, r1
 8000e52:	4a8e      	ldr	r2, [pc, #568]	@ (800108c <datos_enviar+0x2b8>)
 8000e54:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (contador >> 8) & 0xFF;
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	1219      	asrs	r1, r3, #8
 8000e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e60:	b2c9      	uxtb	r1, r1
 8000e62:	4a8a      	ldr	r2, [pc, #552]	@ (800108c <datos_enviar+0x2b8>)
 8000e64:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = contador & 0xFF;
 8000e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	b2d1      	uxtb	r1, r2
 8000e70:	4a86      	ldr	r2, [pc, #536]	@ (800108c <datos_enviar+0x2b8>)
 8000e72:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 3;
 8000e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e7a:	4a84      	ldr	r2, [pc, #528]	@ (800108c <datos_enviar+0x2b8>)
 8000e7c:	2103      	movs	r1, #3
 8000e7e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (tiempo >> 24) & 0xFF;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	0e19      	lsrs	r1, r3, #24
 8000e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e8a:	b2c9      	uxtb	r1, r1
 8000e8c:	4a7f      	ldr	r2, [pc, #508]	@ (800108c <datos_enviar+0x2b8>)
 8000e8e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (tiempo >> 16) & 0xFF;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	0c19      	lsrs	r1, r3, #16
 8000e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e9a:	b2c9      	uxtb	r1, r1
 8000e9c:	4a7b      	ldr	r2, [pc, #492]	@ (800108c <datos_enviar+0x2b8>)
 8000e9e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (tiempo >> 8) & 0xFF;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	0a19      	lsrs	r1, r3, #8
 8000ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	637a      	str	r2, [r7, #52]	@ 0x34
 8000eaa:	b2c9      	uxtb	r1, r1
 8000eac:	4a77      	ldr	r2, [pc, #476]	@ (800108c <datos_enviar+0x2b8>)
 8000eae:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = tiempo & 0xFF;
 8000eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	637a      	str	r2, [r7, #52]	@ 0x34
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	b2d1      	uxtb	r1, r2
 8000eba:	4a74      	ldr	r2, [pc, #464]	@ (800108c <datos_enviar+0x2b8>)
 8000ebc:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 4;
 8000ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	637a      	str	r2, [r7, #52]	@ 0x34
 8000ec4:	4a71      	ldr	r2, [pc, #452]	@ (800108c <datos_enviar+0x2b8>)
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (mm_s >> 8) & 0xFF;
 8000eca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ece:	121b      	asrs	r3, r3, #8
 8000ed0:	b219      	sxth	r1, r3
 8000ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	637a      	str	r2, [r7, #52]	@ 0x34
 8000ed8:	b2c9      	uxtb	r1, r1
 8000eda:	4a6c      	ldr	r2, [pc, #432]	@ (800108c <datos_enviar+0x2b8>)
 8000edc:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = mm_s & 0xFF;
 8000ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	637a      	str	r2, [r7, #52]	@ 0x34
 8000ee4:	8bba      	ldrh	r2, [r7, #28]
 8000ee6:	b2d1      	uxtb	r1, r2
 8000ee8:	4a68      	ldr	r2, [pc, #416]	@ (800108c <datos_enviar+0x2b8>)
 8000eea:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 5;
 8000eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	637a      	str	r2, [r7, #52]	@ 0x34
 8000ef2:	4a66      	ldr	r2, [pc, #408]	@ (800108c <datos_enviar+0x2b8>)
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (rad_s >> 8) & 0xFF;
 8000ef8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8000efc:	121b      	asrs	r3, r3, #8
 8000efe:	b219      	sxth	r1, r3
 8000f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f06:	b2c9      	uxtb	r1, r1
 8000f08:	4a60      	ldr	r2, [pc, #384]	@ (800108c <datos_enviar+0x2b8>)
 8000f0a:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = rad_s & 0xFF;
 8000f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000f16:	b2d1      	uxtb	r1, r2
 8000f18:	4a5c      	ldr	r2, [pc, #368]	@ (800108c <datos_enviar+0x2b8>)
 8000f1a:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 6;
 8000f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f22:	4a5a      	ldr	r2, [pc, #360]	@ (800108c <datos_enviar+0x2b8>)
 8000f24:	2106      	movs	r1, #6
 8000f26:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (adc1 >> 8) & 0xFF;
 8000f28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	b299      	uxth	r1, r3
 8000f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f36:	b2c9      	uxtb	r1, r1
 8000f38:	4a54      	ldr	r2, [pc, #336]	@ (800108c <datos_enviar+0x2b8>)
 8000f3a:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = adc1 & 0xFF;
 8000f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f42:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8000f46:	b2d1      	uxtb	r1, r2
 8000f48:	4a50      	ldr	r2, [pc, #320]	@ (800108c <datos_enviar+0x2b8>)
 8000f4a:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 7;
 8000f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f52:	4a4e      	ldr	r2, [pc, #312]	@ (800108c <datos_enviar+0x2b8>)
 8000f54:	2107      	movs	r1, #7
 8000f56:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (adc2 >> 8) & 0xFF;
 8000f58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	b299      	uxth	r1, r3
 8000f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f66:	b2c9      	uxtb	r1, r1
 8000f68:	4a48      	ldr	r2, [pc, #288]	@ (800108c <datos_enviar+0x2b8>)
 8000f6a:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = adc2 & 0xFF;
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f72:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8000f76:	b2d1      	uxtb	r1, r2
 8000f78:	4a44      	ldr	r2, [pc, #272]	@ (800108c <datos_enviar+0x2b8>)
 8000f7a:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 8;
 8000f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f82:	4a42      	ldr	r2, [pc, #264]	@ (800108c <datos_enviar+0x2b8>)
 8000f84:	2108      	movs	r1, #8
 8000f86:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (adc3 >> 8) & 0xFF;
 8000f88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b299      	uxth	r1, r3
 8000f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f96:	b2c9      	uxtb	r1, r1
 8000f98:	4a3c      	ldr	r2, [pc, #240]	@ (800108c <datos_enviar+0x2b8>)
 8000f9a:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = adc3 & 0xFF;
 8000f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	637a      	str	r2, [r7, #52]	@ 0x34
 8000fa2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8000fa6:	b2d1      	uxtb	r1, r2
 8000fa8:	4a38      	ldr	r2, [pc, #224]	@ (800108c <datos_enviar+0x2b8>)
 8000faa:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 9;
 8000fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	637a      	str	r2, [r7, #52]	@ 0x34
 8000fb2:	4a36      	ldr	r2, [pc, #216]	@ (800108c <datos_enviar+0x2b8>)
 8000fb4:	2109      	movs	r1, #9
 8000fb6:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (adc4 >> 8) & 0xFF;
 8000fb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	b299      	uxth	r1, r3
 8000fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	637a      	str	r2, [r7, #52]	@ 0x34
 8000fc6:	b2c9      	uxtb	r1, r1
 8000fc8:	4a30      	ldr	r2, [pc, #192]	@ (800108c <datos_enviar+0x2b8>)
 8000fca:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = adc4 & 0xFF;
 8000fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	637a      	str	r2, [r7, #52]	@ 0x34
 8000fd2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8000fd6:	b2d1      	uxtb	r1, r2
 8000fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800108c <datos_enviar+0x2b8>)
 8000fda:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 10;
 8000fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	637a      	str	r2, [r7, #52]	@ 0x34
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <datos_enviar+0x2b8>)
 8000fe4:	210a      	movs	r1, #10
 8000fe6:	54d1      	strb	r1, [r2, r3]
    uint8_t* volt1_bytes = (uint8_t*)&volt1;
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	633b      	str	r3, [r7, #48]	@ 0x30
    buffer[idxx++] = volt1_bytes[0];
 8000fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	637a      	str	r2, [r7, #52]	@ 0x34
 8000ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ff6:	7811      	ldrb	r1, [r2, #0]
 8000ff8:	4a24      	ldr	r2, [pc, #144]	@ (800108c <datos_enviar+0x2b8>)
 8000ffa:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt1_bytes[1];
 8000ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	637a      	str	r2, [r7, #52]	@ 0x34
 8001002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001004:	7851      	ldrb	r1, [r2, #1]
 8001006:	4a21      	ldr	r2, [pc, #132]	@ (800108c <datos_enviar+0x2b8>)
 8001008:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt1_bytes[2];
 800100a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001012:	7891      	ldrb	r1, [r2, #2]
 8001014:	4a1d      	ldr	r2, [pc, #116]	@ (800108c <datos_enviar+0x2b8>)
 8001016:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt1_bytes[3];
 8001018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	637a      	str	r2, [r7, #52]	@ 0x34
 800101e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001020:	78d1      	ldrb	r1, [r2, #3]
 8001022:	4a1a      	ldr	r2, [pc, #104]	@ (800108c <datos_enviar+0x2b8>)
 8001024:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 11;
 8001026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	637a      	str	r2, [r7, #52]	@ 0x34
 800102c:	4a17      	ldr	r2, [pc, #92]	@ (800108c <datos_enviar+0x2b8>)
 800102e:	210b      	movs	r1, #11
 8001030:	54d1      	strb	r1, [r2, r3]
    uint8_t* volt2_bytes = (uint8_t*)&volt2;
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    buffer[idxx++] = volt2_bytes[0];
 8001038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	637a      	str	r2, [r7, #52]	@ 0x34
 800103e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001040:	7811      	ldrb	r1, [r2, #0]
 8001042:	4a12      	ldr	r2, [pc, #72]	@ (800108c <datos_enviar+0x2b8>)
 8001044:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt2_bytes[1];
 8001046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	637a      	str	r2, [r7, #52]	@ 0x34
 800104c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800104e:	7851      	ldrb	r1, [r2, #1]
 8001050:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <datos_enviar+0x2b8>)
 8001052:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt2_bytes[2];
 8001054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	637a      	str	r2, [r7, #52]	@ 0x34
 800105a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800105c:	7891      	ldrb	r1, [r2, #2]
 800105e:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <datos_enviar+0x2b8>)
 8001060:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt2_bytes[3];
 8001062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	637a      	str	r2, [r7, #52]	@ 0x34
 8001068:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800106a:	78d1      	ldrb	r1, [r2, #3]
 800106c:	4a07      	ldr	r2, [pc, #28]	@ (800108c <datos_enviar+0x2b8>)
 800106e:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 12;
 8001070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	637a      	str	r2, [r7, #52]	@ 0x34
 8001076:	4a05      	ldr	r2, [pc, #20]	@ (800108c <datos_enviar+0x2b8>)
 8001078:	210c      	movs	r1, #12
 800107a:	54d1      	strb	r1, [r2, r3]
    uint8_t* volt3_bytes = (uint8_t*)&volt3;
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	62bb      	str	r3, [r7, #40]	@ 0x28
    buffer[idxx++] = volt3_bytes[0];
 8001082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	637a      	str	r2, [r7, #52]	@ 0x34
 8001088:	e002      	b.n	8001090 <datos_enviar+0x2bc>
 800108a:	bf00      	nop
 800108c:	20000358 	.word	0x20000358
 8001090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001092:	7811      	ldrb	r1, [r2, #0]
 8001094:	4a51      	ldr	r2, [pc, #324]	@ (80011dc <datos_enviar+0x408>)
 8001096:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt3_bytes[1];
 8001098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	637a      	str	r2, [r7, #52]	@ 0x34
 800109e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010a0:	7851      	ldrb	r1, [r2, #1]
 80010a2:	4a4e      	ldr	r2, [pc, #312]	@ (80011dc <datos_enviar+0x408>)
 80010a4:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt3_bytes[2];
 80010a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	637a      	str	r2, [r7, #52]	@ 0x34
 80010ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010ae:	7891      	ldrb	r1, [r2, #2]
 80010b0:	4a4a      	ldr	r2, [pc, #296]	@ (80011dc <datos_enviar+0x408>)
 80010b2:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt3_bytes[3];
 80010b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	637a      	str	r2, [r7, #52]	@ 0x34
 80010ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010bc:	78d1      	ldrb	r1, [r2, #3]
 80010be:	4a47      	ldr	r2, [pc, #284]	@ (80011dc <datos_enviar+0x408>)
 80010c0:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 13;
 80010c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	637a      	str	r2, [r7, #52]	@ 0x34
 80010c8:	4a44      	ldr	r2, [pc, #272]	@ (80011dc <datos_enviar+0x408>)
 80010ca:	210d      	movs	r1, #13
 80010cc:	54d1      	strb	r1, [r2, r3]
    uint8_t* volt4_bytes = (uint8_t*)&volt4;
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer[idxx++] = volt4_bytes[0];
 80010d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80010d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010da:	7811      	ldrb	r1, [r2, #0]
 80010dc:	4a3f      	ldr	r2, [pc, #252]	@ (80011dc <datos_enviar+0x408>)
 80010de:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt4_bytes[1];
 80010e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80010e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010e8:	7851      	ldrb	r1, [r2, #1]
 80010ea:	4a3c      	ldr	r2, [pc, #240]	@ (80011dc <datos_enviar+0x408>)
 80010ec:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt4_bytes[2];
 80010ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80010f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f6:	7891      	ldrb	r1, [r2, #2]
 80010f8:	4a38      	ldr	r2, [pc, #224]	@ (80011dc <datos_enviar+0x408>)
 80010fa:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt4_bytes[3];
 80010fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	637a      	str	r2, [r7, #52]	@ 0x34
 8001102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001104:	78d1      	ldrb	r1, [r2, #3]
 8001106:	4a35      	ldr	r2, [pc, #212]	@ (80011dc <datos_enviar+0x408>)
 8001108:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 14;
 800110a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001110:	4a32      	ldr	r2, [pc, #200]	@ (80011dc <datos_enviar+0x408>)
 8001112:	210e      	movs	r1, #14
 8001114:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (dist1 >> 8) & 0xFF;
 8001116:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	b299      	uxth	r1, r3
 800111e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	637a      	str	r2, [r7, #52]	@ 0x34
 8001124:	b2c9      	uxtb	r1, r1
 8001126:	4a2d      	ldr	r2, [pc, #180]	@ (80011dc <datos_enviar+0x408>)
 8001128:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = dist1 & 0xFF;
 800112a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001130:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8001134:	b2d1      	uxtb	r1, r2
 8001136:	4a29      	ldr	r2, [pc, #164]	@ (80011dc <datos_enviar+0x408>)
 8001138:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 15;
 800113a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001140:	4a26      	ldr	r2, [pc, #152]	@ (80011dc <datos_enviar+0x408>)
 8001142:	210f      	movs	r1, #15
 8001144:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (dist2 >> 8) & 0xFF;
 8001146:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	b299      	uxth	r1, r3
 800114e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	637a      	str	r2, [r7, #52]	@ 0x34
 8001154:	b2c9      	uxtb	r1, r1
 8001156:	4a21      	ldr	r2, [pc, #132]	@ (80011dc <datos_enviar+0x408>)
 8001158:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = dist2 & 0xFF;
 800115a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001160:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8001164:	b2d1      	uxtb	r1, r2
 8001166:	4a1d      	ldr	r2, [pc, #116]	@ (80011dc <datos_enviar+0x408>)
 8001168:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 16;
 800116a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001170:	4a1a      	ldr	r2, [pc, #104]	@ (80011dc <datos_enviar+0x408>)
 8001172:	2110      	movs	r1, #16
 8001174:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (dist3 >> 8) & 0xFF;
 8001176:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	b299      	uxth	r1, r3
 800117e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	637a      	str	r2, [r7, #52]	@ 0x34
 8001184:	b2c9      	uxtb	r1, r1
 8001186:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <datos_enviar+0x408>)
 8001188:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = dist3 & 0xFF;
 800118a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001190:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8001194:	b2d1      	uxtb	r1, r2
 8001196:	4a11      	ldr	r2, [pc, #68]	@ (80011dc <datos_enviar+0x408>)
 8001198:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 17;
 800119a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	637a      	str	r2, [r7, #52]	@ 0x34
 80011a0:	4a0e      	ldr	r2, [pc, #56]	@ (80011dc <datos_enviar+0x408>)
 80011a2:	2111      	movs	r1, #17
 80011a4:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (dist4 >> 8) & 0xFF;
 80011a6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	b299      	uxth	r1, r3
 80011ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	637a      	str	r2, [r7, #52]	@ 0x34
 80011b4:	b2c9      	uxtb	r1, r1
 80011b6:	4a09      	ldr	r2, [pc, #36]	@ (80011dc <datos_enviar+0x408>)
 80011b8:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = dist4 & 0xFF;
 80011ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	637a      	str	r2, [r7, #52]	@ 0x34
 80011c0:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 80011c4:	b2d1      	uxtb	r1, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <datos_enviar+0x408>)
 80011c8:	54d1      	strb	r1, [r2, r3]

    EnviarPaquete(buffer, idxx);
 80011ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80011cc:	4803      	ldr	r0, [pc, #12]	@ (80011dc <datos_enviar+0x408>)
 80011ce:	f000 f807 	bl	80011e0 <EnviarPaquete>
}
 80011d2:	bf00      	nop
 80011d4:	3738      	adds	r7, #56	@ 0x38
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000358 	.word	0x20000358

080011e0 <EnviarPaquete>:

void EnviarPaquete(uint8_t *dat, uint8_t tam){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
	pk1.inicio = 0x09;
 80011ec:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <EnviarPaquete+0x50>)
 80011ee:	2209      	movs	r2, #9
 80011f0:	701a      	strb	r2, [r3, #0]
	pk1.tamano = tam + 4; //(OverHead)
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	3304      	adds	r3, #4
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001230 <EnviarPaquete+0x50>)
 80011fa:	705a      	strb	r2, [r3, #1]
	//memcpy (&pk1.datos[0], dat, tam+4);
	pk1.datos = dat;
 80011fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001230 <EnviarPaquete+0x50>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6053      	str	r3, [r2, #4]
	pk1.crc = 0x00;
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <EnviarPaquete+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	721a      	strb	r2, [r3, #8]
	pk1.fin = 0x07;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <EnviarPaquete+0x50>)
 800120a:	2207      	movs	r2, #7
 800120c:	725a      	strb	r2, [r3, #9]

	int numDatos = serializarPaquete(&pk1, datosTX);
 800120e:	4909      	ldr	r1, [pc, #36]	@ (8001234 <EnviarPaquete+0x54>)
 8001210:	4807      	ldr	r0, [pc, #28]	@ (8001230 <EnviarPaquete+0x50>)
 8001212:	f000 f811 	bl	8001238 <serializarPaquete>
 8001216:	4603      	mov	r3, r0
 8001218:	60fb      	str	r3, [r7, #12]
	CDC_Transmit_FS(datosTX, numDatos);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	b29b      	uxth	r3, r3
 800121e:	4619      	mov	r1, r3
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <EnviarPaquete+0x54>)
 8001222:	f009 f80b 	bl	800a23c <CDC_Transmit_FS>
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000548 	.word	0x20000548
 8001234:	200003fc 	.word	0x200003fc

08001238 <serializarPaquete>:

int8_t serializarPaquete(const PAQUETE* paquete, uint8_t *buffer){
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]

	int idx=0;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]

	if(!paquete || !buffer)return -1;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <serializarPaquete+0x1a>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <serializarPaquete+0x20>
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	e045      	b.n	80012e4 <serializarPaquete+0xac>

	buffer [idx++]= paquete -> inicio;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60fa      	str	r2, [r7, #12]
 800125e:	461a      	mov	r2, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	4413      	add	r3, r2
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	7812      	ldrb	r2, [r2, #0]
 8001268:	701a      	strb	r2, [r3, #0]
	buffer [idx++]= paquete -> tamano;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	60fa      	str	r2, [r7, #12]
 8001270:	461a      	mov	r2, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	4413      	add	r3, r2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	7852      	ldrb	r2, [r2, #1]
 800127a:	701a      	strb	r2, [r3, #0]
	if(paquete -> datos && paquete -> tamano > 3){
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d015      	beq.n	80012b0 <serializarPaquete+0x78>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	785b      	ldrb	r3, [r3, #1]
 8001288:	2b03      	cmp	r3, #3
 800128a:	d911      	bls.n	80012b0 <serializarPaquete+0x78>
		memcpy( & buffer[idx], paquete -> datos, paquete -> tamano - 3);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	18d0      	adds	r0, r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6859      	ldr	r1, [r3, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	785b      	ldrb	r3, [r3, #1]
 800129a:	3b03      	subs	r3, #3
 800129c:	461a      	mov	r2, r3
 800129e:	f009 fc4b 	bl	800ab38 <memcpy>
		idx = idx + paquete -> tamano - 3;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	785b      	ldrb	r3, [r3, #1]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	3b03      	subs	r3, #3
 80012ae:	60fb      	str	r3, [r7, #12]
	}
	uint8_t ss = idx;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	72fb      	strb	r3, [r7, #11]
	buffer[idx++] = calcularCRC(buffer, ss);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	60fa      	str	r2, [r7, #12]
 80012ba:	461a      	mov	r2, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	189c      	adds	r4, r3, r2
 80012c0:	7afb      	ldrb	r3, [r7, #11]
 80012c2:	4619      	mov	r1, r3
 80012c4:	6838      	ldr	r0, [r7, #0]
 80012c6:	f7ff fd65 	bl	8000d94 <calcularCRC>
 80012ca:	4603      	mov	r3, r0
 80012cc:	7023      	strb	r3, [r4, #0]
	buffer[idx++] = paquete -> fin;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	60fa      	str	r2, [r7, #12]
 80012d4:	461a      	mov	r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	4413      	add	r3, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	7a52      	ldrb	r2, [r2, #9]
 80012de:	701a      	strb	r2, [r3, #0]
	return idx;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	b25b      	sxtb	r3, r3
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}

080012ec <CDC_ReceiveCallBack>:

void CDC_ReceiveCallBack(uint8_t* Buf, uint32_t Len){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	memcpy(datosRX,Buf, Len);
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <CDC_ReceiveCallBack+0x24>)
 80012fc:	f009 fc1c 	bl	800ab38 <memcpy>
	indexRX = Len;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b03      	ldr	r3, [pc, #12]	@ (8001314 <CDC_ReceiveCallBack+0x28>)
 8001306:	701a      	strb	r2, [r3, #0]
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000444 	.word	0x20000444
 8001314:	20000440 	.word	0x20000440

08001318 <vel>:

void vel(int16_t rpm_s) {
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
    velocidad_mm_s = (3.1416 * diametro_rueda * rpm_s) / 60.0;
 8001322:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <vel+0xb8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f8ba 	bl	80004a0 <__aeabi_f2d>
 800132c:	a324      	add	r3, pc, #144	@ (adr r3, 80013c0 <vel+0xa8>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f90d 	bl	8000550 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4614      	mov	r4, r2
 800133c:	461d      	mov	r5, r3
 800133e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f89a 	bl	800047c <__aeabi_i2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7ff f8fe 	bl	8000550 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <vel+0xbc>)
 8001362:	f7ff fa1f 	bl	80007a4 <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fb01 	bl	8000974 <__aeabi_d2iz>
 8001372:	4603      	mov	r3, r0
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <vel+0xc0>)
 8001378:	801a      	strh	r2, [r3, #0]
    velocidad_rad_s = (2 * 3.1416 * rpm_s) / 60.0;
 800137a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f87c 	bl	800047c <__aeabi_i2d>
 8001384:	a310      	add	r3, pc, #64	@ (adr r3, 80013c8 <vel+0xb0>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff f8e1 	bl	8000550 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <vel+0xbc>)
 800139c:	f7ff fa02 	bl	80007a4 <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fae4 	bl	8000974 <__aeabi_d2iz>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <vel+0xc4>)
 80013b2:	801a      	strh	r2, [r3, #0]
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bdb0      	pop	{r4, r5, r7, pc}
 80013bc:	f3af 8000 	nop.w
 80013c0:	2e48e8a7 	.word	0x2e48e8a7
 80013c4:	400921ff 	.word	0x400921ff
 80013c8:	2e48e8a7 	.word	0x2e48e8a7
 80013cc:	401921ff 	.word	0x401921ff
 80013d0:	20000004 	.word	0x20000004
 80013d4:	404e0000 	.word	0x404e0000
 80013d8:	200003ba 	.word	0x200003ba
 80013dc:	200003bc 	.word	0x200003bc

080013e0 <calculo_rpm>:

void calculo_rpm() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    if (set == 1) {
 80013e4:	4b36      	ldr	r3, [pc, #216]	@ (80014c0 <calculo_rpm+0xe0>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d106      	bne.n	80013fa <calculo_rpm+0x1a>
        __HAL_TIM_SET_COUNTER(&htim3, 0);
 80013ec:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <calculo_rpm+0xe4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	@ 0x24
        set = 0;
 80013f4:	4b32      	ldr	r3, [pc, #200]	@ (80014c0 <calculo_rpm+0xe0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
    }

    if (__HAL_TIM_GET_COUNTER(&htim3) >= 200) {
 80013fa:	4b32      	ldr	r3, [pc, #200]	@ (80014c4 <calculo_rpm+0xe4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001400:	2bc7      	cmp	r3, #199	@ 0xc7
 8001402:	d957      	bls.n	80014b4 <calculo_rpm+0xd4>
        __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001404:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <calculo_rpm+0xe4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24

        contador_actual = (int32_t)__HAL_TIM_GET_COUNTER(&htim5);
 800140c:	4b2e      	ldr	r3, [pc, #184]	@ (80014c8 <calculo_rpm+0xe8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001412:	461a      	mov	r2, r3
 8001414:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <calculo_rpm+0xec>)
 8001416:	601a      	str	r2, [r3, #0]
        pulsos_act = abs(contador_actual) / 1431.0;
 8001418:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <calculo_rpm+0xec>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	bfb8      	it	lt
 8001420:	425b      	neglt	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f82a 	bl	800047c <__aeabi_i2d>
 8001428:	a323      	add	r3, pc, #140	@ (adr r3, 80014b8 <calculo_rpm+0xd8>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff f9b9 	bl	80007a4 <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fae3 	bl	8000a04 <__aeabi_d2f>
 800143e:	4603      	mov	r3, r0
 8001440:	4a23      	ldr	r2, [pc, #140]	@ (80014d0 <calculo_rpm+0xf0>)
 8001442:	6013      	str	r3, [r2, #0]
        pulsos = pulsos_act - pulsos_ant;
 8001444:	4b22      	ldr	r3, [pc, #136]	@ (80014d0 <calculo_rpm+0xf0>)
 8001446:	ed93 7a00 	vldr	s14, [r3]
 800144a:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <calculo_rpm+0xf4>)
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <calculo_rpm+0xf8>)
 8001456:	edc3 7a00 	vstr	s15, [r3]
        pulsos_ant = pulsos_act;
 800145a:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <calculo_rpm+0xf0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a1d      	ldr	r2, [pc, #116]	@ (80014d4 <calculo_rpm+0xf4>)
 8001460:	6013      	str	r3, [r2, #0]

        rpm = abs(pulsos * 600);
 8001462:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <calculo_rpm+0xf8>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80014dc <calculo_rpm+0xfc>
 800146c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001474:	ee17 3a90 	vmov	r3, s15
 8001478:	2b00      	cmp	r3, #0
 800147a:	bfb8      	it	lt
 800147c:	425b      	neglt	r3, r3
 800147e:	b21a      	sxth	r2, r3
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <calculo_rpm+0x100>)
 8001482:	801a      	strh	r2, [r3, #0]
        if (rpm < 0) rpm = 0;
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <calculo_rpm+0x100>)
 8001486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148a:	2b00      	cmp	r3, #0
 800148c:	da02      	bge.n	8001494 <calculo_rpm+0xb4>
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <calculo_rpm+0x100>)
 8001490:	2200      	movs	r2, #0
 8001492:	801a      	strh	r2, [r3, #0]
        rpm_f = aplicarFiltroFIR(rpm);
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <calculo_rpm+0x100>)
 8001496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f94c 	bl	8001738 <aplicarFiltroFIR>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <calculo_rpm+0x104>)
 80014a6:	801a      	strh	r2, [r3, #0]
        vel(rpm_f);
 80014a8:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <calculo_rpm+0x104>)
 80014aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff32 	bl	8001318 <vel>
    }
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	00000000 	.word	0x00000000
 80014bc:	40965c00 	.word	0x40965c00
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000238 	.word	0x20000238
 80014c8:	200002c8 	.word	0x200002c8
 80014cc:	200003f4 	.word	0x200003f4
 80014d0:	200003b0 	.word	0x200003b0
 80014d4:	200003ac 	.word	0x200003ac
 80014d8:	2000039c 	.word	0x2000039c
 80014dc:	44160000 	.word	0x44160000
 80014e0:	20000398 	.word	0x20000398
 80014e4:	200003b8 	.word	0x200003b8

080014e8 <conversor>:

void conversor(float volt){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a01 	vstr	s0, [r7, #4]

    if (volt < 0){
 80014f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fe:	d503      	bpl.n	8001508 <conversor+0x20>
    	volt = 0;
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
    }
    else{
     val_pwm = (int32_t)((volt * (-100)) / (7.5));
    }

}
 8001506:	e023      	b.n	8001550 <conversor+0x68>
    else if (volt > 7.5){
 8001508:	edd7 7a01 	vldr	s15, [r7, #4]
 800150c:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8001510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001518:	dd02      	ble.n	8001520 <conversor+0x38>
    	volt = 7.5;
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <conversor+0x70>)
 800151c:	607b      	str	r3, [r7, #4]
}
 800151e:	e017      	b.n	8001550 <conversor+0x68>
     val_pwm = (int32_t)((volt * (-100)) / (7.5));
 8001520:	edd7 7a01 	vldr	s15, [r7, #4]
 8001524:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800155c <conversor+0x74>
 8001528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152c:	ee17 0a90 	vmov	r0, s15
 8001530:	f7fe ffb6 	bl	80004a0 <__aeabi_f2d>
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <conversor+0x78>)
 800153a:	f7ff f933 	bl	80007a4 <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fa15 	bl	8000974 <__aeabi_d2iz>
 800154a:	4603      	mov	r3, r0
 800154c:	4a05      	ldr	r2, [pc, #20]	@ (8001564 <conversor+0x7c>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40f00000 	.word	0x40f00000
 800155c:	c2c80000 	.word	0xc2c80000
 8001560:	401e0000 	.word	0x401e0000
 8001564:	200003a8 	.word	0x200003a8

08001568 <conversor_mm_s>:

void conversor_mm_s(int32_t velocidad) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

    if (velocidad > 744){
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f5b3 7f3a 	cmp.w	r3, #744	@ 0x2e8
 8001576:	dd02      	ble.n	800157e <conversor_mm_s+0x16>
    	velocidad = 744;
 8001578:	f44f 733a 	mov.w	r3, #744	@ 0x2e8
 800157c:	607b      	str	r3, [r7, #4]
    }

    pwm_mm = ((velocidad*100) / 744) * (-1);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2264      	movs	r2, #100	@ 0x64
 8001582:	fb02 f303 	mul.w	r3, r2, r3
 8001586:	4a07      	ldr	r2, [pc, #28]	@ (80015a4 <conversor_mm_s+0x3c>)
 8001588:	fb82 1203 	smull	r1, r2, r2, r3
 800158c:	11d2      	asrs	r2, r2, #7
 800158e:	17db      	asrs	r3, r3, #31
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	b21a      	sxth	r2, r3
 8001594:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <conversor_mm_s+0x40>)
 8001596:	801a      	strh	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	2c0b02c1 	.word	0x2c0b02c1
 80015a8:	200003a4 	.word	0x200003a4

080015ac <instruction>:

void instruction(){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

	if(indexRX != 0){
 80015b0:	4b58      	ldr	r3, [pc, #352]	@ (8001714 <instruction+0x168>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80a9 	beq.w	800170e <instruction+0x162>
		  if(datosRX[0] == 0x0A){
 80015bc:	4b56      	ldr	r3, [pc, #344]	@ (8001718 <instruction+0x16c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b0a      	cmp	r3, #10
 80015c4:	d10a      	bne.n	80015dc <instruction+0x30>
			  velocidad_motor = 100;
 80015c6:	4b55      	ldr	r3, [pc, #340]	@ (800171c <instruction+0x170>)
 80015c8:	2264      	movs	r2, #100	@ 0x64
 80015ca:	701a      	strb	r2, [r3, #0]
			  motores(0, velocidad_motor);
 80015cc:	4b53      	ldr	r3, [pc, #332]	@ (800171c <instruction+0x170>)
 80015ce:	f993 3000 	ldrsb.w	r3, [r3]
 80015d2:	4619      	mov	r1, r3
 80015d4:	2000      	movs	r0, #0
 80015d6:	f000 fea9 	bl	800232c <motores>
			  velocidad_motor = pwm_mm;
			  motores(0, velocidad_motor);
		  }

	}
}
 80015da:	e098      	b.n	800170e <instruction+0x162>
		  else if(datosRX[0] == 0x0B){
 80015dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001718 <instruction+0x16c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b0b      	cmp	r3, #11
 80015e4:	d10a      	bne.n	80015fc <instruction+0x50>
			  velocidad_motor = -100;
 80015e6:	4b4d      	ldr	r3, [pc, #308]	@ (800171c <instruction+0x170>)
 80015e8:	229c      	movs	r2, #156	@ 0x9c
 80015ea:	701a      	strb	r2, [r3, #0]
			  motores(0, velocidad_motor);
 80015ec:	4b4b      	ldr	r3, [pc, #300]	@ (800171c <instruction+0x170>)
 80015ee:	f993 3000 	ldrsb.w	r3, [r3]
 80015f2:	4619      	mov	r1, r3
 80015f4:	2000      	movs	r0, #0
 80015f6:	f000 fe99 	bl	800232c <motores>
}
 80015fa:	e088      	b.n	800170e <instruction+0x162>
		  else if(datosRX[0] == 0x0C){
 80015fc:	4b46      	ldr	r3, [pc, #280]	@ (8001718 <instruction+0x16c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b0c      	cmp	r3, #12
 8001604:	d10a      	bne.n	800161c <instruction+0x70>
			  velocidad_motor = 0;
 8001606:	4b45      	ldr	r3, [pc, #276]	@ (800171c <instruction+0x170>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
			  motores(0, velocidad_motor);
 800160c:	4b43      	ldr	r3, [pc, #268]	@ (800171c <instruction+0x170>)
 800160e:	f993 3000 	ldrsb.w	r3, [r3]
 8001612:	4619      	mov	r1, r3
 8001614:	2000      	movs	r0, #0
 8001616:	f000 fe89 	bl	800232c <motores>
}
 800161a:	e078      	b.n	800170e <instruction+0x162>
		  else if(datosRX[0] == 0x09){
 800161c:	4b3e      	ldr	r3, [pc, #248]	@ (8001718 <instruction+0x16c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b09      	cmp	r3, #9
 8001624:	d115      	bne.n	8001652 <instruction+0xa6>
			  valor = (datosRX[1]);
 8001626:	4b3c      	ldr	r3, [pc, #240]	@ (8001718 <instruction+0x16c>)
 8001628:	785b      	ldrb	r3, [r3, #1]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	4b3c      	ldr	r3, [pc, #240]	@ (8001720 <instruction+0x174>)
 8001630:	601a      	str	r2, [r3, #0]
			  velocidad_motor = valor * (-1);
 8001632:	4b3b      	ldr	r3, [pc, #236]	@ (8001720 <instruction+0x174>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	425b      	negs	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	b25a      	sxtb	r2, r3
 800163e:	4b37      	ldr	r3, [pc, #220]	@ (800171c <instruction+0x170>)
 8001640:	701a      	strb	r2, [r3, #0]
			  motores(0, velocidad_motor);
 8001642:	4b36      	ldr	r3, [pc, #216]	@ (800171c <instruction+0x170>)
 8001644:	f993 3000 	ldrsb.w	r3, [r3]
 8001648:	4619      	mov	r1, r3
 800164a:	2000      	movs	r0, #0
 800164c:	f000 fe6e 	bl	800232c <motores>
}
 8001650:	e05d      	b.n	800170e <instruction+0x162>
		  else if(datosRX[0] == 0x07){
 8001652:	4b31      	ldr	r3, [pc, #196]	@ (8001718 <instruction+0x16c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b07      	cmp	r3, #7
 800165a:	d133      	bne.n	80016c4 <instruction+0x118>
			  memcpy(&voltaje_float, &datosRX[1], sizeof(float));
 800165c:	4b2e      	ldr	r3, [pc, #184]	@ (8001718 <instruction+0x16c>)
 800165e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001662:	461a      	mov	r2, r3
 8001664:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <instruction+0x178>)
 8001666:	601a      	str	r2, [r3, #0]
			  if (voltaje_float < 0) {
 8001668:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <instruction+0x178>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001676:	d504      	bpl.n	8001682 <instruction+0xd6>
				  voltaje_float = 0;
 8001678:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <instruction+0x178>)
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e00c      	b.n	800169c <instruction+0xf0>
			  else if (voltaje_float > 7.5) {
 8001682:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <instruction+0x178>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800168c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	dd02      	ble.n	800169c <instruction+0xf0>
				  voltaje_float = 7.5;
 8001696:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <instruction+0x178>)
 8001698:	4a23      	ldr	r2, [pc, #140]	@ (8001728 <instruction+0x17c>)
 800169a:	601a      	str	r2, [r3, #0]
			  conversor(voltaje_float);
 800169c:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <instruction+0x178>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	f7ff ff1f 	bl	80014e8 <conversor>
			  velocidad_motor = val_pwm;
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <instruction+0x180>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b25a      	sxtb	r2, r3
 80016b0:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <instruction+0x170>)
 80016b2:	701a      	strb	r2, [r3, #0]
			  motores(0, velocidad_motor);
 80016b4:	4b19      	ldr	r3, [pc, #100]	@ (800171c <instruction+0x170>)
 80016b6:	f993 3000 	ldrsb.w	r3, [r3]
 80016ba:	4619      	mov	r1, r3
 80016bc:	2000      	movs	r0, #0
 80016be:	f000 fe35 	bl	800232c <motores>
}
 80016c2:	e024      	b.n	800170e <instruction+0x162>
		  else if(datosRX[0] == 0x08){
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <instruction+0x16c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d11f      	bne.n	800170e <instruction+0x162>
			  vel_mm_s =(datosRX[1] << 8) | (datosRX[2]);
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <instruction+0x16c>)
 80016d0:	785b      	ldrb	r3, [r3, #1]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <instruction+0x16c>)
 80016da:	789b      	ldrb	r3, [r3, #2]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <instruction+0x184>)
 80016e6:	801a      	strh	r2, [r3, #0]
			  conversor_mm_s(vel_mm_s);
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <instruction+0x184>)
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff3a 	bl	8001568 <conversor_mm_s>
			  velocidad_motor = pwm_mm;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <instruction+0x188>)
 80016f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fa:	b25a      	sxtb	r2, r3
 80016fc:	4b07      	ldr	r3, [pc, #28]	@ (800171c <instruction+0x170>)
 80016fe:	701a      	strb	r2, [r3, #0]
			  motores(0, velocidad_motor);
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <instruction+0x170>)
 8001702:	f993 3000 	ldrsb.w	r3, [r3]
 8001706:	4619      	mov	r1, r3
 8001708:	2000      	movs	r0, #0
 800170a:	f000 fe0f 	bl	800232c <motores>
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000440 	.word	0x20000440
 8001718:	20000444 	.word	0x20000444
 800171c:	200003c6 	.word	0x200003c6
 8001720:	200003c0 	.word	0x200003c0
 8001724:	200003f8 	.word	0x200003f8
 8001728:	40f00000 	.word	0x40f00000
 800172c:	200003a8 	.word	0x200003a8
 8001730:	200003c4 	.word	0x200003c4
 8001734:	200003a4 	.word	0x200003a4

08001738 <aplicarFiltroFIR>:

int16_t aplicarFiltroFIR(int16_t rpm_actual){
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	80fb      	strh	r3, [r7, #6]
	rpm_buffer[buffer_index] = rpm_actual;
 8001742:	4b2e      	ldr	r3, [pc, #184]	@ (80017fc <aplicarFiltroFIR+0xc4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800174a:	ee07 2a90 	vmov	s15, r2
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	4a2b      	ldr	r2, [pc, #172]	@ (8001800 <aplicarFiltroFIR+0xc8>)
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	edc3 7a00 	vstr	s15, [r3]
	buffer_index = (buffer_index + 1) % FILTER_LENGTH;
 800175c:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <aplicarFiltroFIR+0xc4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	1c59      	adds	r1, r3, #1
 8001762:	4b28      	ldr	r3, [pc, #160]	@ (8001804 <aplicarFiltroFIR+0xcc>)
 8001764:	fb83 2301 	smull	r2, r3, r3, r1
 8001768:	109a      	asrs	r2, r3, #2
 800176a:	17cb      	asrs	r3, r1, #31
 800176c:	1ad2      	subs	r2, r2, r3
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	1aca      	subs	r2, r1, r3
 8001778:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <aplicarFiltroFIR+0xc4>)
 800177a:	601a      	str	r2, [r3, #0]

	float filtered_rpm = 0.0;
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < FILTER_LENGTH; i++) {
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	e028      	b.n	80017da <aplicarFiltroFIR+0xa2>
		int idx = (buffer_index - i + FILTER_LENGTH) % FILTER_LENGTH;
 8001788:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <aplicarFiltroFIR+0xc4>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f103 020a 	add.w	r2, r3, #10
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <aplicarFiltroFIR+0xcc>)
 8001796:	fb83 1302 	smull	r1, r3, r3, r2
 800179a:	1099      	asrs	r1, r3, #2
 800179c:	17d3      	asrs	r3, r2, #31
 800179e:	1ac9      	subs	r1, r1, r3
 80017a0:	460b      	mov	r3, r1
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	60fb      	str	r3, [r7, #12]
		filtered_rpm += fir_coeffs[i] * rpm_buffer[idx];
 80017ac:	4a16      	ldr	r2, [pc, #88]	@ (8001808 <aplicarFiltroFIR+0xd0>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	4a11      	ldr	r2, [pc, #68]	@ (8001800 <aplicarFiltroFIR+0xc8>)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80017cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d0:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < FILTER_LENGTH; i++) {
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	3301      	adds	r3, #1
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	ddd3      	ble.n	8001788 <aplicarFiltroFIR+0x50>
	}
	return filtered_rpm;
 80017e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e8:	ee17 3a90 	vmov	r3, s15
 80017ec:	b21b      	sxth	r3, r3
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	200003f0 	.word	0x200003f0
 8001800:	200003c8 	.word	0x200003c8
 8001804:	66666667 	.word	0x66666667
 8001808:	20000008 	.word	0x20000008

0800180c <calibracion>:


int abc;
void calibracion(){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
	int vrb = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4 , 0);
 8001816:	4b40      	ldr	r3, [pc, #256]	@ (8001918 <calibracion+0x10c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	625a      	str	r2, [r3, #36]	@ 0x24
	abc=__HAL_TIM_GET_COUNTER(&htim4);
 800181e:	4b3e      	ldr	r3, [pc, #248]	@ (8001918 <calibracion+0x10c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	461a      	mov	r2, r3
 8001826:	4b3d      	ldr	r3, [pc, #244]	@ (800191c <calibracion+0x110>)
 8001828:	601a      	str	r2, [r3, #0]
	while (abc >= 0) {
 800182a:	e06a      	b.n	8001902 <calibracion+0xf6>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001832:	483b      	ldr	r0, [pc, #236]	@ (8001920 <calibracion+0x114>)
 8001834:	f002 fad0 	bl	8003dd8 <HAL_GPIO_WritePin>

		while ((abc=__HAL_TIM_GET_COUNTER(&htim4)) >= 2) {
 8001838:	e054      	b.n	80018e4 <calibracion+0xd8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001840:	4837      	ldr	r0, [pc, #220]	@ (8001920 <calibracion+0x114>)
 8001842:	f002 fac9 	bl	8003dd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001846:	2201      	movs	r2, #1
 8001848:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800184c:	4834      	ldr	r0, [pc, #208]	@ (8001920 <calibracion+0x114>)
 800184e:	f002 fac3 	bl	8003dd8 <HAL_GPIO_WritePin>

			while ((abc=__HAL_TIM_GET_COUNTER(&htim4)) >= 4) {
 8001852:	e038      	b.n	80018c6 <calibracion+0xba>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800185a:	4831      	ldr	r0, [pc, #196]	@ (8001920 <calibracion+0x114>)
 800185c:	f002 fabc 	bl	8003dd8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001860:	2201      	movs	r2, #1
 8001862:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001866:	482e      	ldr	r0, [pc, #184]	@ (8001920 <calibracion+0x114>)
 8001868:	f002 fab6 	bl	8003dd8 <HAL_GPIO_WritePin>

				while ((abc=__HAL_TIM_GET_COUNTER(&htim4)) >= 6) {
 800186c:	e01e      	b.n	80018ac <calibracion+0xa0>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001874:	482a      	ldr	r0, [pc, #168]	@ (8001920 <calibracion+0x114>)
 8001876:	f002 faaf 	bl	8003dd8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 800187a:	2201      	movs	r2, #1
 800187c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001880:	4827      	ldr	r0, [pc, #156]	@ (8001920 <calibracion+0x114>)
 8001882:	f002 faa9 	bl	8003dd8 <HAL_GPIO_WritePin>

					if ((abc=__HAL_TIM_GET_COUNTER(&htim4)) >= 8) {
 8001886:	4b24      	ldr	r3, [pc, #144]	@ (8001918 <calibracion+0x10c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	461a      	mov	r2, r3
 800188e:	4b23      	ldr	r3, [pc, #140]	@ (800191c <calibracion+0x110>)
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	4b22      	ldr	r3, [pc, #136]	@ (800191c <calibracion+0x110>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b07      	cmp	r3, #7
 8001898:	dd08      	ble.n	80018ac <calibracion+0xa0>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018a0:	481f      	ldr	r0, [pc, #124]	@ (8001920 <calibracion+0x114>)
 80018a2:	f002 fa99 	bl	8003dd8 <HAL_GPIO_WritePin>
						vrb = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	607b      	str	r3, [r7, #4]
						break;
 80018aa:	e009      	b.n	80018c0 <calibracion+0xb4>
				while ((abc=__HAL_TIM_GET_COUNTER(&htim4)) >= 6) {
 80018ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001918 <calibracion+0x10c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b19      	ldr	r3, [pc, #100]	@ (800191c <calibracion+0x110>)
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	4b18      	ldr	r3, [pc, #96]	@ (800191c <calibracion+0x110>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	dcd6      	bgt.n	800186e <calibracion+0x62>

					}
				}

				if(vrb == 1){
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d00a      	beq.n	80018dc <calibracion+0xd0>
			while ((abc=__HAL_TIM_GET_COUNTER(&htim4)) >= 4) {
 80018c6:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <calibracion+0x10c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b13      	ldr	r3, [pc, #76]	@ (800191c <calibracion+0x110>)
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	4b12      	ldr	r3, [pc, #72]	@ (800191c <calibracion+0x110>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	dcbc      	bgt.n	8001854 <calibracion+0x48>
 80018da:	e000      	b.n	80018de <calibracion+0xd2>
					break;
 80018dc:	bf00      	nop
				}

			}

			if(vrb == 1){
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d00a      	beq.n	80018fa <calibracion+0xee>
		while ((abc=__HAL_TIM_GET_COUNTER(&htim4)) >= 2) {
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <calibracion+0x10c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <calibracion+0x110>)
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <calibracion+0x110>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	dca0      	bgt.n	800183a <calibracion+0x2e>
 80018f8:	e000      	b.n	80018fc <calibracion+0xf0>
				break;
 80018fa:	bf00      	nop
			}
		}


		if(vrb == 1){
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d004      	beq.n	800190c <calibracion+0x100>
	while (abc >= 0) {
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <calibracion+0x110>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	da90      	bge.n	800182c <calibracion+0x20>
			break;
		}
	}

}
 800190a:	e000      	b.n	800190e <calibracion+0x102>
			break;
 800190c:	bf00      	nop
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000280 	.word	0x20000280
 800191c:	20000554 	.word	0x20000554
 8001920:	40020400 	.word	0x40020400
 8001924:	00000000 	.word	0x00000000

08001928 <calculo_adc>:

void calculo_adc() {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0

    for (int i = 0; i < 5; i++) {
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	e023      	b.n	800197c <calculo_adc+0x54>
        adcVoltaje[i] = (adcValue[i] * 3.3) / 4095.0;
 8001934:	4a1a      	ldr	r2, [pc, #104]	@ (80019a0 <calculo_adc+0x78>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fd9d 	bl	800047c <__aeabi_i2d>
 8001942:	a313      	add	r3, pc, #76	@ (adr r3, 8001990 <calculo_adc+0x68>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fe02 	bl	8000550 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	a310      	add	r3, pc, #64	@ (adr r3, 8001998 <calculo_adc+0x70>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe ff23 	bl	80007a4 <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f84d 	bl	8000a04 <__aeabi_d2f>
 800196a:	4602      	mov	r2, r0
 800196c:	490d      	ldr	r1, [pc, #52]	@ (80019a4 <calculo_adc+0x7c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 5; i++) {
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3301      	adds	r3, #1
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b04      	cmp	r3, #4
 8001980:	ddd8      	ble.n	8001934 <calculo_adc+0xc>

    }
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	f3af 8000 	nop.w
 8001990:	66666666 	.word	0x66666666
 8001994:	400a6666 	.word	0x400a6666
 8001998:	00000000 	.word	0x00000000
 800199c:	40affe00 	.word	0x40affe00
 80019a0:	20000454 	.word	0x20000454
 80019a4:	2000046c 	.word	0x2000046c

080019a8 <calculo_mm>:



void calculo_mm() {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0

    adcMM[0] = (uint16_t)((-62.045 * adcVoltaje[0]) + 200);
 80019ac:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa0 <calculo_mm+0xf8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fd75 	bl	80004a0 <__aeabi_f2d>
 80019b6:	a338      	add	r3, pc, #224	@ (adr r3, 8001a98 <calculo_mm+0xf0>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fdc8 	bl	8000550 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	4b35      	ldr	r3, [pc, #212]	@ (8001aa4 <calculo_mm+0xfc>)
 80019ce:	f7fe fc09 	bl	80001e4 <__adddf3>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7fe fff3 	bl	80009c4 <__aeabi_d2uiz>
 80019de:	4603      	mov	r3, r0
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <calculo_mm+0x100>)
 80019e4:	801a      	strh	r2, [r3, #0]

    adcMM[1] = (uint16_t)((-62.045 * adcVoltaje[1]) + 200);
 80019e6:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa0 <calculo_mm+0xf8>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fd58 	bl	80004a0 <__aeabi_f2d>
 80019f0:	a329      	add	r3, pc, #164	@ (adr r3, 8001a98 <calculo_mm+0xf0>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fdab 	bl	8000550 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <calculo_mm+0xfc>)
 8001a08:	f7fe fbec 	bl	80001e4 <__adddf3>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7fe ffd6 	bl	80009c4 <__aeabi_d2uiz>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <calculo_mm+0x100>)
 8001a1e:	805a      	strh	r2, [r3, #2]

    adcMM[2] = (uint16_t)((-62.045 * adcVoltaje[2]) + 200);
 8001a20:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa0 <calculo_mm+0xf8>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fd3b 	bl	80004a0 <__aeabi_f2d>
 8001a2a:	a31b      	add	r3, pc, #108	@ (adr r3, 8001a98 <calculo_mm+0xf0>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	f7fe fd8e 	bl	8000550 <__aeabi_dmul>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <calculo_mm+0xfc>)
 8001a42:	f7fe fbcf 	bl	80001e4 <__adddf3>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7fe ffb9 	bl	80009c4 <__aeabi_d2uiz>
 8001a52:	4603      	mov	r3, r0
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <calculo_mm+0x100>)
 8001a58:	809a      	strh	r2, [r3, #4]

    adcMM[3] = (uint16_t)((-62.045 * adcVoltaje[3]) + 200);
 8001a5a:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <calculo_mm+0xf8>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd1e 	bl	80004a0 <__aeabi_f2d>
 8001a64:	a30c      	add	r3, pc, #48	@ (adr r3, 8001a98 <calculo_mm+0xf0>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fd71 	bl	8000550 <__aeabi_dmul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <calculo_mm+0xfc>)
 8001a7c:	f7fe fbb2 	bl	80001e4 <__adddf3>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7fe ff9c 	bl	80009c4 <__aeabi_d2uiz>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <calculo_mm+0x100>)
 8001a92:	80da      	strh	r2, [r3, #6]

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	8f5c28f6 	.word	0x8f5c28f6
 8001a9c:	c04f05c2 	.word	0xc04f05c2
 8001aa0:	2000046c 	.word	0x2000046c
 8001aa4:	40690000 	.word	0x40690000
 8001aa8:	20000460 	.word	0x20000460

08001aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aae:	b091      	sub	sp, #68	@ 0x44
 8001ab0:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab2:	f000 fefd 	bl	80028b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab6:	f000 f8cb 	bl	8001c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aba:	f000 fb85 	bl	80021c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001abe:	f000 fb63 	bl	8002188 <MX_DMA_Init>
  MX_TIM2_Init();
 8001ac2:	f000 f9b7 	bl	8001e34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ac6:	f000 fa03 	bl	8001ed0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001aca:	f008 faf3 	bl	800a0b4 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8001ace:	f000 fa9b 	bl	8002008 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001ad2:	f000 faed 	bl	80020b0 <MX_TIM9_Init>
  MX_ADC1_Init();
 8001ad6:	f000 f923 	bl	8001d20 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001ada:	f000 fa47 	bl	8001f6c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  motoresInit(&htim9, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001ade:	2204      	movs	r2, #4
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	484b      	ldr	r0, [pc, #300]	@ (8001c10 <main+0x164>)
 8001ae4:	f000 fbe6 	bl	80022b4 <motoresInit>
  HAL_TIM_Base_Start(&htim2);
 8001ae8:	484a      	ldr	r0, [pc, #296]	@ (8001c14 <main+0x168>)
 8001aea:	f004 f861 	bl	8005bb0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8001aee:	484a      	ldr	r0, [pc, #296]	@ (8001c18 <main+0x16c>)
 8001af0:	f004 f85e 	bl	8005bb0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8001af4:	4849      	ldr	r0, [pc, #292]	@ (8001c1c <main+0x170>)
 8001af6:	f004 f85b 	bl	8005bb0 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001afa:	213c      	movs	r1, #60	@ 0x3c
 8001afc:	4848      	ldr	r0, [pc, #288]	@ (8001c20 <main+0x174>)
 8001afe:	f004 fa61 	bl	8005fc4 <HAL_TIM_Encoder_Start>

  HAL_ADC_Start_DMA(&hadc1, adcValue, 5);
 8001b02:	2205      	movs	r2, #5
 8001b04:	4947      	ldr	r1, [pc, #284]	@ (8001c24 <main+0x178>)
 8001b06:	4848      	ldr	r0, [pc, #288]	@ (8001c28 <main+0x17c>)
 8001b08:	f000 ffac 	bl	8002a64 <HAL_ADC_Start_DMA>

  for (int i = 0; i < 5; i++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e018      	b.n	8001b44 <main+0x98>
      for (int j = 0; j < VOLTAGE_AVG_LENGTH; j++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	e00f      	b.n	8001b38 <main+0x8c>
          voltage_buffer[i][j] = 0.0;
 8001b18:	4944      	ldr	r1, [pc, #272]	@ (8001c2c <main+0x180>)
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
      for (int j = 0; j < VOLTAGE_AVG_LENGTH; j++) {
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	3301      	adds	r3, #1
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b09      	cmp	r3, #9
 8001b3c:	ddec      	ble.n	8001b18 <main+0x6c>
  for (int i = 0; i < 5; i++) {
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3301      	adds	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	dde3      	ble.n	8001b12 <main+0x66>
  while (1)
  {



	  instruction();
 8001b4a:	f7ff fd2f 	bl	80015ac <instruction>

	  calculo_rpm();
 8001b4e:	f7ff fc47 	bl	80013e0 <calculo_rpm>

	  contador = ((int32_t)__HAL_TIM_GET_COUNTER(&htim5)) /1431;
 8001b52:	4b33      	ldr	r3, [pc, #204]	@ (8001c20 <main+0x174>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	4a35      	ldr	r2, [pc, #212]	@ (8001c30 <main+0x184>)
 8001b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b5e:	1252      	asrs	r2, r2, #9
 8001b60:	17db      	asrs	r3, r3, #31
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	4a33      	ldr	r2, [pc, #204]	@ (8001c34 <main+0x188>)
 8001b66:	6013      	str	r3, [r2, #0]
	  tiempo = (__HAL_TIM_GET_COUNTER(&htim2)/2);
 8001b68:	4b2a      	ldr	r3, [pc, #168]	@ (8001c14 <main+0x168>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	085b      	lsrs	r3, r3, #1
 8001b70:	4a31      	ldr	r2, [pc, #196]	@ (8001c38 <main+0x18c>)
 8001b72:	6013      	str	r3, [r2, #0]


	  calibracion();
 8001b74:	f7ff fe4a 	bl	800180c <calibracion>
	  calculo_adc();
 8001b78:	f7ff fed6 	bl	8001928 <calculo_adc>
	  calculo_mm();
 8001b7c:	f7ff ff14 	bl	80019a8 <calculo_mm>

	  datos_enviar(rpm_f, contador, tiempo, velocidad_mm_s, velocidad_rad_s,
 8001b80:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <main+0x190>)
 8001b82:	f9b3 c000 	ldrsh.w	ip, [r3]
 8001b86:	4b2b      	ldr	r3, [pc, #172]	@ (8001c34 <main+0x188>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <main+0x18c>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	60ba      	str	r2, [r7, #8]
 8001b92:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <main+0x194>)
 8001b94:	f9b3 e000 	ldrsh.w	lr, [r3]
 8001b98:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <main+0x198>)
 8001b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9e:	4a21      	ldr	r2, [pc, #132]	@ (8001c24 <main+0x178>)
 8001ba0:	8812      	ldrh	r2, [r2, #0]
 8001ba2:	4920      	ldr	r1, [pc, #128]	@ (8001c24 <main+0x178>)
 8001ba4:	8849      	ldrh	r1, [r1, #2]
 8001ba6:	481f      	ldr	r0, [pc, #124]	@ (8001c24 <main+0x178>)
 8001ba8:	8880      	ldrh	r0, [r0, #4]
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	4c1d      	ldr	r4, [pc, #116]	@ (8001c24 <main+0x178>)
 8001bae:	88e4      	ldrh	r4, [r4, #6]
 8001bb0:	4d25      	ldr	r5, [pc, #148]	@ (8001c48 <main+0x19c>)
 8001bb2:	edd5 7a00 	vldr	s15, [r5]
 8001bb6:	4d24      	ldr	r5, [pc, #144]	@ (8001c48 <main+0x19c>)
 8001bb8:	ed95 7a01 	vldr	s14, [r5, #4]
 8001bbc:	4d22      	ldr	r5, [pc, #136]	@ (8001c48 <main+0x19c>)
 8001bbe:	edd5 6a02 	vldr	s13, [r5, #8]
 8001bc2:	4d21      	ldr	r5, [pc, #132]	@ (8001c48 <main+0x19c>)
 8001bc4:	ed95 6a03 	vldr	s12, [r5, #12]
 8001bc8:	4d20      	ldr	r5, [pc, #128]	@ (8001c4c <main+0x1a0>)
 8001bca:	882d      	ldrh	r5, [r5, #0]
 8001bcc:	4e1f      	ldr	r6, [pc, #124]	@ (8001c4c <main+0x1a0>)
 8001bce:	8876      	ldrh	r6, [r6, #2]
 8001bd0:	481e      	ldr	r0, [pc, #120]	@ (8001c4c <main+0x1a0>)
 8001bd2:	8880      	ldrh	r0, [r0, #4]
 8001bd4:	6038      	str	r0, [r7, #0]
 8001bd6:	481d      	ldr	r0, [pc, #116]	@ (8001c4c <main+0x1a0>)
 8001bd8:	88c0      	ldrh	r0, [r0, #6]
 8001bda:	9008      	str	r0, [sp, #32]
 8001bdc:	6838      	ldr	r0, [r7, #0]
 8001bde:	9007      	str	r0, [sp, #28]
 8001be0:	9606      	str	r6, [sp, #24]
 8001be2:	9505      	str	r5, [sp, #20]
 8001be4:	9404      	str	r4, [sp, #16]
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	9003      	str	r0, [sp, #12]
 8001bea:	9102      	str	r1, [sp, #8]
 8001bec:	9201      	str	r2, [sp, #4]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	eef0 1a46 	vmov.f32	s3, s12
 8001bf4:	eeb0 1a66 	vmov.f32	s2, s13
 8001bf8:	eef0 0a47 	vmov.f32	s1, s14
 8001bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001c00:	4673      	mov	r3, lr
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	68f9      	ldr	r1, [r7, #12]
 8001c06:	4660      	mov	r0, ip
 8001c08:	f7ff f8e4 	bl	8000dd4 <datos_enviar>
	  instruction();
 8001c0c:	bf00      	nop
 8001c0e:	e79c      	b.n	8001b4a <main+0x9e>
 8001c10:	20000310 	.word	0x20000310
 8001c14:	200001f0 	.word	0x200001f0
 8001c18:	20000238 	.word	0x20000238
 8001c1c:	20000280 	.word	0x20000280
 8001c20:	200002c8 	.word	0x200002c8
 8001c24:	20000454 	.word	0x20000454
 8001c28:	20000148 	.word	0x20000148
 8001c2c:	20000480 	.word	0x20000480
 8001c30:	5b983d8b 	.word	0x5b983d8b
 8001c34:	200003b4 	.word	0x200003b4
 8001c38:	200003a0 	.word	0x200003a0
 8001c3c:	200003b8 	.word	0x200003b8
 8001c40:	200003ba 	.word	0x200003ba
 8001c44:	200003bc 	.word	0x200003bc
 8001c48:	2000046c 	.word	0x2000046c
 8001c4c:	20000460 	.word	0x20000460

08001c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b094      	sub	sp, #80	@ 0x50
 8001c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c56:	f107 0320 	add.w	r3, r7, #32
 8001c5a:	2230      	movs	r2, #48	@ 0x30
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f008 ff3e 	bl	800aae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	4b27      	ldr	r3, [pc, #156]	@ (8001d18 <SystemClock_Config+0xc8>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	4a26      	ldr	r2, [pc, #152]	@ (8001d18 <SystemClock_Config+0xc8>)
 8001c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c84:	4b24      	ldr	r3, [pc, #144]	@ (8001d18 <SystemClock_Config+0xc8>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c90:	2300      	movs	r3, #0
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <SystemClock_Config+0xcc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a20      	ldr	r2, [pc, #128]	@ (8001d1c <SystemClock_Config+0xcc>)
 8001c9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <SystemClock_Config+0xcc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cac:	2301      	movs	r3, #1
 8001cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001cc0:	2319      	movs	r3, #25
 8001cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001cc4:	23c0      	movs	r3, #192	@ 0xc0
 8001cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd0:	f107 0320 	add.w	r3, r7, #32
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 faeb 	bl	80052b0 <HAL_RCC_OscConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ce0:	f000 fae2 	bl	80022a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce4:	230f      	movs	r3, #15
 8001ce6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2103      	movs	r1, #3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fd4d 	bl	80057a0 <HAL_RCC_ClockConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d0c:	f000 facc 	bl	80022a8 <Error_Handler>
  }
}
 8001d10:	bf00      	nop
 8001d12:	3750      	adds	r7, #80	@ 0x50
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40007000 	.word	0x40007000

08001d20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d26:	463b      	mov	r3, r7
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d32:	4b3d      	ldr	r3, [pc, #244]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d34:	4a3d      	ldr	r2, [pc, #244]	@ (8001e2c <MX_ADC1_Init+0x10c>)
 8001d36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d38:	4b3b      	ldr	r3, [pc, #236]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d40:	4b39      	ldr	r3, [pc, #228]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d46:	4b38      	ldr	r3, [pc, #224]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d4c:	4b36      	ldr	r3, [pc, #216]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d52:	4b35      	ldr	r3, [pc, #212]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d5a:	4b33      	ldr	r3, [pc, #204]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d60:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d62:	4a33      	ldr	r2, [pc, #204]	@ (8001e30 <MX_ADC1_Init+0x110>)
 8001d64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d66:	4b30      	ldr	r3, [pc, #192]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d6e:	2205      	movs	r2, #5
 8001d70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d72:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d80:	4829      	ldr	r0, [pc, #164]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001d82:	f000 fe2b 	bl	80029dc <HAL_ADC_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d8c:	f000 fa8c 	bl	80022a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d90:	2304      	movs	r3, #4
 8001d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d94:	2301      	movs	r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4821      	ldr	r0, [pc, #132]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001da2:	f000 ff63 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001dac:	f000 fa7c 	bl	80022a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001db0:	2305      	movs	r3, #5
 8001db2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001db4:	2302      	movs	r3, #2
 8001db6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db8:	463b      	mov	r3, r7
 8001dba:	4619      	mov	r1, r3
 8001dbc:	481a      	ldr	r0, [pc, #104]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001dbe:	f000 ff55 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001dc8:	f000 fa6e 	bl	80022a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001dcc:	2306      	movs	r3, #6
 8001dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4813      	ldr	r0, [pc, #76]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001dda:	f000 ff47 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001de4:	f000 fa60 	bl	80022a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001de8:	2307      	movs	r3, #7
 8001dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001dec:	2304      	movs	r3, #4
 8001dee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	4619      	mov	r1, r3
 8001df4:	480c      	ldr	r0, [pc, #48]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001df6:	f000 ff39 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001e00:	f000 fa52 	bl	80022a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e04:	2308      	movs	r3, #8
 8001e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001e08:	2305      	movs	r3, #5
 8001e0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4805      	ldr	r0, [pc, #20]	@ (8001e28 <MX_ADC1_Init+0x108>)
 8001e12:	f000 ff2b 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001e1c:	f000 fa44 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000148 	.word	0x20000148
 8001e2c:	40012000 	.word	0x40012000
 8001e30:	0f000001 	.word	0x0f000001

08001e34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e48:	463b      	mov	r3, r7
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <MX_TIM2_Init+0x98>)
 8001e52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 8001e58:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <MX_TIM2_Init+0x98>)
 8001e5a:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8001e5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <MX_TIM2_Init+0x98>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e66:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <MX_TIM2_Init+0x98>)
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <MX_TIM2_Init+0x98>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e74:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <MX_TIM2_Init+0x98>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e7a:	4814      	ldr	r0, [pc, #80]	@ (8001ecc <MX_TIM2_Init+0x98>)
 8001e7c:	f003 fe48 	bl	8005b10 <HAL_TIM_Base_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e86:	f000 fa0f 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e90:	f107 0308 	add.w	r3, r7, #8
 8001e94:	4619      	mov	r1, r3
 8001e96:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <MX_TIM2_Init+0x98>)
 8001e98:	f004 f9e4 	bl	8006264 <HAL_TIM_ConfigClockSource>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ea2:	f000 fa01 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eae:	463b      	mov	r3, r7
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4806      	ldr	r0, [pc, #24]	@ (8001ecc <MX_TIM2_Init+0x98>)
 8001eb4:	f004 fd76 	bl	80069a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ebe:	f000 f9f3 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200001f0 	.word	0x200001f0

08001ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <MX_TIM3_Init+0x94>)
 8001eee:	4a1e      	ldr	r2, [pc, #120]	@ (8001f68 <MX_TIM3_Init+0x98>)
 8001ef0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <MX_TIM3_Init+0x94>)
 8001ef4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8001ef8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <MX_TIM3_Init+0x94>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f00:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <MX_TIM3_Init+0x94>)
 8001f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <MX_TIM3_Init+0x94>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <MX_TIM3_Init+0x94>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f14:	4813      	ldr	r0, [pc, #76]	@ (8001f64 <MX_TIM3_Init+0x94>)
 8001f16:	f003 fdfb 	bl	8005b10 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f20:	f000 f9c2 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480c      	ldr	r0, [pc, #48]	@ (8001f64 <MX_TIM3_Init+0x94>)
 8001f32:	f004 f997 	bl	8006264 <HAL_TIM_ConfigClockSource>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f3c:	f000 f9b4 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <MX_TIM3_Init+0x94>)
 8001f4e:	f004 fd29 	bl	80069a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f58:	f000 f9a6 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000238 	.word	0x20000238
 8001f68:	40000400 	.word	0x40000400

08001f6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	463b      	mov	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <MX_TIM4_Init+0x94>)
 8001f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8002004 <MX_TIM4_Init+0x98>)
 8001f8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002000 <MX_TIM4_Init+0x94>)
 8001f90:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8001f94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <MX_TIM4_Init+0x94>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f9c:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <MX_TIM4_Init+0x94>)
 8001f9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fa2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa4:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <MX_TIM4_Init+0x94>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <MX_TIM4_Init+0x94>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fb0:	4813      	ldr	r0, [pc, #76]	@ (8002000 <MX_TIM4_Init+0x94>)
 8001fb2:	f003 fdad 	bl	8005b10 <HAL_TIM_Base_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001fbc:	f000 f974 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480c      	ldr	r0, [pc, #48]	@ (8002000 <MX_TIM4_Init+0x94>)
 8001fce:	f004 f949 	bl	8006264 <HAL_TIM_ConfigClockSource>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001fd8:	f000 f966 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	@ (8002000 <MX_TIM4_Init+0x94>)
 8001fea:	f004 fcdb 	bl	80069a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001ff4:	f000 f958 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000280 	.word	0x20000280
 8002004:	40000800 	.word	0x40000800

08002008 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08c      	sub	sp, #48	@ 0x30
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	2224      	movs	r2, #36	@ 0x24
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f008 fd62 	bl	800aae0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002024:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <MX_TIM5_Init+0xa0>)
 8002026:	4a21      	ldr	r2, [pc, #132]	@ (80020ac <MX_TIM5_Init+0xa4>)
 8002028:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800202a:	4b1f      	ldr	r3, [pc, #124]	@ (80020a8 <MX_TIM5_Init+0xa0>)
 800202c:	2200      	movs	r2, #0
 800202e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002030:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <MX_TIM5_Init+0xa0>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002036:	4b1c      	ldr	r3, [pc, #112]	@ (80020a8 <MX_TIM5_Init+0xa0>)
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203e:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <MX_TIM5_Init+0xa0>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002044:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <MX_TIM5_Init+0xa0>)
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800204a:	2303      	movs	r3, #3
 800204c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800204e:	2302      	movs	r3, #2
 8002050:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002052:	2301      	movs	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800205a:	230f      	movs	r3, #15
 800205c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800205e:	2302      	movs	r3, #2
 8002060:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002062:	2301      	movs	r3, #1
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002066:	2300      	movs	r3, #0
 8002068:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800206a:	230f      	movs	r3, #15
 800206c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	4619      	mov	r1, r3
 8002074:	480c      	ldr	r0, [pc, #48]	@ (80020a8 <MX_TIM5_Init+0xa0>)
 8002076:	f003 feff 	bl	8005e78 <HAL_TIM_Encoder_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002080:	f000 f912 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <MX_TIM5_Init+0xa0>)
 8002092:	f004 fc87 	bl	80069a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800209c:	f000 f904 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	3730      	adds	r7, #48	@ 0x30
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200002c8 	.word	0x200002c8
 80020ac:	40000c00 	.word	0x40000c00

080020b0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	@ 0x30
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020b6:	f107 0320 	add.w	r3, r7, #32
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	611a      	str	r2, [r3, #16]
 80020d2:	615a      	str	r2, [r3, #20]
 80020d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80020d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002180 <MX_TIM9_Init+0xd0>)
 80020d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002184 <MX_TIM9_Init+0xd4>)
 80020da:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 28-1;
 80020dc:	4b28      	ldr	r3, [pc, #160]	@ (8002180 <MX_TIM9_Init+0xd0>)
 80020de:	221b      	movs	r2, #27
 80020e0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e2:	4b27      	ldr	r3, [pc, #156]	@ (8002180 <MX_TIM9_Init+0xd0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <MX_TIM9_Init+0xd0>)
 80020ea:	2263      	movs	r2, #99	@ 0x63
 80020ec:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ee:	4b24      	ldr	r3, [pc, #144]	@ (8002180 <MX_TIM9_Init+0xd0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f4:	4b22      	ldr	r3, [pc, #136]	@ (8002180 <MX_TIM9_Init+0xd0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80020fa:	4821      	ldr	r0, [pc, #132]	@ (8002180 <MX_TIM9_Init+0xd0>)
 80020fc:	f003 fd08 	bl	8005b10 <HAL_TIM_Base_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 8002106:	f000 f8cf 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800210a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800210e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002110:	f107 0320 	add.w	r3, r7, #32
 8002114:	4619      	mov	r1, r3
 8002116:	481a      	ldr	r0, [pc, #104]	@ (8002180 <MX_TIM9_Init+0xd0>)
 8002118:	f004 f8a4 	bl	8006264 <HAL_TIM_ConfigClockSource>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8002122:	f000 f8c1 	bl	80022a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002126:	4816      	ldr	r0, [pc, #88]	@ (8002180 <MX_TIM9_Init+0xd0>)
 8002128:	f003 fd9c 	bl	8005c64 <HAL_TIM_PWM_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 8002132:	f000 f8b9 	bl	80022a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002136:	2360      	movs	r3, #96	@ 0x60
 8002138:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	2200      	movs	r2, #0
 800214a:	4619      	mov	r1, r3
 800214c:	480c      	ldr	r0, [pc, #48]	@ (8002180 <MX_TIM9_Init+0xd0>)
 800214e:	f003 ffc7 	bl	80060e0 <HAL_TIM_PWM_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8002158:	f000 f8a6 	bl	80022a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2204      	movs	r2, #4
 8002160:	4619      	mov	r1, r3
 8002162:	4807      	ldr	r0, [pc, #28]	@ (8002180 <MX_TIM9_Init+0xd0>)
 8002164:	f003 ffbc 	bl	80060e0 <HAL_TIM_PWM_ConfigChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM9_Init+0xc2>
  {
    Error_Handler();
 800216e:	f000 f89b 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002172:	4803      	ldr	r0, [pc, #12]	@ (8002180 <MX_TIM9_Init+0xd0>)
 8002174:	f000 fae2 	bl	800273c <HAL_TIM_MspPostInit>

}
 8002178:	bf00      	nop
 800217a:	3730      	adds	r7, #48	@ 0x30
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000310 	.word	0x20000310
 8002184:	40014000 	.word	0x40014000

08002188 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <MX_DMA_Init+0x3c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	4a0b      	ldr	r2, [pc, #44]	@ (80021c4 <MX_DMA_Init+0x3c>)
 8002198:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800219c:	6313      	str	r3, [r2, #48]	@ 0x30
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <MX_DMA_Init+0x3c>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	2038      	movs	r0, #56	@ 0x38
 80021b0:	f001 f8e7 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021b4:	2038      	movs	r0, #56	@ 0x38
 80021b6:	f001 f900 	bl	80033ba <HAL_NVIC_EnableIRQ>

}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	4b26      	ldr	r3, [pc, #152]	@ (800227c <MX_GPIO_Init+0xb4>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	4a25      	ldr	r2, [pc, #148]	@ (800227c <MX_GPIO_Init+0xb4>)
 80021e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ee:	4b23      	ldr	r3, [pc, #140]	@ (800227c <MX_GPIO_Init+0xb4>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <MX_GPIO_Init+0xb4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	4a1e      	ldr	r2, [pc, #120]	@ (800227c <MX_GPIO_Init+0xb4>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6313      	str	r3, [r2, #48]	@ 0x30
 800220a:	4b1c      	ldr	r3, [pc, #112]	@ (800227c <MX_GPIO_Init+0xb4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	4b18      	ldr	r3, [pc, #96]	@ (800227c <MX_GPIO_Init+0xb4>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	4a17      	ldr	r2, [pc, #92]	@ (800227c <MX_GPIO_Init+0xb4>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6313      	str	r3, [r2, #48]	@ 0x30
 8002226:	4b15      	ldr	r3, [pc, #84]	@ (800227c <MX_GPIO_Init+0xb4>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002232:	2200      	movs	r2, #0
 8002234:	f24f 0130 	movw	r1, #61488	@ 0xf030
 8002238:	4811      	ldr	r0, [pc, #68]	@ (8002280 <MX_GPIO_Init+0xb8>)
 800223a:	f001 fdcd 	bl	8003dd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800223e:	f24f 0330 	movw	r3, #61488	@ 0xf030
 8002242:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	2301      	movs	r3, #1
 8002246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	4619      	mov	r1, r3
 8002256:	480a      	ldr	r0, [pc, #40]	@ (8002280 <MX_GPIO_Init+0xb8>)
 8002258:	f001 fc3a 	bl	8003ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4619      	mov	r1, r3
 800226e:	4804      	ldr	r0, [pc, #16]	@ (8002280 <MX_GPIO_Init+0xb8>)
 8002270:	f001 fc2e 	bl	8003ad0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002274:	bf00      	nop
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40020400 	.word	0x40020400

08002284 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, adcValue, 5);
 800228c:	2205      	movs	r2, #5
 800228e:	4904      	ldr	r1, [pc, #16]	@ (80022a0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002290:	4804      	ldr	r0, [pc, #16]	@ (80022a4 <HAL_ADC_ConvCpltCallback+0x20>)
 8002292:	f000 fbe7 	bl	8002a64 <HAL_ADC_Start_DMA>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000454 	.word	0x20000454
 80022a4:	20000148 	.word	0x20000148

080022a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ac:	b672      	cpsid	i
}
 80022ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <Error_Handler+0x8>

080022b4 <motoresInit>:
#include "motorDriver.h"
TIM_HandleTypeDef *timmotorGlobal;



void motoresInit(TIM_HandleTypeDef *timmotor, uint32_t canal,uint32_t canal1){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]

	timmotorGlobal = timmotor;
 80022c0:	4a18      	ldr	r2, [pc, #96]	@ (8002324 <motoresInit+0x70>)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(timmotorGlobal, canal);
 80022c6:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <motoresInit+0x70>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 fd23 	bl	8005d18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timmotorGlobal, canal1);
 80022d2:	4b14      	ldr	r3, [pc, #80]	@ (8002324 <motoresInit+0x70>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 fd1d 	bl	8005d18 <HAL_TIM_PWM_Start>
	timmotorGlobal->Instance->CCR1 = 0;
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <motoresInit+0x70>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2200      	movs	r2, #0
 80022e6:	635a      	str	r2, [r3, #52]	@ 0x34
	timmotorGlobal->Instance->CCR2 = 0;
 80022e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <motoresInit+0x70>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2104      	movs	r1, #4
 80022f6:	480c      	ldr	r0, [pc, #48]	@ (8002328 <motoresInit+0x74>)
 80022f8:	f001 fd6e 	bl	8003dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2108      	movs	r1, #8
 8002300:	4809      	ldr	r0, [pc, #36]	@ (8002328 <motoresInit+0x74>)
 8002302:	f001 fd69 	bl	8003dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,0);
 8002306:	2200      	movs	r2, #0
 8002308:	2110      	movs	r1, #16
 800230a:	4807      	ldr	r0, [pc, #28]	@ (8002328 <motoresInit+0x74>)
 800230c:	f001 fd64 	bl	8003dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,0);
 8002310:	2200      	movs	r2, #0
 8002312:	2120      	movs	r1, #32
 8002314:	4804      	ldr	r0, [pc, #16]	@ (8002328 <motoresInit+0x74>)
 8002316:	f001 fd5f 	bl	8003dd8 <HAL_GPIO_WritePin>

}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000558 	.word	0x20000558
 8002328:	40020400 	.word	0x40020400

0800232c <motores>:
void motores(int8_t m1, int8_t m2){
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	460a      	mov	r2, r1
 8002336:	71fb      	strb	r3, [r7, #7]
 8002338:	4613      	mov	r3, r2
 800233a:	71bb      	strb	r3, [r7, #6]

	//Control m1
	if(m1 > 0){
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	2b00      	cmp	r3, #0
 8002342:	dd16      	ble.n	8002372 <motores+0x46>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,1);
 8002344:	2201      	movs	r2, #1
 8002346:	2104      	movs	r1, #4
 8002348:	4847      	ldr	r0, [pc, #284]	@ (8002468 <motores+0x13c>)
 800234a:	f001 fd45 	bl	8003dd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 800234e:	2200      	movs	r2, #0
 8002350:	2108      	movs	r1, #8
 8002352:	4845      	ldr	r0, [pc, #276]	@ (8002468 <motores+0x13c>)
 8002354:	f001 fd40 	bl	8003dd8 <HAL_GPIO_WritePin>

		if(m1 > 100)m1 = 100;
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	2b64      	cmp	r3, #100	@ 0x64
 800235e:	dd01      	ble.n	8002364 <motores+0x38>
 8002360:	2364      	movs	r3, #100	@ 0x64
 8002362:	71fb      	strb	r3, [r7, #7]
		timmotorGlobal->Instance->CCR1 = m1;
 8002364:	4b41      	ldr	r3, [pc, #260]	@ (800246c <motores+0x140>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800236e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002370:	e02d      	b.n	80023ce <motores+0xa2>
	}
	else if(m1 < 0){
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	da1a      	bge.n	80023b0 <motores+0x84>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,0);
 800237a:	2200      	movs	r2, #0
 800237c:	2104      	movs	r1, #4
 800237e:	483a      	ldr	r0, [pc, #232]	@ (8002468 <motores+0x13c>)
 8002380:	f001 fd2a 	bl	8003dd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
 8002384:	2201      	movs	r2, #1
 8002386:	2108      	movs	r1, #8
 8002388:	4837      	ldr	r0, [pc, #220]	@ (8002468 <motores+0x13c>)
 800238a:	f001 fd25 	bl	8003dd8 <HAL_GPIO_WritePin>
		m1 *= -1;
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	425b      	negs	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	71fb      	strb	r3, [r7, #7]

		if(m1 > 100)m1 = 100;
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	2b64      	cmp	r3, #100	@ 0x64
 800239c:	dd01      	ble.n	80023a2 <motores+0x76>
 800239e:	2364      	movs	r3, #100	@ 0x64
 80023a0:	71fb      	strb	r3, [r7, #7]
		timmotorGlobal->Instance->CCR1 = m1;
 80023a2:	4b32      	ldr	r3, [pc, #200]	@ (800246c <motores+0x140>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80023ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80023ae:	e00e      	b.n	80023ce <motores+0xa2>
	}
	else{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2104      	movs	r1, #4
 80023b4:	482c      	ldr	r0, [pc, #176]	@ (8002468 <motores+0x13c>)
 80023b6:	f001 fd0f 	bl	8003dd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2108      	movs	r1, #8
 80023be:	482a      	ldr	r0, [pc, #168]	@ (8002468 <motores+0x13c>)
 80023c0:	f001 fd0a 	bl	8003dd8 <HAL_GPIO_WritePin>
		timmotorGlobal->Instance->CCR1 = 0;
 80023c4:	4b29      	ldr	r3, [pc, #164]	@ (800246c <motores+0x140>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2200      	movs	r2, #0
 80023cc:	635a      	str	r2, [r3, #52]	@ 0x34
	}


	//Control m2
		if(m2 > 0){
 80023ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	dd16      	ble.n	8002404 <motores+0xd8>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,1);
 80023d6:	2201      	movs	r2, #1
 80023d8:	2110      	movs	r1, #16
 80023da:	4823      	ldr	r0, [pc, #140]	@ (8002468 <motores+0x13c>)
 80023dc:	f001 fcfc 	bl	8003dd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,0);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2120      	movs	r1, #32
 80023e4:	4820      	ldr	r0, [pc, #128]	@ (8002468 <motores+0x13c>)
 80023e6:	f001 fcf7 	bl	8003dd8 <HAL_GPIO_WritePin>

			if(m2 > 100)m2 = 100;
 80023ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80023ee:	2b64      	cmp	r3, #100	@ 0x64
 80023f0:	dd01      	ble.n	80023f6 <motores+0xca>
 80023f2:	2364      	movs	r3, #100	@ 0x64
 80023f4:	71bb      	strb	r3, [r7, #6]
			timmotorGlobal->Instance->CCR2 = m2;
 80023f6:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <motores+0x140>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002400:	639a      	str	r2, [r3, #56]	@ 0x38
		}




}
 8002402:	e02d      	b.n	8002460 <motores+0x134>
		else if(m2 < 0){
 8002404:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002408:	2b00      	cmp	r3, #0
 800240a:	da1a      	bge.n	8002442 <motores+0x116>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,0);
 800240c:	2200      	movs	r2, #0
 800240e:	2110      	movs	r1, #16
 8002410:	4815      	ldr	r0, [pc, #84]	@ (8002468 <motores+0x13c>)
 8002412:	f001 fce1 	bl	8003dd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,1);
 8002416:	2201      	movs	r2, #1
 8002418:	2120      	movs	r1, #32
 800241a:	4813      	ldr	r0, [pc, #76]	@ (8002468 <motores+0x13c>)
 800241c:	f001 fcdc 	bl	8003dd8 <HAL_GPIO_WritePin>
			m2 *= -1;
 8002420:	79bb      	ldrb	r3, [r7, #6]
 8002422:	425b      	negs	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	71bb      	strb	r3, [r7, #6]
			if(m2 > 100)m2 = 100;
 8002428:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800242c:	2b64      	cmp	r3, #100	@ 0x64
 800242e:	dd01      	ble.n	8002434 <motores+0x108>
 8002430:	2364      	movs	r3, #100	@ 0x64
 8002432:	71bb      	strb	r3, [r7, #6]
			timmotorGlobal->Instance->CCR2 = m2;
 8002434:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <motores+0x140>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800243e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002440:	e00e      	b.n	8002460 <motores+0x134>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,0);
 8002442:	2200      	movs	r2, #0
 8002444:	2110      	movs	r1, #16
 8002446:	4808      	ldr	r0, [pc, #32]	@ (8002468 <motores+0x13c>)
 8002448:	f001 fcc6 	bl	8003dd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,0);
 800244c:	2200      	movs	r2, #0
 800244e:	2120      	movs	r1, #32
 8002450:	4805      	ldr	r0, [pc, #20]	@ (8002468 <motores+0x13c>)
 8002452:	f001 fcc1 	bl	8003dd8 <HAL_GPIO_WritePin>
			timmotorGlobal->Instance->CCR2 = 0;
 8002456:	4b05      	ldr	r3, [pc, #20]	@ (800246c <motores+0x140>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2200      	movs	r2, #0
 800245e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40020400 	.word	0x40020400
 800246c:	20000558 	.word	0x20000558

08002470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <HAL_MspInit+0x4c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	4a0f      	ldr	r2, [pc, #60]	@ (80024bc <HAL_MspInit+0x4c>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002484:	6453      	str	r3, [r2, #68]	@ 0x44
 8002486:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <HAL_MspInit+0x4c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <HAL_MspInit+0x4c>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	4a08      	ldr	r2, [pc, #32]	@ (80024bc <HAL_MspInit+0x4c>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a2:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <HAL_MspInit+0x4c>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800

080024c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a3c      	ldr	r2, [pc, #240]	@ (80025d0 <HAL_ADC_MspInit+0x110>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d171      	bne.n	80025c6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b3b      	ldr	r3, [pc, #236]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ea:	4a3a      	ldr	r2, [pc, #232]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024f2:	4b38      	ldr	r3, [pc, #224]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b34      	ldr	r3, [pc, #208]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4a33      	ldr	r2, [pc, #204]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6313      	str	r3, [r2, #48]	@ 0x30
 800250e:	4b31      	ldr	r3, [pc, #196]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	4b2d      	ldr	r3, [pc, #180]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a2c      	ldr	r2, [pc, #176]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b2a      	ldr	r3, [pc, #168]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002536:	23f0      	movs	r3, #240	@ 0xf0
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800253a:	2303      	movs	r3, #3
 800253c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	4823      	ldr	r0, [pc, #140]	@ (80025d8 <HAL_ADC_MspInit+0x118>)
 800254a:	f001 fac1 	bl	8003ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800254e:	2301      	movs	r3, #1
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002552:	2303      	movs	r3, #3
 8002554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4619      	mov	r1, r3
 8002560:	481e      	ldr	r0, [pc, #120]	@ (80025dc <HAL_ADC_MspInit+0x11c>)
 8002562:	f001 fab5 	bl	8003ad0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002566:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 8002568:	4a1e      	ldr	r2, [pc, #120]	@ (80025e4 <HAL_ADC_MspInit+0x124>)
 800256a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800256c:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 800256e:	2200      	movs	r2, #0
 8002570:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002572:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002578:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800257e:	4b18      	ldr	r3, [pc, #96]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 8002580:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002584:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002586:	4b16      	ldr	r3, [pc, #88]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 8002588:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800258c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800258e:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 8002590:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002594:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002596:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 8002598:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800259c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a4:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025aa:	480d      	ldr	r0, [pc, #52]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 80025ac:	f000 ff20 	bl	80033f0 <HAL_DMA_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80025b6:	f7ff fe77 	bl	80022a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 80025be:	639a      	str	r2, [r3, #56]	@ 0x38
 80025c0:	4a07      	ldr	r2, [pc, #28]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	@ 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40012000 	.word	0x40012000
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020400 	.word	0x40020400
 80025e0:	20000190 	.word	0x20000190
 80025e4:	40026410 	.word	0x40026410

080025e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f8:	d10e      	bne.n	8002618 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	4b27      	ldr	r3, [pc, #156]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	4a26      	ldr	r2, [pc, #152]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6413      	str	r3, [r2, #64]	@ 0x40
 800260a:	4b24      	ldr	r3, [pc, #144]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002616:	e03a      	b.n	800268e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a20      	ldr	r2, [pc, #128]	@ (80026a0 <HAL_TIM_Base_MspInit+0xb8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	4b1d      	ldr	r3, [pc, #116]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	4a1c      	ldr	r2, [pc, #112]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	6413      	str	r3, [r2, #64]	@ 0x40
 8002632:	4b1a      	ldr	r3, [pc, #104]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
}
 800263e:	e026      	b.n	800268e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a17      	ldr	r2, [pc, #92]	@ (80026a4 <HAL_TIM_Base_MspInit+0xbc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10e      	bne.n	8002668 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b13      	ldr	r3, [pc, #76]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	4a12      	ldr	r2, [pc, #72]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	6413      	str	r3, [r2, #64]	@ 0x40
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
}
 8002666:	e012      	b.n	800268e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0e      	ldr	r2, [pc, #56]	@ (80026a8 <HAL_TIM_Base_MspInit+0xc0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10d      	bne.n	800268e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	4a08      	ldr	r2, [pc, #32]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002680:	6453      	str	r3, [r2, #68]	@ 0x44
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40000800 	.word	0x40000800
 80026a8:	40014000 	.word	0x40014000

080026ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	@ 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a19      	ldr	r2, [pc, #100]	@ (8002730 <HAL_TIM_Encoder_MspInit+0x84>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d12b      	bne.n	8002726 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	4a17      	ldr	r2, [pc, #92]	@ (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 80026d8:	f043 0308 	orr.w	r3, r3, #8
 80026dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a10      	ldr	r2, [pc, #64]	@ (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002734 <HAL_TIM_Encoder_MspInit+0x88>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002706:	2303      	movs	r3, #3
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002716:	2302      	movs	r3, #2
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	4805      	ldr	r0, [pc, #20]	@ (8002738 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002722:	f001 f9d5 	bl	8003ad0 <HAL_GPIO_Init>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	@ 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40000c00 	.word	0x40000c00
 8002734:	40023800 	.word	0x40023800
 8002738:	40020000 	.word	0x40020000

0800273c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a12      	ldr	r2, [pc, #72]	@ (80027a4 <HAL_TIM_MspPostInit+0x68>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d11d      	bne.n	800279a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <HAL_TIM_MspPostInit+0x6c>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	4a10      	ldr	r2, [pc, #64]	@ (80027a8 <HAL_TIM_MspPostInit+0x6c>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6313      	str	r3, [r2, #48]	@ 0x30
 800276e:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <HAL_TIM_MspPostInit+0x6c>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800277a:	230c      	movs	r3, #12
 800277c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800278a:	2303      	movs	r3, #3
 800278c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278e:	f107 030c 	add.w	r3, r7, #12
 8002792:	4619      	mov	r1, r3
 8002794:	4805      	ldr	r0, [pc, #20]	@ (80027ac <HAL_TIM_MspPostInit+0x70>)
 8002796:	f001 f99b 	bl	8003ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800279a:	bf00      	nop
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40014000 	.word	0x40014000
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020000 	.word	0x40020000

080027b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <NMI_Handler+0x4>

080027b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <HardFault_Handler+0x4>

080027c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <MemManage_Handler+0x4>

080027c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <BusFault_Handler+0x4>

080027d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <UsageFault_Handler+0x4>

080027d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002806:	f000 f8a5 	bl	8002954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002814:	4802      	ldr	r0, [pc, #8]	@ (8002820 <DMA2_Stream0_IRQHandler+0x10>)
 8002816:	f000 fef1 	bl	80035fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000190 	.word	0x20000190

08002824 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002828:	4802      	ldr	r0, [pc, #8]	@ (8002834 <OTG_FS_IRQHandler+0x10>)
 800282a:	f001 fc32 	bl	8004092 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20001a40 	.word	0x20001a40

08002838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800283c:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <SystemInit+0x20>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002842:	4a05      	ldr	r2, [pc, #20]	@ (8002858 <SystemInit+0x20>)
 8002844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800285c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002894 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002860:	f7ff ffea 	bl	8002838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002864:	480c      	ldr	r0, [pc, #48]	@ (8002898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002866:	490d      	ldr	r1, [pc, #52]	@ (800289c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002868:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800286c:	e002      	b.n	8002874 <LoopCopyDataInit>

0800286e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800286e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002872:	3304      	adds	r3, #4

08002874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002878:	d3f9      	bcc.n	800286e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800287a:	4a0a      	ldr	r2, [pc, #40]	@ (80028a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800287c:	4c0a      	ldr	r4, [pc, #40]	@ (80028a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800287e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002880:	e001      	b.n	8002886 <LoopFillZerobss>

08002882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002884:	3204      	adds	r2, #4

08002886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002888:	d3fb      	bcc.n	8002882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800288a:	f008 f931 	bl	800aaf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800288e:	f7ff f90d 	bl	8001aac <main>
  bx  lr    
 8002892:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800289c:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 80028a0:	0800abdc 	.word	0x0800abdc
  ldr r2, =_sbss
 80028a4:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 80028a8:	20002144 	.word	0x20002144

080028ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC_IRQHandler>
	...

080028b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028b4:	4b0e      	ldr	r3, [pc, #56]	@ (80028f0 <HAL_Init+0x40>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	@ (80028f0 <HAL_Init+0x40>)
 80028ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <HAL_Init+0x40>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	@ (80028f0 <HAL_Init+0x40>)
 80028c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028cc:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a07      	ldr	r2, [pc, #28]	@ (80028f0 <HAL_Init+0x40>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d8:	2003      	movs	r0, #3
 80028da:	f000 fd47 	bl	800336c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028de:	200f      	movs	r0, #15
 80028e0:	f000 f808 	bl	80028f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e4:	f7ff fdc4 	bl	8002470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023c00 	.word	0x40023c00

080028f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028fc:	4b12      	ldr	r3, [pc, #72]	@ (8002948 <HAL_InitTick+0x54>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b12      	ldr	r3, [pc, #72]	@ (800294c <HAL_InitTick+0x58>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800290a:	fbb3 f3f1 	udiv	r3, r3, r1
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fd5f 	bl	80033d6 <HAL_SYSTICK_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00e      	b.n	8002940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b0f      	cmp	r3, #15
 8002926:	d80a      	bhi.n	800293e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002928:	2200      	movs	r2, #0
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f000 fd27 	bl	8003382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002934:	4a06      	ldr	r2, [pc, #24]	@ (8002950 <HAL_InitTick+0x5c>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000030 	.word	0x20000030
 800294c:	20000038 	.word	0x20000038
 8002950:	20000034 	.word	0x20000034

08002954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	@ (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000038 	.word	0x20000038
 8002978:	2000055c 	.word	0x2000055c

0800297c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b03      	ldr	r3, [pc, #12]	@ (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	2000055c 	.word	0x2000055c

08002994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7ff ffee 	bl	800297c <HAL_GetTick>
 80029a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d005      	beq.n	80029ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <HAL_Delay+0x44>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ba:	bf00      	nop
 80029bc:	f7ff ffde 	bl	800297c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d8f7      	bhi.n	80029bc <HAL_Delay+0x28>
  {
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000038 	.word	0x20000038

080029dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e033      	b.n	8002a5a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fd60 	bl	80024c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d118      	bne.n	8002a4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a22:	f023 0302 	bic.w	r3, r3, #2
 8002a26:	f043 0202 	orr.w	r2, r3, #2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fa4e 	bl	8002ed0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f023 0303 	bic.w	r3, r3, #3
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a4a:	e001      	b.n	8002a50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_Start_DMA+0x1e>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e0ce      	b.n	8002c20 <HAL_ADC_Start_DMA+0x1bc>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d018      	beq.n	8002aca <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002aa8:	4b5f      	ldr	r3, [pc, #380]	@ (8002c28 <HAL_ADC_Start_DMA+0x1c4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a5f      	ldr	r2, [pc, #380]	@ (8002c2c <HAL_ADC_Start_DMA+0x1c8>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	0c9a      	lsrs	r2, r3, #18
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002abc:	e002      	b.n	8002ac4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f9      	bne.n	8002abe <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad8:	d107      	bne.n	8002aea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ae8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	f040 8086 	bne.w	8002c06 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b24:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b38:	d106      	bne.n	8002b48 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	f023 0206 	bic.w	r2, r3, #6
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b46:	e002      	b.n	8002b4e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b56:	4b36      	ldr	r3, [pc, #216]	@ (8002c30 <HAL_ADC_Start_DMA+0x1cc>)
 8002b58:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5e:	4a35      	ldr	r2, [pc, #212]	@ (8002c34 <HAL_ADC_Start_DMA+0x1d0>)
 8002b60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b66:	4a34      	ldr	r2, [pc, #208]	@ (8002c38 <HAL_ADC_Start_DMA+0x1d4>)
 8002b68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6e:	4a33      	ldr	r2, [pc, #204]	@ (8002c3c <HAL_ADC_Start_DMA+0x1d8>)
 8002b70:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002b8a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b9a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	334c      	adds	r3, #76	@ 0x4c
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f000 fcce 	bl	800354c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10f      	bne.n	8002bdc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d129      	bne.n	8002c1e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	e020      	b.n	8002c1e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a17      	ldr	r2, [pc, #92]	@ (8002c40 <HAL_ADC_Start_DMA+0x1dc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d11b      	bne.n	8002c1e <HAL_ADC_Start_DMA+0x1ba>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d114      	bne.n	8002c1e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	e00b      	b.n	8002c1e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000030 	.word	0x20000030
 8002c2c:	431bde83 	.word	0x431bde83
 8002c30:	40012300 	.word	0x40012300
 8002c34:	080030c9 	.word	0x080030c9
 8002c38:	08003183 	.word	0x08003183
 8002c3c:	0800319f 	.word	0x0800319f
 8002c40:	40012000 	.word	0x40012000

08002c44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x1c>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e113      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x244>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b09      	cmp	r3, #9
 8002c96:	d925      	bls.n	8002ce4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68d9      	ldr	r1, [r3, #12]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	3b1e      	subs	r3, #30
 8002cae:	2207      	movs	r2, #7
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43da      	mvns	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	400a      	ands	r2, r1
 8002cbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68d9      	ldr	r1, [r3, #12]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	4618      	mov	r0, r3
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4403      	add	r3, r0
 8002cd6:	3b1e      	subs	r3, #30
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	e022      	b.n	8002d2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6919      	ldr	r1, [r3, #16]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	400a      	ands	r2, r1
 8002d06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6919      	ldr	r1, [r3, #16]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4403      	add	r3, r0
 8002d20:	409a      	lsls	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d824      	bhi.n	8002d7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	3b05      	subs	r3, #5
 8002d44:	221f      	movs	r2, #31
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	400a      	ands	r2, r1
 8002d52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	4618      	mov	r0, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3b05      	subs	r3, #5
 8002d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d7a:	e04c      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	d824      	bhi.n	8002dce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	3b23      	subs	r3, #35	@ 0x23
 8002d96:	221f      	movs	r2, #31
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	400a      	ands	r2, r1
 8002da4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	4618      	mov	r0, r3
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3b23      	subs	r3, #35	@ 0x23
 8002dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dcc:	e023      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	3b41      	subs	r3, #65	@ 0x41
 8002de0:	221f      	movs	r2, #31
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	400a      	ands	r2, r1
 8002dee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	3b41      	subs	r3, #65	@ 0x41
 8002e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e16:	4b29      	ldr	r3, [pc, #164]	@ (8002ebc <HAL_ADC_ConfigChannel+0x250>)
 8002e18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a28      	ldr	r2, [pc, #160]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x254>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d10f      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x1d8>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b12      	cmp	r3, #18
 8002e2a:	d10b      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x254>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d12b      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x23a>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x258>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d003      	beq.n	8002e60 <HAL_ADC_ConfigChannel+0x1f4>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b11      	cmp	r3, #17
 8002e5e:	d122      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a11      	ldr	r2, [pc, #68]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x258>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d111      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e82:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <HAL_ADC_ConfigChannel+0x25c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a11      	ldr	r2, [pc, #68]	@ (8002ecc <HAL_ADC_ConfigChannel+0x260>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	0c9a      	lsrs	r2, r3, #18
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e98:	e002      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f9      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40012300 	.word	0x40012300
 8002ec0:	40012000 	.word	0x40012000
 8002ec4:	10000012 	.word	0x10000012
 8002ec8:	20000030 	.word	0x20000030
 8002ecc:	431bde83 	.word	0x431bde83

08002ed0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ed8:	4b79      	ldr	r3, [pc, #484]	@ (80030c0 <ADC_Init+0x1f0>)
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6899      	ldr	r1, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	4a58      	ldr	r2, [pc, #352]	@ (80030c4 <ADC_Init+0x1f4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d022      	beq.n	8002fae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6899      	ldr	r1, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	e00f      	b.n	8002fce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fcc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0202 	bic.w	r2, r2, #2
 8002fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7e1b      	ldrb	r3, [r3, #24]
 8002fe8:	005a      	lsls	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800300a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800301a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	3b01      	subs	r3, #1
 8003028:	035a      	lsls	r2, r3, #13
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	e007      	b.n	8003044 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003042:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	3b01      	subs	r3, #1
 8003060:	051a      	lsls	r2, r3, #20
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003086:	025a      	lsls	r2, r3, #9
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800309e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6899      	ldr	r1, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	029a      	lsls	r2, r3, #10
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40012300 	.word	0x40012300
 80030c4:	0f000001 	.word	0x0f000001

080030c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d13c      	bne.n	800315c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d12b      	bne.n	8003154 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003100:	2b00      	cmp	r3, #0
 8003102:	d127      	bne.n	8003154 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800310e:	2b00      	cmp	r3, #0
 8003110:	d006      	beq.n	8003120 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800311c:	2b00      	cmp	r3, #0
 800311e:	d119      	bne.n	8003154 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0220 	bic.w	r2, r2, #32
 800312e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f7ff f895 	bl	8002284 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800315a:	e00e      	b.n	800317a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff fd75 	bl	8002c58 <HAL_ADC_ErrorCallback>
}
 800316e:	e004      	b.n	800317a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	4798      	blx	r3
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7ff fd57 	bl	8002c44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031aa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2240      	movs	r2, #64	@ 0x40
 80031b0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	f043 0204 	orr.w	r2, r3, #4
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fd4a 	bl	8002c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <__NVIC_SetPriorityGrouping+0x44>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031e8:	4013      	ands	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031fe:	4a04      	ldr	r2, [pc, #16]	@ (8003210 <__NVIC_SetPriorityGrouping+0x44>)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	60d3      	str	r3, [r2, #12]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003218:	4b04      	ldr	r3, [pc, #16]	@ (800322c <__NVIC_GetPriorityGrouping+0x18>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	f003 0307 	and.w	r3, r3, #7
}
 8003222:	4618      	mov	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	2b00      	cmp	r3, #0
 8003240:	db0b      	blt.n	800325a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	f003 021f 	and.w	r2, r3, #31
 8003248:	4907      	ldr	r1, [pc, #28]	@ (8003268 <__NVIC_EnableIRQ+0x38>)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	2001      	movs	r0, #1
 8003252:	fa00 f202 	lsl.w	r2, r0, r2
 8003256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	e000e100 	.word	0xe000e100

0800326c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	6039      	str	r1, [r7, #0]
 8003276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327c:	2b00      	cmp	r3, #0
 800327e:	db0a      	blt.n	8003296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	490c      	ldr	r1, [pc, #48]	@ (80032b8 <__NVIC_SetPriority+0x4c>)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	0112      	lsls	r2, r2, #4
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	440b      	add	r3, r1
 8003290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003294:	e00a      	b.n	80032ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4908      	ldr	r1, [pc, #32]	@ (80032bc <__NVIC_SetPriority+0x50>)
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	3b04      	subs	r3, #4
 80032a4:	0112      	lsls	r2, r2, #4
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	440b      	add	r3, r1
 80032aa:	761a      	strb	r2, [r3, #24]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000e100 	.word	0xe000e100
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	@ 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f1c3 0307 	rsb	r3, r3, #7
 80032da:	2b04      	cmp	r3, #4
 80032dc:	bf28      	it	cs
 80032de:	2304      	movcs	r3, #4
 80032e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3304      	adds	r3, #4
 80032e6:	2b06      	cmp	r3, #6
 80032e8:	d902      	bls.n	80032f0 <NVIC_EncodePriority+0x30>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3b03      	subs	r3, #3
 80032ee:	e000      	b.n	80032f2 <NVIC_EncodePriority+0x32>
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f4:	f04f 32ff 	mov.w	r2, #4294967295
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	401a      	ands	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	43d9      	mvns	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	4313      	orrs	r3, r2
         );
}
 800331a:	4618      	mov	r0, r3
 800331c:	3724      	adds	r7, #36	@ 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003338:	d301      	bcc.n	800333e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800333a:	2301      	movs	r3, #1
 800333c:	e00f      	b.n	800335e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800333e:	4a0a      	ldr	r2, [pc, #40]	@ (8003368 <SysTick_Config+0x40>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003346:	210f      	movs	r1, #15
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f7ff ff8e 	bl	800326c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <SysTick_Config+0x40>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003356:	4b04      	ldr	r3, [pc, #16]	@ (8003368 <SysTick_Config+0x40>)
 8003358:	2207      	movs	r2, #7
 800335a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	e000e010 	.word	0xe000e010

0800336c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff29 	bl	80031cc <__NVIC_SetPriorityGrouping>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003394:	f7ff ff3e 	bl	8003214 <__NVIC_GetPriorityGrouping>
 8003398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	6978      	ldr	r0, [r7, #20]
 80033a0:	f7ff ff8e 	bl	80032c0 <NVIC_EncodePriority>
 80033a4:	4602      	mov	r2, r0
 80033a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff5d 	bl	800326c <__NVIC_SetPriority>
}
 80033b2:	bf00      	nop
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff31 	bl	8003230 <__NVIC_EnableIRQ>
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ffa2 	bl	8003328 <SysTick_Config>
 80033e4:	4603      	mov	r3, r0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033fc:	f7ff fabe 	bl	800297c <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e099      	b.n	8003540 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800342c:	e00f      	b.n	800344e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800342e:	f7ff faa5 	bl	800297c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b05      	cmp	r3, #5
 800343a:	d908      	bls.n	800344e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2203      	movs	r2, #3
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e078      	b.n	8003540 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e8      	bne.n	800342e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4b38      	ldr	r3, [pc, #224]	@ (8003548 <HAL_DMA_Init+0x158>)
 8003468:	4013      	ands	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800347a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d107      	bne.n	80034b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b0:	4313      	orrs	r3, r2
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f023 0307 	bic.w	r3, r3, #7
 80034ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d117      	bne.n	8003512 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00e      	beq.n	8003512 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fa6f 	bl	80039d8 <DMA_CheckFifoParam>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2240      	movs	r2, #64	@ 0x40
 8003504:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800350e:	2301      	movs	r3, #1
 8003510:	e016      	b.n	8003540 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa26 	bl	800396c <DMA_CalcBaseAndBitshift>
 8003520:	4603      	mov	r3, r0
 8003522:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	223f      	movs	r2, #63	@ 0x3f
 800352a:	409a      	lsls	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	f010803f 	.word	0xf010803f

0800354c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003562:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_DMA_Start_IT+0x26>
 800356e:	2302      	movs	r3, #2
 8003570:	e040      	b.n	80035f4 <HAL_DMA_Start_IT+0xa8>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	d12f      	bne.n	80035e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2202      	movs	r2, #2
 800358a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f9b8 	bl	8003910 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a4:	223f      	movs	r2, #63	@ 0x3f
 80035a6:	409a      	lsls	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0216 	orr.w	r2, r2, #22
 80035ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0208 	orr.w	r2, r2, #8
 80035d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e005      	b.n	80035f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
 80035f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003608:	4b8e      	ldr	r3, [pc, #568]	@ (8003844 <HAL_DMA_IRQHandler+0x248>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a8e      	ldr	r2, [pc, #568]	@ (8003848 <HAL_DMA_IRQHandler+0x24c>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003626:	2208      	movs	r2, #8
 8003628:	409a      	lsls	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01a      	beq.n	8003668 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0204 	bic.w	r2, r2, #4
 800364e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003654:	2208      	movs	r2, #8
 8003656:	409a      	lsls	r2, r3
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	2201      	movs	r2, #1
 800366e:	409a      	lsls	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d012      	beq.n	800369e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368a:	2201      	movs	r2, #1
 800368c:	409a      	lsls	r2, r3
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003696:	f043 0202 	orr.w	r2, r3, #2
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a2:	2204      	movs	r2, #4
 80036a4:	409a      	lsls	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d012      	beq.n	80036d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c0:	2204      	movs	r2, #4
 80036c2:	409a      	lsls	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036cc:	f043 0204 	orr.w	r2, r3, #4
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d8:	2210      	movs	r2, #16
 80036da:	409a      	lsls	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d043      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d03c      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f6:	2210      	movs	r2, #16
 80036f8:	409a      	lsls	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d018      	beq.n	800373e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d108      	bne.n	800372c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d024      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
 800372a:	e01f      	b.n	800376c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01b      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
 800373c:	e016      	b.n	800376c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0208 	bic.w	r2, r2, #8
 800375a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	2220      	movs	r2, #32
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 808f 	beq.w	800389c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8087 	beq.w	800389c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003792:	2220      	movs	r2, #32
 8003794:	409a      	lsls	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	d136      	bne.n	8003814 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0216 	bic.w	r2, r2, #22
 80037b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <HAL_DMA_IRQHandler+0x1da>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0208 	bic.w	r2, r2, #8
 80037e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ea:	223f      	movs	r2, #63	@ 0x3f
 80037ec:	409a      	lsls	r2, r3
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003806:	2b00      	cmp	r3, #0
 8003808:	d07e      	beq.n	8003908 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4798      	blx	r3
        }
        return;
 8003812:	e079      	b.n	8003908 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01d      	beq.n	800385e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10d      	bne.n	800384c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003834:	2b00      	cmp	r3, #0
 8003836:	d031      	beq.n	800389c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
 8003840:	e02c      	b.n	800389c <HAL_DMA_IRQHandler+0x2a0>
 8003842:	bf00      	nop
 8003844:	20000030 	.word	0x20000030
 8003848:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d023      	beq.n	800389c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
 800385c:	e01e      	b.n	800389c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10f      	bne.n	800388c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0210 	bic.w	r2, r2, #16
 800387a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d032      	beq.n	800390a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d022      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2205      	movs	r2, #5
 80038b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3301      	adds	r3, #1
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d307      	bcc.n	80038e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f2      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x2cc>
 80038e2:	e000      	b.n	80038e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
 8003906:	e000      	b.n	800390a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003908:	bf00      	nop
    }
  }
}
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800392c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b40      	cmp	r3, #64	@ 0x40
 800393c:	d108      	bne.n	8003950 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800394e:	e007      	b.n	8003960 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	60da      	str	r2, [r3, #12]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	3b10      	subs	r3, #16
 800397c:	4a14      	ldr	r2, [pc, #80]	@ (80039d0 <DMA_CalcBaseAndBitshift+0x64>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003986:	4a13      	ldr	r2, [pc, #76]	@ (80039d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d909      	bls.n	80039ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	1d1a      	adds	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80039ac:	e007      	b.n	80039be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039b6:	f023 0303 	bic.w	r3, r3, #3
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	aaaaaaab 	.word	0xaaaaaaab
 80039d4:	0800abc4 	.word	0x0800abc4

080039d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d11f      	bne.n	8003a32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d856      	bhi.n	8003aa6 <DMA_CheckFifoParam+0xce>
 80039f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003a00 <DMA_CheckFifoParam+0x28>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a23 	.word	0x08003a23
 8003a08:	08003a11 	.word	0x08003a11
 8003a0c:	08003aa7 	.word	0x08003aa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d046      	beq.n	8003aaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a20:	e043      	b.n	8003aaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a2a:	d140      	bne.n	8003aae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a30:	e03d      	b.n	8003aae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a3a:	d121      	bne.n	8003a80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d837      	bhi.n	8003ab2 <DMA_CheckFifoParam+0xda>
 8003a42:	a201      	add	r2, pc, #4	@ (adr r2, 8003a48 <DMA_CheckFifoParam+0x70>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003a5f 	.word	0x08003a5f
 8003a50:	08003a59 	.word	0x08003a59
 8003a54:	08003a71 	.word	0x08003a71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5c:	e030      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d025      	beq.n	8003ab6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6e:	e022      	b.n	8003ab6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a78:	d11f      	bne.n	8003aba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a7e:	e01c      	b.n	8003aba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d903      	bls.n	8003a8e <DMA_CheckFifoParam+0xb6>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d003      	beq.n	8003a94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a8c:	e018      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
      break;
 8003a92:	e015      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00e      	beq.n	8003abe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa4:	e00b      	b.n	8003abe <DMA_CheckFifoParam+0xe6>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e00a      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e008      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e006      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab2:	bf00      	nop
 8003ab4:	e004      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e002      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8003abe:	bf00      	nop
    }
  } 
  
  return status; 
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop

08003ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	@ 0x24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e159      	b.n	8003da0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aec:	2201      	movs	r2, #1
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	f040 8148 	bne.w	8003d9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d005      	beq.n	8003b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d130      	bne.n	8003b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b58:	2201      	movs	r2, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 0201 	and.w	r2, r3, #1
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d017      	beq.n	8003bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d123      	bne.n	8003c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	08da      	lsrs	r2, r3, #3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3208      	adds	r2, #8
 8003bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	220f      	movs	r2, #15
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	08da      	lsrs	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3208      	adds	r2, #8
 8003c0e:	69b9      	ldr	r1, [r7, #24]
 8003c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	2203      	movs	r2, #3
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0203 	and.w	r2, r3, #3
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80a2 	beq.w	8003d9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	4b57      	ldr	r3, [pc, #348]	@ (8003db8 <HAL_GPIO_Init+0x2e8>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	4a56      	ldr	r2, [pc, #344]	@ (8003db8 <HAL_GPIO_Init+0x2e8>)
 8003c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c66:	4b54      	ldr	r3, [pc, #336]	@ (8003db8 <HAL_GPIO_Init+0x2e8>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c72:	4a52      	ldr	r2, [pc, #328]	@ (8003dbc <HAL_GPIO_Init+0x2ec>)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	3302      	adds	r3, #2
 8003c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	220f      	movs	r2, #15
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4013      	ands	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a49      	ldr	r2, [pc, #292]	@ (8003dc0 <HAL_GPIO_Init+0x2f0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d019      	beq.n	8003cd2 <HAL_GPIO_Init+0x202>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a48      	ldr	r2, [pc, #288]	@ (8003dc4 <HAL_GPIO_Init+0x2f4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d013      	beq.n	8003cce <HAL_GPIO_Init+0x1fe>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a47      	ldr	r2, [pc, #284]	@ (8003dc8 <HAL_GPIO_Init+0x2f8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00d      	beq.n	8003cca <HAL_GPIO_Init+0x1fa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a46      	ldr	r2, [pc, #280]	@ (8003dcc <HAL_GPIO_Init+0x2fc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <HAL_GPIO_Init+0x1f6>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a45      	ldr	r2, [pc, #276]	@ (8003dd0 <HAL_GPIO_Init+0x300>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d101      	bne.n	8003cc2 <HAL_GPIO_Init+0x1f2>
 8003cbe:	2304      	movs	r3, #4
 8003cc0:	e008      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cc2:	2307      	movs	r3, #7
 8003cc4:	e006      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e004      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e002      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_GPIO_Init+0x204>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	f002 0203 	and.w	r2, r2, #3
 8003cda:	0092      	lsls	r2, r2, #2
 8003cdc:	4093      	lsls	r3, r2
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ce4:	4935      	ldr	r1, [pc, #212]	@ (8003dbc <HAL_GPIO_Init+0x2ec>)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	3302      	adds	r3, #2
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cf2:	4b38      	ldr	r3, [pc, #224]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d16:	4a2f      	ldr	r2, [pc, #188]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d40:	4a24      	ldr	r2, [pc, #144]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d46:	4b23      	ldr	r3, [pc, #140]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d70:	4b18      	ldr	r3, [pc, #96]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d94:	4a0f      	ldr	r2, [pc, #60]	@ (8003dd4 <HAL_GPIO_Init+0x304>)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	f67f aea2 	bls.w	8003aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3724      	adds	r7, #36	@ 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	40020400 	.word	0x40020400
 8003dc8:	40020800 	.word	0x40020800
 8003dcc:	40020c00 	.word	0x40020c00
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40013c00 	.word	0x40013c00

08003dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]
 8003de4:	4613      	mov	r3, r2
 8003de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de8:	787b      	ldrb	r3, [r7, #1]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dee:	887a      	ldrh	r2, [r7, #2]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003df4:	e003      	b.n	8003dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	041a      	lsls	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	619a      	str	r2, [r3, #24]
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af02      	add	r7, sp, #8
 8003e10:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e101      	b.n	8004020 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f006 fb48 	bl	800a4cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2203      	movs	r2, #3
 8003e40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e4a:	d102      	bne.n	8003e52 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f002 ff29 	bl	8006cae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	7c1a      	ldrb	r2, [r3, #16]
 8003e64:	f88d 2000 	strb.w	r2, [sp]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e6c:	f002 fe08 	bl	8006a80 <USB_CoreInit>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0ce      	b.n	8004020 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f002 ff21 	bl	8006cd0 <USB_SetCurrentMode>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0bf      	b.n	8004020 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	e04a      	b.n	8003f3c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ea6:	7bfa      	ldrb	r2, [r7, #15]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3315      	adds	r3, #21
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3314      	adds	r3, #20
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	b298      	uxth	r0, r3
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	332e      	adds	r3, #46	@ 0x2e
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3318      	adds	r3, #24
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	331c      	adds	r3, #28
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f0e:	7bfa      	ldrb	r2, [r7, #15]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3320      	adds	r3, #32
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f22:	7bfa      	ldrb	r2, [r7, #15]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	3324      	adds	r3, #36	@ 0x24
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	791b      	ldrb	r3, [r3, #4]
 8003f40:	7bfa      	ldrb	r2, [r7, #15]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d3af      	bcc.n	8003ea6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
 8003f4a:	e044      	b.n	8003fd6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003f5e:	2200      	movs	r2, #0
 8003f60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f62:	7bfa      	ldrb	r2, [r7, #15]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f78:	7bfa      	ldrb	r2, [r7, #15]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fba:	7bfa      	ldrb	r2, [r7, #15]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	791b      	ldrb	r3, [r3, #4]
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d3b5      	bcc.n	8003f4c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7c1a      	ldrb	r2, [r3, #16]
 8003fe8:	f88d 2000 	strb.w	r2, [sp]
 8003fec:	3304      	adds	r3, #4
 8003fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ff0:	f002 feba 	bl	8006d68 <USB_DevInit>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e00c      	b.n	8004020 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f003 ff04 	bl	8007e26 <USB_DevDisconnect>

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_PCD_Start+0x1c>
 8004040:	2302      	movs	r3, #2
 8004042:	e022      	b.n	800408a <HAL_PCD_Start+0x62>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d009      	beq.n	800406c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800405c:	2b01      	cmp	r3, #1
 800405e:	d105      	bne.n	800406c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f002 fe0b 	bl	8006c8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f003 feb2 	bl	8007de4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004092:	b590      	push	{r4, r7, lr}
 8004094:	b08d      	sub	sp, #52	@ 0x34
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f003 ff70 	bl	8007f8e <USB_GetMode>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f040 848c 	bne.w	80049ce <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f003 fed4 	bl	8007e68 <USB_ReadInterrupts>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8482 	beq.w	80049cc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f003 fec1 	bl	8007e68 <USB_ReadInterrupts>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d107      	bne.n	8004100 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f002 0202 	and.w	r2, r2, #2
 80040fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f003 feaf 	bl	8007e68 <USB_ReadInterrupts>
 800410a:	4603      	mov	r3, r0
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b10      	cmp	r3, #16
 8004112:	d161      	bne.n	80041d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0210 	bic.w	r2, r2, #16
 8004122:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	3304      	adds	r3, #4
 8004142:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	0c5b      	lsrs	r3, r3, #17
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	2b02      	cmp	r3, #2
 800414e:	d124      	bne.n	800419a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d035      	beq.n	80041c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800416a:	b29b      	uxth	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	6a38      	ldr	r0, [r7, #32]
 8004170:	f003 fce6 	bl	8007b40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004180:	441a      	add	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004192:	441a      	add	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	615a      	str	r2, [r3, #20]
 8004198:	e016      	b.n	80041c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	0c5b      	lsrs	r3, r3, #17
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	2b06      	cmp	r3, #6
 80041a4:	d110      	bne.n	80041c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041ac:	2208      	movs	r2, #8
 80041ae:	4619      	mov	r1, r3
 80041b0:	6a38      	ldr	r0, [r7, #32]
 80041b2:	f003 fcc5 	bl	8007b40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041c2:	441a      	add	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0210 	orr.w	r2, r2, #16
 80041d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f003 fe43 	bl	8007e68 <USB_ReadInterrupts>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041ec:	f040 80a7 	bne.w	800433e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f003 fe48 	bl	8007e8e <USB_ReadDevAllOutEpInterrupt>
 80041fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004200:	e099      	b.n	8004336 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 808e 	beq.w	800432a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f003 fe6c 	bl	8007ef6 <USB_ReadDevOutEPInterrupt>
 800421e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004236:	461a      	mov	r2, r3
 8004238:	2301      	movs	r3, #1
 800423a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800423c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fea4 	bl	8004f8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00c      	beq.n	8004268 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800425a:	461a      	mov	r2, r3
 800425c:	2308      	movs	r3, #8
 800425e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004260:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 ff7a 	bl	800515c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b00      	cmp	r3, #0
 8004270:	d008      	beq.n	8004284 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800427e:	461a      	mov	r2, r3
 8004280:	2310      	movs	r3, #16
 8004282:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d030      	beq.n	80042f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004296:	2b80      	cmp	r3, #128	@ 0x80
 8004298:	d109      	bne.n	80042ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80042ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4413      	add	r3, r2
 80042c0:	3304      	adds	r3, #4
 80042c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	78db      	ldrb	r3, [r3, #3]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d108      	bne.n	80042de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2200      	movs	r2, #0
 80042d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	4619      	mov	r1, r3
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f006 f9f3 	bl	800a6c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ea:	461a      	mov	r2, r3
 80042ec:	2302      	movs	r3, #2
 80042ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004306:	461a      	mov	r2, r3
 8004308:	2320      	movs	r3, #32
 800430a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004322:	461a      	mov	r2, r3
 8004324:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004328:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	3301      	adds	r3, #1
 800432e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004332:	085b      	lsrs	r3, r3, #1
 8004334:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	f47f af62 	bne.w	8004202 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f003 fd90 	bl	8007e68 <USB_ReadInterrupts>
 8004348:	4603      	mov	r3, r0
 800434a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800434e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004352:	f040 80db 	bne.w	800450c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f003 fdb1 	bl	8007ec2 <USB_ReadDevAllInEpInterrupt>
 8004360:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004366:	e0cd      	b.n	8004504 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80c2 	beq.w	80044f8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f003 fdd7 	bl	8007f32 <USB_ReadDevInEPInterrupt>
 8004384:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d057      	beq.n	8004440 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	2201      	movs	r2, #1
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69f9      	ldr	r1, [r7, #28]
 80043ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043b0:	4013      	ands	r3, r2
 80043b2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c0:	461a      	mov	r2, r3
 80043c2:	2301      	movs	r3, #1
 80043c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	799b      	ldrb	r3, [r3, #6]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d132      	bne.n	8004434 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d2:	4613      	mov	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	3320      	adds	r3, #32
 80043de:	6819      	ldr	r1, [r3, #0]
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4403      	add	r3, r0
 80043ee:	331c      	adds	r3, #28
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4419      	add	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4403      	add	r3, r0
 8004402:	3320      	adds	r3, #32
 8004404:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	d113      	bne.n	8004434 <HAL_PCD_IRQHandler+0x3a2>
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004410:	4613      	mov	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	3324      	adds	r3, #36	@ 0x24
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d108      	bne.n	8004434 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800442c:	461a      	mov	r2, r3
 800442e:	2101      	movs	r1, #1
 8004430:	f003 fdde 	bl	8007ff0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	b2db      	uxtb	r3, r3
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f006 f8c7 	bl	800a5ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004456:	461a      	mov	r2, r3
 8004458:	2308      	movs	r3, #8
 800445a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d008      	beq.n	8004478 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004472:	461a      	mov	r2, r3
 8004474:	2310      	movs	r3, #16
 8004476:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800448e:	461a      	mov	r2, r3
 8004490:	2340      	movs	r3, #64	@ 0x40
 8004492:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d023      	beq.n	80044e6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800449e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044a0:	6a38      	ldr	r0, [r7, #32]
 80044a2:	f002 fdc5 	bl	8007030 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80044a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	3310      	adds	r3, #16
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	3304      	adds	r3, #4
 80044b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	78db      	ldrb	r3, [r3, #3]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d108      	bne.n	80044d4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2200      	movs	r2, #0
 80044c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80044c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	4619      	mov	r1, r3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f006 f90a 	bl	800a6e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e0:	461a      	mov	r2, r3
 80044e2:	2302      	movs	r3, #2
 80044e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80044f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fcbd 	bl	8004e72 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	3301      	adds	r3, #1
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80044fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004500:	085b      	lsrs	r3, r3, #1
 8004502:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	f47f af2e 	bne.w	8004368 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f003 fca9 	bl	8007e68 <USB_ReadInterrupts>
 8004516:	4603      	mov	r3, r0
 8004518:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800451c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004520:	d122      	bne.n	8004568 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800453c:	2b01      	cmp	r3, #1
 800453e:	d108      	bne.n	8004552 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004548:	2100      	movs	r1, #0
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fea4 	bl	8005298 <HAL_PCDEx_LPM_Callback>
 8004550:	e002      	b.n	8004558 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f006 f8a8 	bl	800a6a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f003 fc7b 	bl	8007e68 <USB_ReadInterrupts>
 8004572:	4603      	mov	r3, r0
 8004574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800457c:	d112      	bne.n	80045a4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b01      	cmp	r3, #1
 800458c:	d102      	bne.n	8004594 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f006 f864 	bl	800a65c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80045a2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f003 fc5d 	bl	8007e68 <USB_ReadInterrupts>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b8:	f040 80b7 	bne.w	800472a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2110      	movs	r1, #16
 80045d6:	4618      	mov	r0, r3
 80045d8:	f002 fd2a 	bl	8007030 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045dc:	2300      	movs	r3, #0
 80045de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045e0:	e046      	b.n	8004670 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80045e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ee:	461a      	mov	r2, r3
 80045f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004610:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004614:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004622:	461a      	mov	r2, r3
 8004624:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004628:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800462a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800463a:	0151      	lsls	r1, r2, #5
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	440a      	add	r2, r1
 8004640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004644:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004648:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800464a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	440a      	add	r2, r1
 8004660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004664:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004668:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800466a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466c:	3301      	adds	r3, #1
 800466e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	791b      	ldrb	r3, [r3, #4]
 8004674:	461a      	mov	r2, r3
 8004676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004678:	4293      	cmp	r3, r2
 800467a:	d3b2      	bcc.n	80045e2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800468a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800468e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	7bdb      	ldrb	r3, [r3, #15]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d016      	beq.n	80046c6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800469e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046a8:	f043 030b 	orr.w	r3, r3, #11
 80046ac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046be:	f043 030b 	orr.w	r3, r3, #11
 80046c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80046c4:	e015      	b.n	80046f2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046d8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80046dc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046ec:	f043 030b 	orr.w	r3, r3, #11
 80046f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004700:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004704:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004714:	461a      	mov	r2, r3
 8004716:	f003 fc6b 	bl	8007ff0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f003 fb9a 	bl	8007e68 <USB_ReadInterrupts>
 8004734:	4603      	mov	r3, r0
 8004736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800473e:	d123      	bne.n	8004788 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f003 fc30 	bl	8007faa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f002 fce7 	bl	8007122 <USB_GetDevSpeed>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681c      	ldr	r4, [r3, #0]
 8004760:	f001 f9ca 	bl	8005af8 <HAL_RCC_GetHCLKFreq>
 8004764:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800476a:	461a      	mov	r2, r3
 800476c:	4620      	mov	r0, r4
 800476e:	f002 f9eb 	bl	8006b48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f005 ff53 	bl	800a61e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004786:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f003 fb6b 	bl	8007e68 <USB_ReadInterrupts>
 8004792:	4603      	mov	r3, r0
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b08      	cmp	r3, #8
 800479a:	d10a      	bne.n	80047b2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f005 ff30 	bl	800a602 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695a      	ldr	r2, [r3, #20]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f002 0208 	and.w	r2, r2, #8
 80047b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f003 fb56 	bl	8007e68 <USB_ReadInterrupts>
 80047bc:	4603      	mov	r3, r0
 80047be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c2:	2b80      	cmp	r3, #128	@ 0x80
 80047c4:	d123      	bne.n	800480e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047d2:	2301      	movs	r3, #1
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047d6:	e014      	b.n	8004802 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d105      	bne.n	80047fc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fb0a 	bl	8004e10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	3301      	adds	r3, #1
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	791b      	ldrb	r3, [r3, #4]
 8004806:	461a      	mov	r2, r3
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	4293      	cmp	r3, r2
 800480c:	d3e4      	bcc.n	80047d8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f003 fb28 	bl	8007e68 <USB_ReadInterrupts>
 8004818:	4603      	mov	r3, r0
 800481a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800481e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004822:	d13c      	bne.n	800489e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004824:	2301      	movs	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	@ 0x24
 8004828:	e02b      	b.n	8004882 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	3318      	adds	r3, #24
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d115      	bne.n	800487c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004850:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004852:	2b00      	cmp	r3, #0
 8004854:	da12      	bge.n	800487c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485a:	4613      	mov	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	3317      	adds	r3, #23
 8004866:	2201      	movs	r2, #1
 8004868:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004872:	b2db      	uxtb	r3, r3
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 faca 	bl	8004e10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	3301      	adds	r3, #1
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	791b      	ldrb	r3, [r3, #4]
 8004886:	461a      	mov	r2, r3
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	4293      	cmp	r3, r2
 800488c:	d3cd      	bcc.n	800482a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800489c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f003 fae0 	bl	8007e68 <USB_ReadInterrupts>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048b2:	d156      	bne.n	8004962 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048b4:	2301      	movs	r3, #1
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b8:	e045      	b.n	8004946 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d12e      	bne.n	8004940 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	da2b      	bge.n	8004940 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80048f4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d121      	bne.n	8004940 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004900:	4613      	mov	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004938:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800493c:	6053      	str	r3, [r2, #4]
            break;
 800493e:	e008      	b.n	8004952 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	3301      	adds	r3, #1
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	791b      	ldrb	r3, [r3, #4]
 800494a:	461a      	mov	r2, r3
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	4293      	cmp	r3, r2
 8004950:	d3b3      	bcc.n	80048ba <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f003 fa7e 	bl	8007e68 <USB_ReadInterrupts>
 800496c:	4603      	mov	r3, r0
 800496e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004976:	d10a      	bne.n	800498e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f005 fec7 	bl	800a70c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800498c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f003 fa68 	bl	8007e68 <USB_ReadInterrupts>
 8004998:	4603      	mov	r3, r0
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d115      	bne.n	80049ce <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f005 feb7 	bl	800a728 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6859      	ldr	r1, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	e000      	b.n	80049ce <HAL_PCD_IRQHandler+0x93c>
      return;
 80049cc:	bf00      	nop
    }
  }
}
 80049ce:	3734      	adds	r7, #52	@ 0x34
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd90      	pop	{r4, r7, pc}

080049d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_PCD_SetAddress+0x1a>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e012      	b.n	8004a14 <HAL_PCD_SetAddress+0x40>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	78fa      	ldrb	r2, [r7, #3]
 80049fa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	4611      	mov	r1, r2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f003 f9c7 	bl	8007d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	4608      	mov	r0, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	70fb      	strb	r3, [r7, #3]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	803b      	strh	r3, [r7, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	da0f      	bge.n	8004a62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	f003 020f 	and.w	r2, r3, #15
 8004a48:	4613      	mov	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	3310      	adds	r3, #16
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4413      	add	r3, r2
 8004a56:	3304      	adds	r3, #4
 8004a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	705a      	strb	r2, [r3, #1]
 8004a60:	e00f      	b.n	8004a82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	f003 020f 	and.w	r2, r3, #15
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	4413      	add	r3, r2
 8004a78:	3304      	adds	r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004a8e:	883b      	ldrh	r3, [r7, #0]
 8004a90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	78ba      	ldrb	r2, [r7, #2]
 8004a9c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	785b      	ldrb	r3, [r3, #1]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ab0:	78bb      	ldrb	r3, [r7, #2]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d102      	bne.n	8004abc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_PCD_EP_Open+0xae>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e00e      	b.n	8004ae8 <HAL_PCD_EP_Open+0xcc>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68f9      	ldr	r1, [r7, #12]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f002 fb47 	bl	800716c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004ae6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	da0f      	bge.n	8004b24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	f003 020f 	and.w	r2, r3, #15
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	3310      	adds	r3, #16
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	4413      	add	r3, r2
 8004b18:	3304      	adds	r3, #4
 8004b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	705a      	strb	r2, [r3, #1]
 8004b22:	e00f      	b.n	8004b44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	f003 020f 	and.w	r2, r3, #15
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4413      	add	r3, r2
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_PCD_EP_Close+0x6e>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e00e      	b.n	8004b7c <HAL_PCD_EP_Close+0x8c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f002 fb85 	bl	800727c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	607a      	str	r2, [r7, #4]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	460b      	mov	r3, r1
 8004b92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b94:	7afb      	ldrb	r3, [r7, #11]
 8004b96:	f003 020f 	and.w	r2, r3, #15
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	3304      	adds	r3, #4
 8004bac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bc6:	7afb      	ldrb	r3, [r7, #11]
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	799b      	ldrb	r3, [r3, #6]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d102      	bne.n	8004be0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	799b      	ldrb	r3, [r3, #6]
 8004be8:	461a      	mov	r2, r3
 8004bea:	6979      	ldr	r1, [r7, #20]
 8004bec:	f002 fc22 	bl	8007434 <USB_EPStartXfer>

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	f003 020f 	and.w	r2, r3, #15
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004c1c:	681b      	ldr	r3, [r3, #0]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
 8004c36:	460b      	mov	r3, r1
 8004c38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c3a:	7afb      	ldrb	r3, [r7, #11]
 8004c3c:	f003 020f 	and.w	r2, r3, #15
 8004c40:	4613      	mov	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	3310      	adds	r3, #16
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3304      	adds	r3, #4
 8004c50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2200      	movs	r2, #0
 8004c62:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2201      	movs	r2, #1
 8004c68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c6a:	7afb      	ldrb	r3, [r7, #11]
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	799b      	ldrb	r3, [r3, #6]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d102      	bne.n	8004c84 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	799b      	ldrb	r3, [r3, #6]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6979      	ldr	r1, [r7, #20]
 8004c90:	f002 fbd0 	bl	8007434 <USB_EPStartXfer>

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	7912      	ldrb	r2, [r2, #4]
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e04f      	b.n	8004d5c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	da0f      	bge.n	8004ce4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	f003 020f 	and.w	r2, r3, #15
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	3310      	adds	r3, #16
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	3304      	adds	r3, #4
 8004cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	705a      	strb	r2, [r3, #1]
 8004ce2:	e00d      	b.n	8004d00 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_PCD_EP_SetStall+0x82>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e01d      	b.n	8004d5c <HAL_PCD_EP_SetStall+0xbe>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68f9      	ldr	r1, [r7, #12]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f002 ff5e 	bl	8007bf0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	7999      	ldrb	r1, [r3, #6]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	f003 f94f 	bl	8007ff0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	7912      	ldrb	r2, [r2, #4]
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e042      	b.n	8004e08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	da0f      	bge.n	8004daa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	f003 020f 	and.w	r2, r3, #15
 8004d90:	4613      	mov	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	3310      	adds	r3, #16
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3304      	adds	r3, #4
 8004da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	705a      	strb	r2, [r3, #1]
 8004da8:	e00f      	b.n	8004dca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	f003 020f 	and.w	r2, r3, #15
 8004db0:	4613      	mov	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_PCD_EP_ClrStall+0x86>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e00e      	b.n	8004e08 <HAL_PCD_EP_ClrStall+0xa4>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68f9      	ldr	r1, [r7, #12]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f002 ff67 	bl	8007ccc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	da0c      	bge.n	8004e3e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	f003 020f 	and.w	r2, r3, #15
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	3310      	adds	r3, #16
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	4413      	add	r3, r2
 8004e38:	3304      	adds	r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e00c      	b.n	8004e58 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	f003 020f 	and.w	r2, r3, #15
 8004e44:	4613      	mov	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	4413      	add	r3, r2
 8004e54:	3304      	adds	r3, #4
 8004e56:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f002 fd86 	bl	8007970 <USB_EPStopXfer>
 8004e64:	4603      	mov	r3, r0
 8004e66:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e68:	7afb      	ldrb	r3, [r7, #11]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b08a      	sub	sp, #40	@ 0x28
 8004e76:	af02      	add	r7, sp, #8
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	3310      	adds	r3, #16
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	3304      	adds	r3, #4
 8004e98:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d901      	bls.n	8004eaa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e06b      	b.n	8004f82 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d902      	bls.n	8004ec6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	3303      	adds	r3, #3
 8004eca:	089b      	lsrs	r3, r3, #2
 8004ecc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ece:	e02a      	b.n	8004f26 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d902      	bls.n	8004eec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	3303      	adds	r3, #3
 8004ef0:	089b      	lsrs	r3, r3, #2
 8004ef2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	68d9      	ldr	r1, [r3, #12]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	4603      	mov	r3, r0
 8004f08:	6978      	ldr	r0, [r7, #20]
 8004f0a:	f002 fddb 	bl	8007ac4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	441a      	add	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	695a      	ldr	r2, [r3, #20]
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	441a      	add	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d809      	bhi.n	8004f50 <PCD_WriteEmptyTxFifo+0xde>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d203      	bcs.n	8004f50 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1bf      	bne.n	8004ed0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d811      	bhi.n	8004f80 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	2201      	movs	r2, #1
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	6939      	ldr	r1, [r7, #16]
 8004f78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	333c      	adds	r3, #60	@ 0x3c
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	799b      	ldrb	r3, [r3, #6]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d17b      	bne.n	80050ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d015      	beq.n	8004ff8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	4a61      	ldr	r2, [pc, #388]	@ (8005154 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	f240 80b9 	bls.w	8005148 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80b3 	beq.w	8005148 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ff4:	6093      	str	r3, [r2, #8]
 8004ff6:	e0a7      	b.n	8005148 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800500e:	461a      	mov	r2, r3
 8005010:	2320      	movs	r3, #32
 8005012:	6093      	str	r3, [r2, #8]
 8005014:	e098      	b.n	8005148 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	f040 8093 	bne.w	8005148 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	4a4b      	ldr	r2, [pc, #300]	@ (8005154 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d90f      	bls.n	800504a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005040:	461a      	mov	r2, r3
 8005042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005046:	6093      	str	r3, [r2, #8]
 8005048:	e07e      	b.n	8005148 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	4413      	add	r3, r2
 800505c:	3304      	adds	r3, #4
 800505e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a1a      	ldr	r2, [r3, #32]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	0159      	lsls	r1, r3, #5
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	440b      	add	r3, r1
 800506c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005076:	1ad2      	subs	r2, r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d114      	bne.n	80050ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005094:	461a      	mov	r2, r3
 8005096:	2101      	movs	r1, #1
 8005098:	f002 ffaa 	bl	8007ff0 <USB_EP0_OutStart>
 800509c:	e006      	b.n	80050ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	441a      	add	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f005 fa70 	bl	800a598 <HAL_PCD_DataOutStageCallback>
 80050b8:	e046      	b.n	8005148 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	4a26      	ldr	r2, [pc, #152]	@ (8005158 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d124      	bne.n	800510c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d8:	461a      	mov	r2, r3
 80050da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050de:	6093      	str	r3, [r2, #8]
 80050e0:	e032      	b.n	8005148 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f8:	461a      	mov	r2, r3
 80050fa:	2320      	movs	r3, #32
 80050fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f005 fa47 	bl	800a598 <HAL_PCD_DataOutStageCallback>
 800510a:	e01d      	b.n	8005148 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d114      	bne.n	800513c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	4613      	mov	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d108      	bne.n	800513c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005134:	461a      	mov	r2, r3
 8005136:	2100      	movs	r1, #0
 8005138:	f002 ff5a 	bl	8007ff0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f005 fa28 	bl	800a598 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	4f54300a 	.word	0x4f54300a
 8005158:	4f54310a 	.word	0x4f54310a

0800515c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	333c      	adds	r3, #60	@ 0x3c
 8005174:	3304      	adds	r3, #4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a15      	ldr	r2, [pc, #84]	@ (80051e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d90e      	bls.n	80051b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005198:	2b00      	cmp	r3, #0
 800519a:	d009      	beq.n	80051b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a8:	461a      	mov	r2, r3
 80051aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f005 f9df 	bl	800a574 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4a0a      	ldr	r2, [pc, #40]	@ (80051e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d90c      	bls.n	80051d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	799b      	ldrb	r3, [r3, #6]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d108      	bne.n	80051d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051d0:	461a      	mov	r2, r3
 80051d2:	2101      	movs	r1, #1
 80051d4:	f002 ff0c 	bl	8007ff0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	4f54300a 	.word	0x4f54300a

080051e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	70fb      	strb	r3, [r7, #3]
 80051f4:	4613      	mov	r3, r2
 80051f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d107      	bne.n	8005216 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005206:	883b      	ldrh	r3, [r7, #0]
 8005208:	0419      	lsls	r1, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	430a      	orrs	r2, r1
 8005212:	629a      	str	r2, [r3, #40]	@ 0x28
 8005214:	e028      	b.n	8005268 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521c:	0c1b      	lsrs	r3, r3, #16
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	4413      	add	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005224:	2300      	movs	r3, #0
 8005226:	73fb      	strb	r3, [r7, #15]
 8005228:	e00d      	b.n	8005246 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	3340      	adds	r3, #64	@ 0x40
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	0c1b      	lsrs	r3, r3, #16
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4413      	add	r3, r2
 800523e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	3301      	adds	r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]
 8005246:	7bfa      	ldrb	r2, [r7, #15]
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	3b01      	subs	r3, #1
 800524c:	429a      	cmp	r2, r3
 800524e:	d3ec      	bcc.n	800522a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005250:	883b      	ldrh	r3, [r7, #0]
 8005252:	0418      	lsls	r0, r3, #16
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6819      	ldr	r1, [r3, #0]
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	3b01      	subs	r3, #1
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	4302      	orrs	r2, r0
 8005260:	3340      	adds	r3, #64	@ 0x40
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	460b      	mov	r3, r1
 8005280:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	887a      	ldrh	r2, [r7, #2]
 8005288:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e267      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d075      	beq.n	80053ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052ce:	4b88      	ldr	r3, [pc, #544]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 030c 	and.w	r3, r3, #12
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d00c      	beq.n	80052f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052da:	4b85      	ldr	r3, [pc, #532]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d112      	bne.n	800530c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052e6:	4b82      	ldr	r3, [pc, #520]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052f2:	d10b      	bne.n	800530c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f4:	4b7e      	ldr	r3, [pc, #504]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d05b      	beq.n	80053b8 <HAL_RCC_OscConfig+0x108>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d157      	bne.n	80053b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e242      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005314:	d106      	bne.n	8005324 <HAL_RCC_OscConfig+0x74>
 8005316:	4b76      	ldr	r3, [pc, #472]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a75      	ldr	r2, [pc, #468]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e01d      	b.n	8005360 <HAL_RCC_OscConfig+0xb0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x98>
 800532e:	4b70      	ldr	r3, [pc, #448]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a6f      	ldr	r2, [pc, #444]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 8005334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4b6d      	ldr	r3, [pc, #436]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a6c      	ldr	r2, [pc, #432]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 8005340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	e00b      	b.n	8005360 <HAL_RCC_OscConfig+0xb0>
 8005348:	4b69      	ldr	r3, [pc, #420]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a68      	ldr	r2, [pc, #416]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 800534e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	4b66      	ldr	r3, [pc, #408]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a65      	ldr	r2, [pc, #404]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 800535a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800535e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d013      	beq.n	8005390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005368:	f7fd fb08 	bl	800297c <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005370:	f7fd fb04 	bl	800297c <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b64      	cmp	r3, #100	@ 0x64
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e207      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005382:	4b5b      	ldr	r3, [pc, #364]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0xc0>
 800538e:	e014      	b.n	80053ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005390:	f7fd faf4 	bl	800297c <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005398:	f7fd faf0 	bl	800297c <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b64      	cmp	r3, #100	@ 0x64
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e1f3      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053aa:	4b51      	ldr	r3, [pc, #324]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0xe8>
 80053b6:	e000      	b.n	80053ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d063      	beq.n	800548e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80053c6:	4b4a      	ldr	r3, [pc, #296]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053d2:	4b47      	ldr	r3, [pc, #284]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d11c      	bne.n	8005418 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053de:	4b44      	ldr	r3, [pc, #272]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d116      	bne.n	8005418 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ea:	4b41      	ldr	r3, [pc, #260]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <HAL_RCC_OscConfig+0x152>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d001      	beq.n	8005402 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e1c7      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005402:	4b3b      	ldr	r3, [pc, #236]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4937      	ldr	r1, [pc, #220]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 8005412:	4313      	orrs	r3, r2
 8005414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005416:	e03a      	b.n	800548e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d020      	beq.n	8005462 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005420:	4b34      	ldr	r3, [pc, #208]	@ (80054f4 <HAL_RCC_OscConfig+0x244>)
 8005422:	2201      	movs	r2, #1
 8005424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005426:	f7fd faa9 	bl	800297c <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800542e:	f7fd faa5 	bl	800297c <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e1a8      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005440:	4b2b      	ldr	r3, [pc, #172]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544c:	4b28      	ldr	r3, [pc, #160]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	4925      	ldr	r1, [pc, #148]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]
 8005460:	e015      	b.n	800548e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005462:	4b24      	ldr	r3, [pc, #144]	@ (80054f4 <HAL_RCC_OscConfig+0x244>)
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005468:	f7fd fa88 	bl	800297c <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005470:	f7fd fa84 	bl	800297c <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e187      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005482:	4b1b      	ldr	r3, [pc, #108]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d036      	beq.n	8005508 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d016      	beq.n	80054d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a2:	4b15      	ldr	r3, [pc, #84]	@ (80054f8 <HAL_RCC_OscConfig+0x248>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a8:	f7fd fa68 	bl	800297c <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b0:	f7fd fa64 	bl	800297c <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e167      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c2:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <HAL_RCC_OscConfig+0x240>)
 80054c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0x200>
 80054ce:	e01b      	b.n	8005508 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054d0:	4b09      	ldr	r3, [pc, #36]	@ (80054f8 <HAL_RCC_OscConfig+0x248>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d6:	f7fd fa51 	bl	800297c <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054dc:	e00e      	b.n	80054fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054de:	f7fd fa4d 	bl	800297c <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d907      	bls.n	80054fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e150      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
 80054f0:	40023800 	.word	0x40023800
 80054f4:	42470000 	.word	0x42470000
 80054f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054fc:	4b88      	ldr	r3, [pc, #544]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 80054fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1ea      	bne.n	80054de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8097 	beq.w	8005644 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005516:	2300      	movs	r3, #0
 8005518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800551a:	4b81      	ldr	r3, [pc, #516]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 800551c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10f      	bne.n	8005546 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	4b7d      	ldr	r3, [pc, #500]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	4a7c      	ldr	r2, [pc, #496]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 8005530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005534:	6413      	str	r3, [r2, #64]	@ 0x40
 8005536:	4b7a      	ldr	r3, [pc, #488]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553e:	60bb      	str	r3, [r7, #8]
 8005540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005542:	2301      	movs	r3, #1
 8005544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005546:	4b77      	ldr	r3, [pc, #476]	@ (8005724 <HAL_RCC_OscConfig+0x474>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d118      	bne.n	8005584 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005552:	4b74      	ldr	r3, [pc, #464]	@ (8005724 <HAL_RCC_OscConfig+0x474>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a73      	ldr	r2, [pc, #460]	@ (8005724 <HAL_RCC_OscConfig+0x474>)
 8005558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800555c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800555e:	f7fd fa0d 	bl	800297c <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005566:	f7fd fa09 	bl	800297c <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e10c      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005578:	4b6a      	ldr	r3, [pc, #424]	@ (8005724 <HAL_RCC_OscConfig+0x474>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d106      	bne.n	800559a <HAL_RCC_OscConfig+0x2ea>
 800558c:	4b64      	ldr	r3, [pc, #400]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005590:	4a63      	ldr	r2, [pc, #396]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	6713      	str	r3, [r2, #112]	@ 0x70
 8005598:	e01c      	b.n	80055d4 <HAL_RCC_OscConfig+0x324>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b05      	cmp	r3, #5
 80055a0:	d10c      	bne.n	80055bc <HAL_RCC_OscConfig+0x30c>
 80055a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a6:	4a5e      	ldr	r2, [pc, #376]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 80055a8:	f043 0304 	orr.w	r3, r3, #4
 80055ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b2:	4a5b      	ldr	r2, [pc, #364]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ba:	e00b      	b.n	80055d4 <HAL_RCC_OscConfig+0x324>
 80055bc:	4b58      	ldr	r3, [pc, #352]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 80055be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c0:	4a57      	ldr	r2, [pc, #348]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 80055c2:	f023 0301 	bic.w	r3, r3, #1
 80055c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c8:	4b55      	ldr	r3, [pc, #340]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055cc:	4a54      	ldr	r2, [pc, #336]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 80055ce:	f023 0304 	bic.w	r3, r3, #4
 80055d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d015      	beq.n	8005608 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055dc:	f7fd f9ce 	bl	800297c <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e4:	f7fd f9ca 	bl	800297c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e0cb      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fa:	4b49      	ldr	r3, [pc, #292]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 80055fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0ee      	beq.n	80055e4 <HAL_RCC_OscConfig+0x334>
 8005606:	e014      	b.n	8005632 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005608:	f7fd f9b8 	bl	800297c <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800560e:	e00a      	b.n	8005626 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005610:	f7fd f9b4 	bl	800297c <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800561e:	4293      	cmp	r3, r2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e0b5      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005626:	4b3e      	ldr	r3, [pc, #248]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1ee      	bne.n	8005610 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005632:	7dfb      	ldrb	r3, [r7, #23]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005638:	4b39      	ldr	r3, [pc, #228]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	4a38      	ldr	r2, [pc, #224]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 800563e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005642:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80a1 	beq.w	8005790 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800564e:	4b34      	ldr	r3, [pc, #208]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	2b08      	cmp	r3, #8
 8005658:	d05c      	beq.n	8005714 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d141      	bne.n	80056e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005662:	4b31      	ldr	r3, [pc, #196]	@ (8005728 <HAL_RCC_OscConfig+0x478>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005668:	f7fd f988 	bl	800297c <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005670:	f7fd f984 	bl	800297c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e087      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005682:	4b27      	ldr	r3, [pc, #156]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69da      	ldr	r2, [r3, #28]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569c:	019b      	lsls	r3, r3, #6
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a4:	085b      	lsrs	r3, r3, #1
 80056a6:	3b01      	subs	r3, #1
 80056a8:	041b      	lsls	r3, r3, #16
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b0:	061b      	lsls	r3, r3, #24
 80056b2:	491b      	ldr	r1, [pc, #108]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005728 <HAL_RCC_OscConfig+0x478>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056be:	f7fd f95d 	bl	800297c <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c6:	f7fd f959 	bl	800297c <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e05c      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d8:	4b11      	ldr	r3, [pc, #68]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0x416>
 80056e4:	e054      	b.n	8005790 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e6:	4b10      	ldr	r3, [pc, #64]	@ (8005728 <HAL_RCC_OscConfig+0x478>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ec:	f7fd f946 	bl	800297c <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f4:	f7fd f942 	bl	800297c <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e045      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005706:	4b06      	ldr	r3, [pc, #24]	@ (8005720 <HAL_RCC_OscConfig+0x470>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f0      	bne.n	80056f4 <HAL_RCC_OscConfig+0x444>
 8005712:	e03d      	b.n	8005790 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d107      	bne.n	800572c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e038      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
 8005720:	40023800 	.word	0x40023800
 8005724:	40007000 	.word	0x40007000
 8005728:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800572c:	4b1b      	ldr	r3, [pc, #108]	@ (800579c <HAL_RCC_OscConfig+0x4ec>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d028      	beq.n	800578c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005744:	429a      	cmp	r2, r3
 8005746:	d121      	bne.n	800578c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005752:	429a      	cmp	r2, r3
 8005754:	d11a      	bne.n	800578c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800575c:	4013      	ands	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005762:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005764:	4293      	cmp	r3, r2
 8005766:	d111      	bne.n	800578c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	3b01      	subs	r3, #1
 8005776:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005778:	429a      	cmp	r2, r3
 800577a:	d107      	bne.n	800578c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005786:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40023800 	.word	0x40023800

080057a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e0cc      	b.n	800594e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057b4:	4b68      	ldr	r3, [pc, #416]	@ (8005958 <HAL_RCC_ClockConfig+0x1b8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d90c      	bls.n	80057dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c2:	4b65      	ldr	r3, [pc, #404]	@ (8005958 <HAL_RCC_ClockConfig+0x1b8>)
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ca:	4b63      	ldr	r3, [pc, #396]	@ (8005958 <HAL_RCC_ClockConfig+0x1b8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0b8      	b.n	800594e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d020      	beq.n	800582a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057f4:	4b59      	ldr	r3, [pc, #356]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	4a58      	ldr	r2, [pc, #352]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800580c:	4b53      	ldr	r3, [pc, #332]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	4a52      	ldr	r2, [pc, #328]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005818:	4b50      	ldr	r3, [pc, #320]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	494d      	ldr	r1, [pc, #308]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	4313      	orrs	r3, r2
 8005828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d044      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d107      	bne.n	800584e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583e:	4b47      	ldr	r3, [pc, #284]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d119      	bne.n	800587e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e07f      	b.n	800594e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d003      	beq.n	800585e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800585a:	2b03      	cmp	r3, #3
 800585c:	d107      	bne.n	800586e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800585e:	4b3f      	ldr	r3, [pc, #252]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e06f      	b.n	800594e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800586e:	4b3b      	ldr	r3, [pc, #236]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e067      	b.n	800594e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800587e:	4b37      	ldr	r3, [pc, #220]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f023 0203 	bic.w	r2, r3, #3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4934      	ldr	r1, [pc, #208]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	4313      	orrs	r3, r2
 800588e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005890:	f7fd f874 	bl	800297c <HAL_GetTick>
 8005894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005896:	e00a      	b.n	80058ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005898:	f7fd f870 	bl	800297c <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e04f      	b.n	800594e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ae:	4b2b      	ldr	r3, [pc, #172]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 020c 	and.w	r2, r3, #12
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	429a      	cmp	r2, r3
 80058be:	d1eb      	bne.n	8005898 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058c0:	4b25      	ldr	r3, [pc, #148]	@ (8005958 <HAL_RCC_ClockConfig+0x1b8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d20c      	bcs.n	80058e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ce:	4b22      	ldr	r3, [pc, #136]	@ (8005958 <HAL_RCC_ClockConfig+0x1b8>)
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d6:	4b20      	ldr	r3, [pc, #128]	@ (8005958 <HAL_RCC_ClockConfig+0x1b8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d001      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e032      	b.n	800594e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d008      	beq.n	8005906 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058f4:	4b19      	ldr	r3, [pc, #100]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	4916      	ldr	r1, [pc, #88]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	4313      	orrs	r3, r2
 8005904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005912:	4b12      	ldr	r3, [pc, #72]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	490e      	ldr	r1, [pc, #56]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 8005922:	4313      	orrs	r3, r2
 8005924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005926:	f000 f821 	bl	800596c <HAL_RCC_GetSysClockFreq>
 800592a:	4602      	mov	r2, r0
 800592c:	4b0b      	ldr	r3, [pc, #44]	@ (800595c <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	490a      	ldr	r1, [pc, #40]	@ (8005960 <HAL_RCC_ClockConfig+0x1c0>)
 8005938:	5ccb      	ldrb	r3, [r1, r3]
 800593a:	fa22 f303 	lsr.w	r3, r2, r3
 800593e:	4a09      	ldr	r2, [pc, #36]	@ (8005964 <HAL_RCC_ClockConfig+0x1c4>)
 8005940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005942:	4b09      	ldr	r3, [pc, #36]	@ (8005968 <HAL_RCC_ClockConfig+0x1c8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f7fc ffd4 	bl	80028f4 <HAL_InitTick>

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40023c00 	.word	0x40023c00
 800595c:	40023800 	.word	0x40023800
 8005960:	0800abb4 	.word	0x0800abb4
 8005964:	20000030 	.word	0x20000030
 8005968:	20000034 	.word	0x20000034

0800596c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800596c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005970:	b090      	sub	sp, #64	@ 0x40
 8005972:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005984:	4b59      	ldr	r3, [pc, #356]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x180>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 030c 	and.w	r3, r3, #12
 800598c:	2b08      	cmp	r3, #8
 800598e:	d00d      	beq.n	80059ac <HAL_RCC_GetSysClockFreq+0x40>
 8005990:	2b08      	cmp	r3, #8
 8005992:	f200 80a1 	bhi.w	8005ad8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_RCC_GetSysClockFreq+0x34>
 800599a:	2b04      	cmp	r3, #4
 800599c:	d003      	beq.n	80059a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800599e:	e09b      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059a0:	4b53      	ldr	r3, [pc, #332]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x184>)
 80059a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059a4:	e09b      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059a6:	4b53      	ldr	r3, [pc, #332]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x188>)
 80059a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059aa:	e098      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059ac:	4b4f      	ldr	r3, [pc, #316]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x180>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059b6:	4b4d      	ldr	r3, [pc, #308]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x180>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d028      	beq.n	8005a14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c2:	4b4a      	ldr	r3, [pc, #296]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x180>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	099b      	lsrs	r3, r3, #6
 80059c8:	2200      	movs	r2, #0
 80059ca:	623b      	str	r3, [r7, #32]
 80059cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059d4:	2100      	movs	r1, #0
 80059d6:	4b47      	ldr	r3, [pc, #284]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x188>)
 80059d8:	fb03 f201 	mul.w	r2, r3, r1
 80059dc:	2300      	movs	r3, #0
 80059de:	fb00 f303 	mul.w	r3, r0, r3
 80059e2:	4413      	add	r3, r2
 80059e4:	4a43      	ldr	r2, [pc, #268]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x188>)
 80059e6:	fba0 1202 	umull	r1, r2, r0, r2
 80059ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059ec:	460a      	mov	r2, r1
 80059ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80059f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f2:	4413      	add	r3, r2
 80059f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f8:	2200      	movs	r2, #0
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	61fa      	str	r2, [r7, #28]
 80059fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005a06:	f7fb f84d 	bl	8000aa4 <__aeabi_uldivmod>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4613      	mov	r3, r2
 8005a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a12:	e053      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a14:	4b35      	ldr	r3, [pc, #212]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x180>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	099b      	lsrs	r3, r3, #6
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	617a      	str	r2, [r7, #20]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a26:	f04f 0b00 	mov.w	fp, #0
 8005a2a:	4652      	mov	r2, sl
 8005a2c:	465b      	mov	r3, fp
 8005a2e:	f04f 0000 	mov.w	r0, #0
 8005a32:	f04f 0100 	mov.w	r1, #0
 8005a36:	0159      	lsls	r1, r3, #5
 8005a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a3c:	0150      	lsls	r0, r2, #5
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	ebb2 080a 	subs.w	r8, r2, sl
 8005a46:	eb63 090b 	sbc.w	r9, r3, fp
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a5e:	ebb2 0408 	subs.w	r4, r2, r8
 8005a62:	eb63 0509 	sbc.w	r5, r3, r9
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	00eb      	lsls	r3, r5, #3
 8005a70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a74:	00e2      	lsls	r2, r4, #3
 8005a76:	4614      	mov	r4, r2
 8005a78:	461d      	mov	r5, r3
 8005a7a:	eb14 030a 	adds.w	r3, r4, sl
 8005a7e:	603b      	str	r3, [r7, #0]
 8005a80:	eb45 030b 	adc.w	r3, r5, fp
 8005a84:	607b      	str	r3, [r7, #4]
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a92:	4629      	mov	r1, r5
 8005a94:	028b      	lsls	r3, r1, #10
 8005a96:	4621      	mov	r1, r4
 8005a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	028a      	lsls	r2, r1, #10
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	60fa      	str	r2, [r7, #12]
 8005aac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ab0:	f7fa fff8 	bl	8000aa4 <__aeabi_uldivmod>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4613      	mov	r3, r2
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005abc:	4b0b      	ldr	r3, [pc, #44]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x180>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	0c1b      	lsrs	r3, r3, #16
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005acc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ad6:	e002      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ad8:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ada:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3740      	adds	r7, #64	@ 0x40
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800
 8005af0:	00f42400 	.word	0x00f42400
 8005af4:	017d7840 	.word	0x017d7840

08005af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005afc:	4b03      	ldr	r3, [pc, #12]	@ (8005b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000030 	.word	0x20000030

08005b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e041      	b.n	8005ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fc fd56 	bl	80025e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4610      	mov	r0, r2
 8005b50:	f000 fc50 	bl	80063f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d001      	beq.n	8005bc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e03c      	b.n	8005c42 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8005c50 <HAL_TIM_Base_Start+0xa0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d018      	beq.n	8005c0c <HAL_TIM_Base_Start+0x5c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be2:	d013      	beq.n	8005c0c <HAL_TIM_Base_Start+0x5c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c54 <HAL_TIM_Base_Start+0xa4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00e      	beq.n	8005c0c <HAL_TIM_Base_Start+0x5c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a19      	ldr	r2, [pc, #100]	@ (8005c58 <HAL_TIM_Base_Start+0xa8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d009      	beq.n	8005c0c <HAL_TIM_Base_Start+0x5c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a17      	ldr	r2, [pc, #92]	@ (8005c5c <HAL_TIM_Base_Start+0xac>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <HAL_TIM_Base_Start+0x5c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a16      	ldr	r2, [pc, #88]	@ (8005c60 <HAL_TIM_Base_Start+0xb0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d111      	bne.n	8005c30 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d010      	beq.n	8005c40 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0201 	orr.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2e:	e007      	b.n	8005c40 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0201 	orr.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40010000 	.word	0x40010000
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40000800 	.word	0x40000800
 8005c5c:	40000c00 	.word	0x40000c00
 8005c60:	40014000 	.word	0x40014000

08005c64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e041      	b.n	8005cfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f839 	bl	8005d02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	f000 fba6 	bl	80063f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d109      	bne.n	8005d3c <HAL_TIM_PWM_Start+0x24>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	bf14      	ite	ne
 8005d34:	2301      	movne	r3, #1
 8005d36:	2300      	moveq	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	e022      	b.n	8005d82 <HAL_TIM_PWM_Start+0x6a>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d109      	bne.n	8005d56 <HAL_TIM_PWM_Start+0x3e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	bf14      	ite	ne
 8005d4e:	2301      	movne	r3, #1
 8005d50:	2300      	moveq	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	e015      	b.n	8005d82 <HAL_TIM_PWM_Start+0x6a>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d109      	bne.n	8005d70 <HAL_TIM_PWM_Start+0x58>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	bf14      	ite	ne
 8005d68:	2301      	movne	r3, #1
 8005d6a:	2300      	moveq	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	e008      	b.n	8005d82 <HAL_TIM_PWM_Start+0x6a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	bf14      	ite	ne
 8005d7c:	2301      	movne	r3, #1
 8005d7e:	2300      	moveq	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e068      	b.n	8005e5c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d104      	bne.n	8005d9a <HAL_TIM_PWM_Start+0x82>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d98:	e013      	b.n	8005dc2 <HAL_TIM_PWM_Start+0xaa>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d104      	bne.n	8005daa <HAL_TIM_PWM_Start+0x92>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005da8:	e00b      	b.n	8005dc2 <HAL_TIM_PWM_Start+0xaa>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d104      	bne.n	8005dba <HAL_TIM_PWM_Start+0xa2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005db8:	e003      	b.n	8005dc2 <HAL_TIM_PWM_Start+0xaa>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fdc4 	bl	8006958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a23      	ldr	r2, [pc, #140]	@ (8005e64 <HAL_TIM_PWM_Start+0x14c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d107      	bne.n	8005dea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005de8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1d      	ldr	r2, [pc, #116]	@ (8005e64 <HAL_TIM_PWM_Start+0x14c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d018      	beq.n	8005e26 <HAL_TIM_PWM_Start+0x10e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dfc:	d013      	beq.n	8005e26 <HAL_TIM_PWM_Start+0x10e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a19      	ldr	r2, [pc, #100]	@ (8005e68 <HAL_TIM_PWM_Start+0x150>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00e      	beq.n	8005e26 <HAL_TIM_PWM_Start+0x10e>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a17      	ldr	r2, [pc, #92]	@ (8005e6c <HAL_TIM_PWM_Start+0x154>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d009      	beq.n	8005e26 <HAL_TIM_PWM_Start+0x10e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a16      	ldr	r2, [pc, #88]	@ (8005e70 <HAL_TIM_PWM_Start+0x158>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d004      	beq.n	8005e26 <HAL_TIM_PWM_Start+0x10e>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a14      	ldr	r2, [pc, #80]	@ (8005e74 <HAL_TIM_PWM_Start+0x15c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d111      	bne.n	8005e4a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b06      	cmp	r3, #6
 8005e36:	d010      	beq.n	8005e5a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e48:	e007      	b.n	8005e5a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0201 	orr.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40014000 	.word	0x40014000

08005e78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e097      	b.n	8005fbc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d106      	bne.n	8005ea6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7fc fc03 	bl	80026ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ebc:	f023 0307 	bic.w	r3, r3, #7
 8005ec0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f000 fa91 	bl	80063f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005efa:	f023 0303 	bic.w	r3, r3, #3
 8005efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f18:	f023 030c 	bic.w	r3, r3, #12
 8005f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	4313      	orrs	r3, r2
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	011a      	lsls	r2, r3, #4
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	031b      	lsls	r3, r3, #12
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fd4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fdc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fe4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005fec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d110      	bne.n	8006016 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d102      	bne.n	8006000 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ffa:	7b7b      	ldrb	r3, [r7, #13]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d001      	beq.n	8006004 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e069      	b.n	80060d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006014:	e031      	b.n	800607a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b04      	cmp	r3, #4
 800601a:	d110      	bne.n	800603e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800601c:	7bbb      	ldrb	r3, [r7, #14]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d102      	bne.n	8006028 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006022:	7b3b      	ldrb	r3, [r7, #12]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d001      	beq.n	800602c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e055      	b.n	80060d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800603c:	e01d      	b.n	800607a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d108      	bne.n	8006056 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d105      	bne.n	8006056 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800604a:	7b7b      	ldrb	r3, [r7, #13]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d102      	bne.n	8006056 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006050:	7b3b      	ldrb	r3, [r7, #12]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d001      	beq.n	800605a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e03e      	b.n	80060d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_TIM_Encoder_Start+0xc4>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d008      	beq.n	8006098 <HAL_TIM_Encoder_Start+0xd4>
 8006086:	e00f      	b.n	80060a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2201      	movs	r2, #1
 800608e:	2100      	movs	r1, #0
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fc61 	bl	8006958 <TIM_CCxChannelCmd>
      break;
 8006096:	e016      	b.n	80060c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2201      	movs	r2, #1
 800609e:	2104      	movs	r1, #4
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fc59 	bl	8006958 <TIM_CCxChannelCmd>
      break;
 80060a6:	e00e      	b.n	80060c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2201      	movs	r2, #1
 80060ae:	2100      	movs	r1, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fc51 	bl	8006958 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2201      	movs	r2, #1
 80060bc:	2104      	movs	r1, #4
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fc4a 	bl	8006958 <TIM_CCxChannelCmd>
      break;
 80060c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d101      	bne.n	80060fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e0ae      	b.n	800625c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b0c      	cmp	r3, #12
 800610a:	f200 809f 	bhi.w	800624c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800610e:	a201      	add	r2, pc, #4	@ (adr r2, 8006114 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006114:	08006149 	.word	0x08006149
 8006118:	0800624d 	.word	0x0800624d
 800611c:	0800624d 	.word	0x0800624d
 8006120:	0800624d 	.word	0x0800624d
 8006124:	08006189 	.word	0x08006189
 8006128:	0800624d 	.word	0x0800624d
 800612c:	0800624d 	.word	0x0800624d
 8006130:	0800624d 	.word	0x0800624d
 8006134:	080061cb 	.word	0x080061cb
 8006138:	0800624d 	.word	0x0800624d
 800613c:	0800624d 	.word	0x0800624d
 8006140:	0800624d 	.word	0x0800624d
 8006144:	0800620b 	.word	0x0800620b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 f9dc 	bl	800650c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0208 	orr.w	r2, r2, #8
 8006162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0204 	bic.w	r2, r2, #4
 8006172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6999      	ldr	r1, [r3, #24]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	619a      	str	r2, [r3, #24]
      break;
 8006186:	e064      	b.n	8006252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fa22 	bl	80065d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6999      	ldr	r1, [r3, #24]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	021a      	lsls	r2, r3, #8
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	619a      	str	r2, [r3, #24]
      break;
 80061c8:	e043      	b.n	8006252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fa6d 	bl	80066b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69da      	ldr	r2, [r3, #28]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0208 	orr.w	r2, r2, #8
 80061e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69da      	ldr	r2, [r3, #28]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0204 	bic.w	r2, r2, #4
 80061f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69d9      	ldr	r1, [r3, #28]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	61da      	str	r2, [r3, #28]
      break;
 8006208:	e023      	b.n	8006252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fab7 	bl	8006784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69d9      	ldr	r1, [r3, #28]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	021a      	lsls	r2, r3, #8
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	61da      	str	r2, [r3, #28]
      break;
 800624a:	e002      	b.n	8006252 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	75fb      	strb	r3, [r7, #23]
      break;
 8006250:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800625a:	7dfb      	ldrb	r3, [r7, #23]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_TIM_ConfigClockSource+0x1c>
 800627c:	2302      	movs	r3, #2
 800627e:	e0b4      	b.n	80063ea <HAL_TIM_ConfigClockSource+0x186>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800629e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062b8:	d03e      	beq.n	8006338 <HAL_TIM_ConfigClockSource+0xd4>
 80062ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062be:	f200 8087 	bhi.w	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062c6:	f000 8086 	beq.w	80063d6 <HAL_TIM_ConfigClockSource+0x172>
 80062ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ce:	d87f      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d0:	2b70      	cmp	r3, #112	@ 0x70
 80062d2:	d01a      	beq.n	800630a <HAL_TIM_ConfigClockSource+0xa6>
 80062d4:	2b70      	cmp	r3, #112	@ 0x70
 80062d6:	d87b      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d8:	2b60      	cmp	r3, #96	@ 0x60
 80062da:	d050      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x11a>
 80062dc:	2b60      	cmp	r3, #96	@ 0x60
 80062de:	d877      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b50      	cmp	r3, #80	@ 0x50
 80062e2:	d03c      	beq.n	800635e <HAL_TIM_ConfigClockSource+0xfa>
 80062e4:	2b50      	cmp	r3, #80	@ 0x50
 80062e6:	d873      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b40      	cmp	r3, #64	@ 0x40
 80062ea:	d058      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x13a>
 80062ec:	2b40      	cmp	r3, #64	@ 0x40
 80062ee:	d86f      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f0:	2b30      	cmp	r3, #48	@ 0x30
 80062f2:	d064      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x15a>
 80062f4:	2b30      	cmp	r3, #48	@ 0x30
 80062f6:	d86b      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d060      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x15a>
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d867      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d05c      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x15a>
 8006304:	2b10      	cmp	r3, #16
 8006306:	d05a      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x15a>
 8006308:	e062      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800631a:	f000 fafd 	bl	8006918 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800632c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	609a      	str	r2, [r3, #8]
      break;
 8006336:	e04f      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006348:	f000 fae6 	bl	8006918 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800635a:	609a      	str	r2, [r3, #8]
      break;
 800635c:	e03c      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800636a:	461a      	mov	r2, r3
 800636c:	f000 fa5a 	bl	8006824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2150      	movs	r1, #80	@ 0x50
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fab3 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 800637c:	e02c      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800638a:	461a      	mov	r2, r3
 800638c:	f000 fa79 	bl	8006882 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2160      	movs	r1, #96	@ 0x60
 8006396:	4618      	mov	r0, r3
 8006398:	f000 faa3 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 800639c:	e01c      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063aa:	461a      	mov	r2, r3
 80063ac:	f000 fa3a 	bl	8006824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2140      	movs	r1, #64	@ 0x40
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fa93 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 80063bc:	e00c      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f000 fa8a 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 80063ce:	e003      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
      break;
 80063d4:	e000      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a3a      	ldr	r2, [pc, #232]	@ (80064f0 <TIM_Base_SetConfig+0xfc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00f      	beq.n	800642c <TIM_Base_SetConfig+0x38>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006412:	d00b      	beq.n	800642c <TIM_Base_SetConfig+0x38>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a37      	ldr	r2, [pc, #220]	@ (80064f4 <TIM_Base_SetConfig+0x100>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d007      	beq.n	800642c <TIM_Base_SetConfig+0x38>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a36      	ldr	r2, [pc, #216]	@ (80064f8 <TIM_Base_SetConfig+0x104>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_Base_SetConfig+0x38>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a35      	ldr	r2, [pc, #212]	@ (80064fc <TIM_Base_SetConfig+0x108>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d108      	bne.n	800643e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a2b      	ldr	r2, [pc, #172]	@ (80064f0 <TIM_Base_SetConfig+0xfc>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01b      	beq.n	800647e <TIM_Base_SetConfig+0x8a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800644c:	d017      	beq.n	800647e <TIM_Base_SetConfig+0x8a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a28      	ldr	r2, [pc, #160]	@ (80064f4 <TIM_Base_SetConfig+0x100>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d013      	beq.n	800647e <TIM_Base_SetConfig+0x8a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a27      	ldr	r2, [pc, #156]	@ (80064f8 <TIM_Base_SetConfig+0x104>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00f      	beq.n	800647e <TIM_Base_SetConfig+0x8a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a26      	ldr	r2, [pc, #152]	@ (80064fc <TIM_Base_SetConfig+0x108>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00b      	beq.n	800647e <TIM_Base_SetConfig+0x8a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a25      	ldr	r2, [pc, #148]	@ (8006500 <TIM_Base_SetConfig+0x10c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d007      	beq.n	800647e <TIM_Base_SetConfig+0x8a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a24      	ldr	r2, [pc, #144]	@ (8006504 <TIM_Base_SetConfig+0x110>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d003      	beq.n	800647e <TIM_Base_SetConfig+0x8a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a23      	ldr	r2, [pc, #140]	@ (8006508 <TIM_Base_SetConfig+0x114>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d108      	bne.n	8006490 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a0e      	ldr	r2, [pc, #56]	@ (80064f0 <TIM_Base_SetConfig+0xfc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d103      	bne.n	80064c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d105      	bne.n	80064e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f023 0201 	bic.w	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	611a      	str	r2, [r3, #16]
  }
}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40014000 	.word	0x40014000
 8006504:	40014400 	.word	0x40014400
 8006508:	40014800 	.word	0x40014800

0800650c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	f023 0201 	bic.w	r2, r3, #1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f023 0302 	bic.w	r3, r3, #2
 8006554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a1c      	ldr	r2, [pc, #112]	@ (80065d4 <TIM_OC1_SetConfig+0xc8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d10c      	bne.n	8006582 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f023 0308 	bic.w	r3, r3, #8
 800656e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f023 0304 	bic.w	r3, r3, #4
 8006580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a13      	ldr	r2, [pc, #76]	@ (80065d4 <TIM_OC1_SetConfig+0xc8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d111      	bne.n	80065ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	621a      	str	r2, [r3, #32]
}
 80065c8:	bf00      	nop
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	40010000 	.word	0x40010000

080065d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	f023 0210 	bic.w	r2, r3, #16
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f023 0320 	bic.w	r3, r3, #32
 8006622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a1e      	ldr	r2, [pc, #120]	@ (80066ac <TIM_OC2_SetConfig+0xd4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d10d      	bne.n	8006654 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800663e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a15      	ldr	r2, [pc, #84]	@ (80066ac <TIM_OC2_SetConfig+0xd4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d113      	bne.n	8006684 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006662:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800666a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	621a      	str	r2, [r3, #32]
}
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40010000 	.word	0x40010000

080066b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a1d      	ldr	r2, [pc, #116]	@ (8006780 <TIM_OC3_SetConfig+0xd0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d10d      	bne.n	800672a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a14      	ldr	r2, [pc, #80]	@ (8006780 <TIM_OC3_SetConfig+0xd0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d113      	bne.n	800675a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	621a      	str	r2, [r3, #32]
}
 8006774:	bf00      	nop
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	40010000 	.word	0x40010000

08006784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	031b      	lsls	r3, r3, #12
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a10      	ldr	r2, [pc, #64]	@ (8006820 <TIM_OC4_SetConfig+0x9c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d109      	bne.n	80067f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	019b      	lsls	r3, r3, #6
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40010000 	.word	0x40010000

08006824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f023 0201 	bic.w	r2, r3, #1
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800684e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f023 030a 	bic.w	r3, r3, #10
 8006860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	621a      	str	r2, [r3, #32]
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006882:	b480      	push	{r7}
 8006884:	b087      	sub	sp, #28
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	f023 0210 	bic.w	r2, r3, #16
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	031b      	lsls	r3, r3, #12
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	f043 0307 	orr.w	r3, r3, #7
 8006904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	609a      	str	r2, [r3, #8]
}
 800690c:	bf00      	nop
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	021a      	lsls	r2, r3, #8
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	431a      	orrs	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4313      	orrs	r3, r2
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	4313      	orrs	r3, r2
 8006944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	609a      	str	r2, [r3, #8]
}
 800694c:	bf00      	nop
 800694e:	371c      	adds	r7, #28
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2201      	movs	r2, #1
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1a      	ldr	r2, [r3, #32]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	43db      	mvns	r3, r3
 800697a:	401a      	ands	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a1a      	ldr	r2, [r3, #32]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	fa01 f303 	lsl.w	r3, r1, r3
 8006990:	431a      	orrs	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	621a      	str	r2, [r3, #32]
}
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
	...

080069a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e050      	b.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1c      	ldr	r2, [pc, #112]	@ (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d018      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a08:	d013      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a18      	ldr	r2, [pc, #96]	@ (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00e      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a16      	ldr	r2, [pc, #88]	@ (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d009      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a15      	ldr	r2, [pc, #84]	@ (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d004      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a13      	ldr	r2, [pc, #76]	@ (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d10c      	bne.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40010000 	.word	0x40010000
 8006a70:	40000400 	.word	0x40000400
 8006a74:	40000800 	.word	0x40000800
 8006a78:	40000c00 	.word	0x40000c00
 8006a7c:	40014000 	.word	0x40014000

08006a80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a80:	b084      	sub	sp, #16
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	f107 001c 	add.w	r0, r7, #28
 8006a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d123      	bne.n	8006ae2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d105      	bne.n	8006ad6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fae8 	bl	80080ac <USB_CoreReset>
 8006adc:	4603      	mov	r3, r0
 8006ade:	73fb      	strb	r3, [r7, #15]
 8006ae0:	e01b      	b.n	8006b1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fadc 	bl	80080ac <USB_CoreReset>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006af8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d106      	bne.n	8006b0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b0c:	e005      	b.n	8006b1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b1a:	7fbb      	ldrb	r3, [r7, #30]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d10b      	bne.n	8006b38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f043 0206 	orr.w	r2, r3, #6
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f043 0220 	orr.w	r2, r3, #32
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b44:	b004      	add	sp, #16
 8006b46:	4770      	bx	lr

08006b48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	4613      	mov	r3, r2
 8006b54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b56:	79fb      	ldrb	r3, [r7, #7]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d165      	bne.n	8006c28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4a41      	ldr	r2, [pc, #260]	@ (8006c64 <USB_SetTurnaroundTime+0x11c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d906      	bls.n	8006b72 <USB_SetTurnaroundTime+0x2a>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4a40      	ldr	r2, [pc, #256]	@ (8006c68 <USB_SetTurnaroundTime+0x120>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d202      	bcs.n	8006b72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b6c:	230f      	movs	r3, #15
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e062      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	4a3c      	ldr	r2, [pc, #240]	@ (8006c68 <USB_SetTurnaroundTime+0x120>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d306      	bcc.n	8006b88 <USB_SetTurnaroundTime+0x40>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8006c6c <USB_SetTurnaroundTime+0x124>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d202      	bcs.n	8006b88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b82:	230e      	movs	r3, #14
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	e057      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4a38      	ldr	r2, [pc, #224]	@ (8006c6c <USB_SetTurnaroundTime+0x124>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d306      	bcc.n	8006b9e <USB_SetTurnaroundTime+0x56>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4a37      	ldr	r2, [pc, #220]	@ (8006c70 <USB_SetTurnaroundTime+0x128>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d202      	bcs.n	8006b9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b98:	230d      	movs	r3, #13
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	e04c      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4a33      	ldr	r2, [pc, #204]	@ (8006c70 <USB_SetTurnaroundTime+0x128>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d306      	bcc.n	8006bb4 <USB_SetTurnaroundTime+0x6c>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	4a32      	ldr	r2, [pc, #200]	@ (8006c74 <USB_SetTurnaroundTime+0x12c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d802      	bhi.n	8006bb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006bae:	230c      	movs	r3, #12
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	e041      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8006c74 <USB_SetTurnaroundTime+0x12c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d906      	bls.n	8006bca <USB_SetTurnaroundTime+0x82>
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4a2e      	ldr	r2, [pc, #184]	@ (8006c78 <USB_SetTurnaroundTime+0x130>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d802      	bhi.n	8006bca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006bc4:	230b      	movs	r3, #11
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	e036      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8006c78 <USB_SetTurnaroundTime+0x130>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d906      	bls.n	8006be0 <USB_SetTurnaroundTime+0x98>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	4a29      	ldr	r2, [pc, #164]	@ (8006c7c <USB_SetTurnaroundTime+0x134>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d802      	bhi.n	8006be0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006bda:	230a      	movs	r3, #10
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	e02b      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	4a26      	ldr	r2, [pc, #152]	@ (8006c7c <USB_SetTurnaroundTime+0x134>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d906      	bls.n	8006bf6 <USB_SetTurnaroundTime+0xae>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4a25      	ldr	r2, [pc, #148]	@ (8006c80 <USB_SetTurnaroundTime+0x138>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d202      	bcs.n	8006bf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006bf0:	2309      	movs	r3, #9
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	e020      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	4a21      	ldr	r2, [pc, #132]	@ (8006c80 <USB_SetTurnaroundTime+0x138>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d306      	bcc.n	8006c0c <USB_SetTurnaroundTime+0xc4>
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	4a20      	ldr	r2, [pc, #128]	@ (8006c84 <USB_SetTurnaroundTime+0x13c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d802      	bhi.n	8006c0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c06:	2308      	movs	r3, #8
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	e015      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006c84 <USB_SetTurnaroundTime+0x13c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d906      	bls.n	8006c22 <USB_SetTurnaroundTime+0xda>
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4a1c      	ldr	r2, [pc, #112]	@ (8006c88 <USB_SetTurnaroundTime+0x140>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d202      	bcs.n	8006c22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c1c:	2307      	movs	r3, #7
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	e00a      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c22:	2306      	movs	r3, #6
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	e007      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c2e:	2309      	movs	r3, #9
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e001      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c34:	2309      	movs	r3, #9
 8006c36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	029b      	lsls	r3, r3, #10
 8006c4c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006c50:	431a      	orrs	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	00d8acbf 	.word	0x00d8acbf
 8006c68:	00e4e1c0 	.word	0x00e4e1c0
 8006c6c:	00f42400 	.word	0x00f42400
 8006c70:	01067380 	.word	0x01067380
 8006c74:	011a499f 	.word	0x011a499f
 8006c78:	01312cff 	.word	0x01312cff
 8006c7c:	014ca43f 	.word	0x014ca43f
 8006c80:	016e3600 	.word	0x016e3600
 8006c84:	01a6ab1f 	.word	0x01a6ab1f
 8006c88:	01e84800 	.word	0x01e84800

08006c8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f043 0201 	orr.w	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f023 0201 	bic.w	r2, r3, #1
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d115      	bne.n	8006d1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cfe:	200a      	movs	r0, #10
 8006d00:	f7fb fe48 	bl	8002994 <HAL_Delay>
      ms += 10U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	330a      	adds	r3, #10
 8006d08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 f93f 	bl	8007f8e <USB_GetMode>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d01e      	beq.n	8006d54 <USB_SetCurrentMode+0x84>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d1a:	d9f0      	bls.n	8006cfe <USB_SetCurrentMode+0x2e>
 8006d1c:	e01a      	b.n	8006d54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d115      	bne.n	8006d50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d30:	200a      	movs	r0, #10
 8006d32:	f7fb fe2f 	bl	8002994 <HAL_Delay>
      ms += 10U;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	330a      	adds	r3, #10
 8006d3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 f926 	bl	8007f8e <USB_GetMode>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <USB_SetCurrentMode+0x84>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d4c:	d9f0      	bls.n	8006d30 <USB_SetCurrentMode+0x60>
 8006d4e:	e001      	b.n	8006d54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e005      	b.n	8006d60 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d58:	d101      	bne.n	8006d5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d68:	b084      	sub	sp, #16
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d82:	2300      	movs	r3, #0
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	e009      	b.n	8006d9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	3340      	adds	r3, #64	@ 0x40
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	2200      	movs	r2, #0
 8006d94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b0e      	cmp	r3, #14
 8006da0:	d9f2      	bls.n	8006d88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006da2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d11c      	bne.n	8006de4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006db8:	f043 0302 	orr.w	r3, r3, #2
 8006dbc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dda:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	639a      	str	r2, [r3, #56]	@ 0x38
 8006de2:	e00b      	b.n	8006dfc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e02:	461a      	mov	r2, r3
 8006e04:	2300      	movs	r3, #0
 8006e06:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e08:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d10d      	bne.n	8006e2c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e18:	2100      	movs	r1, #0
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f968 	bl	80070f0 <USB_SetDevSpeed>
 8006e20:	e008      	b.n	8006e34 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e22:	2101      	movs	r1, #1
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f963 	bl	80070f0 <USB_SetDevSpeed>
 8006e2a:	e003      	b.n	8006e34 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e2c:	2103      	movs	r1, #3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f95e 	bl	80070f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e34:	2110      	movs	r1, #16
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f8fa 	bl	8007030 <USB_FlushTxFifo>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f924 	bl	8007094 <USB_FlushRxFifo>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	2300      	movs	r3, #0
 8006e60:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e68:	461a      	mov	r2, r3
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e74:	461a      	mov	r2, r3
 8006e76:	2300      	movs	r3, #0
 8006e78:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	e043      	b.n	8006f08 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e96:	d118      	bne.n	8006eca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	e013      	b.n	8006edc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	e008      	b.n	8006edc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	2300      	movs	r3, #0
 8006eda:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee8:	461a      	mov	r2, r3
 8006eea:	2300      	movs	r3, #0
 8006eec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006efa:	461a      	mov	r2, r3
 8006efc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	3301      	adds	r3, #1
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d3b5      	bcc.n	8006e80 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	e043      	b.n	8006fa2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f30:	d118      	bne.n	8006f64 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f44:	461a      	mov	r2, r3
 8006f46:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	e013      	b.n	8006f76 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	e008      	b.n	8006f76 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f70:	461a      	mov	r2, r3
 8006f72:	2300      	movs	r3, #0
 8006f74:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f82:	461a      	mov	r2, r3
 8006f84:	2300      	movs	r3, #0
 8006f86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f94:	461a      	mov	r2, r3
 8006f96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d3b5      	bcc.n	8006f1a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fc0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006fce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d105      	bne.n	8006fe4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	f043 0210 	orr.w	r2, r3, #16
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	4b10      	ldr	r3, [pc, #64]	@ (800702c <USB_DevInit+0x2c4>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ff0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	f043 0208 	orr.w	r2, r3, #8
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007004:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007008:	2b01      	cmp	r3, #1
 800700a:	d107      	bne.n	800701c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007014:	f043 0304 	orr.w	r3, r3, #4
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800701c:	7dfb      	ldrb	r3, [r7, #23]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007028:	b004      	add	sp, #16
 800702a:	4770      	bx	lr
 800702c:	803c3800 	.word	0x803c3800

08007030 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3301      	adds	r3, #1
 8007042:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800704a:	d901      	bls.n	8007050 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e01b      	b.n	8007088 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	daf2      	bge.n	800703e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	019b      	lsls	r3, r3, #6
 8007060:	f043 0220 	orr.w	r2, r3, #32
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007074:	d901      	bls.n	800707a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e006      	b.n	8007088 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b20      	cmp	r3, #32
 8007084:	d0f0      	beq.n	8007068 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3301      	adds	r3, #1
 80070a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070ac:	d901      	bls.n	80070b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e018      	b.n	80070e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	daf2      	bge.n	80070a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2210      	movs	r2, #16
 80070c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070d0:	d901      	bls.n	80070d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e006      	b.n	80070e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	2b10      	cmp	r3, #16
 80070e0:	d0f0      	beq.n	80070c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	68f9      	ldr	r1, [r7, #12]
 800710c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007110:	4313      	orrs	r3, r2
 8007112:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007122:	b480      	push	{r7}
 8007124:	b087      	sub	sp, #28
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 0306 	and.w	r3, r3, #6
 800713a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d102      	bne.n	8007148 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007142:	2300      	movs	r3, #0
 8007144:	75fb      	strb	r3, [r7, #23]
 8007146:	e00a      	b.n	800715e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d002      	beq.n	8007154 <USB_GetDevSpeed+0x32>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b06      	cmp	r3, #6
 8007152:	d102      	bne.n	800715a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007154:	2302      	movs	r3, #2
 8007156:	75fb      	strb	r3, [r7, #23]
 8007158:	e001      	b.n	800715e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800715a:	230f      	movs	r3, #15
 800715c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800715e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007160:	4618      	mov	r0, r3
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d13a      	bne.n	80071fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800718e:	69da      	ldr	r2, [r3, #28]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	2101      	movs	r1, #1
 800719a:	fa01 f303 	lsl.w	r3, r1, r3
 800719e:	b29b      	uxth	r3, r3
 80071a0:	68f9      	ldr	r1, [r7, #12]
 80071a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071a6:	4313      	orrs	r3, r2
 80071a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d155      	bne.n	800726c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	791b      	ldrb	r3, [r3, #4]
 80071da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	059b      	lsls	r3, r3, #22
 80071e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071e4:	4313      	orrs	r3, r2
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	e036      	b.n	800726c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007204:	69da      	ldr	r2, [r3, #28]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	f003 030f 	and.w	r3, r3, #15
 800720e:	2101      	movs	r1, #1
 8007210:	fa01 f303 	lsl.w	r3, r1, r3
 8007214:	041b      	lsls	r3, r3, #16
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800721c:	4313      	orrs	r3, r2
 800721e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d11a      	bne.n	800726c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	791b      	ldrb	r3, [r3, #4]
 8007250:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007252:	430b      	orrs	r3, r1
 8007254:	4313      	orrs	r3, r2
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	440a      	add	r2, r1
 800725e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800726a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
	...

0800727c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d161      	bne.n	800735c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072ae:	d11f      	bne.n	80072f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	0151      	lsls	r1, r2, #5
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	440a      	add	r2, r1
 80072c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	0151      	lsls	r1, r2, #5
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	440a      	add	r2, r1
 80072e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	2101      	movs	r1, #1
 8007302:	fa01 f303 	lsl.w	r3, r1, r3
 8007306:	b29b      	uxth	r3, r3
 8007308:	43db      	mvns	r3, r3
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007310:	4013      	ands	r3, r2
 8007312:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	2101      	movs	r1, #1
 8007326:	fa01 f303 	lsl.w	r3, r1, r3
 800732a:	b29b      	uxth	r3, r3
 800732c:	43db      	mvns	r3, r3
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007334:	4013      	ands	r3, r2
 8007336:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	0159      	lsls	r1, r3, #5
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	440b      	add	r3, r1
 800734e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007352:	4619      	mov	r1, r3
 8007354:	4b35      	ldr	r3, [pc, #212]	@ (800742c <USB_DeactivateEndpoint+0x1b0>)
 8007356:	4013      	ands	r3, r2
 8007358:	600b      	str	r3, [r1, #0]
 800735a:	e060      	b.n	800741e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800736e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007372:	d11f      	bne.n	80073b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	440a      	add	r2, r1
 800738a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800738e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007392:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	f003 030f 	and.w	r3, r3, #15
 80073c4:	2101      	movs	r1, #1
 80073c6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ca:	041b      	lsls	r3, r3, #16
 80073cc:	43db      	mvns	r3, r3
 80073ce:	68f9      	ldr	r1, [r7, #12]
 80073d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073d4:	4013      	ands	r3, r2
 80073d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073de:	69da      	ldr	r2, [r3, #28]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	f003 030f 	and.w	r3, r3, #15
 80073e8:	2101      	movs	r1, #1
 80073ea:	fa01 f303 	lsl.w	r3, r1, r3
 80073ee:	041b      	lsls	r3, r3, #16
 80073f0:	43db      	mvns	r3, r3
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073f8:	4013      	ands	r3, r2
 80073fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	0159      	lsls	r1, r3, #5
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	440b      	add	r3, r1
 8007412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007416:	4619      	mov	r1, r3
 8007418:	4b05      	ldr	r3, [pc, #20]	@ (8007430 <USB_DeactivateEndpoint+0x1b4>)
 800741a:	4013      	ands	r3, r2
 800741c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	ec337800 	.word	0xec337800
 8007430:	eff37800 	.word	0xeff37800

08007434 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	@ 0x28
 8007438:	af02      	add	r7, sp, #8
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	4613      	mov	r3, r2
 8007440:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	2b01      	cmp	r3, #1
 8007452:	f040 817f 	bne.w	8007754 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d132      	bne.n	80074c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	440a      	add	r2, r1
 8007474:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007478:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800747c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007480:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	440a      	add	r2, r1
 8007498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800749c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074bc:	0cdb      	lsrs	r3, r3, #19
 80074be:	04db      	lsls	r3, r3, #19
 80074c0:	6113      	str	r3, [r2, #16]
 80074c2:	e097      	b.n	80075f4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	0151      	lsls	r1, r2, #5
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	440a      	add	r2, r1
 80074da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074de:	0cdb      	lsrs	r3, r3, #19
 80074e0:	04db      	lsls	r3, r3, #19
 80074e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007502:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007506:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d11a      	bne.n	8007544 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	691a      	ldr	r2, [r3, #16]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	429a      	cmp	r2, r3
 8007518:	d903      	bls.n	8007522 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	0151      	lsls	r1, r2, #5
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	440a      	add	r2, r1
 8007538:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800753c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007540:	6113      	str	r3, [r2, #16]
 8007542:	e044      	b.n	80075ce <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	4413      	add	r3, r2
 800754e:	1e5a      	subs	r2, r3, #1
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	fbb2 f3f3 	udiv	r3, r2, r3
 8007558:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	8afb      	ldrh	r3, [r7, #22]
 800756a:	04d9      	lsls	r1, r3, #19
 800756c:	4ba4      	ldr	r3, [pc, #656]	@ (8007800 <USB_EPStartXfer+0x3cc>)
 800756e:	400b      	ands	r3, r1
 8007570:	69b9      	ldr	r1, [r7, #24]
 8007572:	0148      	lsls	r0, r1, #5
 8007574:	69f9      	ldr	r1, [r7, #28]
 8007576:	4401      	add	r1, r0
 8007578:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800757c:	4313      	orrs	r3, r2
 800757e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	791b      	ldrb	r3, [r3, #4]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d122      	bne.n	80075ce <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	0151      	lsls	r1, r2, #5
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	440a      	add	r2, r1
 800759e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075a2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80075a6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b4:	691a      	ldr	r2, [r3, #16]
 80075b6:	8afb      	ldrh	r3, [r7, #22]
 80075b8:	075b      	lsls	r3, r3, #29
 80075ba:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80075be:	69b9      	ldr	r1, [r7, #24]
 80075c0:	0148      	lsls	r0, r1, #5
 80075c2:	69f9      	ldr	r1, [r7, #28]
 80075c4:	4401      	add	r1, r0
 80075c6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075ca:	4313      	orrs	r3, r2
 80075cc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075e4:	69b9      	ldr	r1, [r7, #24]
 80075e6:	0148      	lsls	r0, r1, #5
 80075e8:	69f9      	ldr	r1, [r7, #28]
 80075ea:	4401      	add	r1, r0
 80075ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075f0:	4313      	orrs	r3, r2
 80075f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d14b      	bne.n	8007692 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800760e:	461a      	mov	r2, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	791b      	ldrb	r3, [r3, #4]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d128      	bne.n	8007670 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762a:	2b00      	cmp	r3, #0
 800762c:	d110      	bne.n	8007650 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007648:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	e00f      	b.n	8007670 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	440a      	add	r2, r1
 8007666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800766a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800766e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	0151      	lsls	r1, r2, #5
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	440a      	add	r2, r1
 8007686:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800768a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	e166      	b.n	8007960 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	0151      	lsls	r1, r2, #5
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	440a      	add	r2, r1
 80076a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076b0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	791b      	ldrb	r3, [r3, #4]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d015      	beq.n	80076e6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 814e 	beq.w	8007960 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	2101      	movs	r1, #1
 80076d6:	fa01 f303 	lsl.w	r3, r1, r3
 80076da:	69f9      	ldr	r1, [r7, #28]
 80076dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076e0:	4313      	orrs	r3, r2
 80076e2:	634b      	str	r3, [r1, #52]	@ 0x34
 80076e4:	e13c      	b.n	8007960 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d110      	bne.n	8007718 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	69fa      	ldr	r2, [r7, #28]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007710:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	e00f      	b.n	8007738 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	0151      	lsls	r1, r2, #5
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	440a      	add	r2, r1
 800772e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007736:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	68d9      	ldr	r1, [r3, #12]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	781a      	ldrb	r2, [r3, #0]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	b298      	uxth	r0, r3
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	4603      	mov	r3, r0
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f9b9 	bl	8007ac4 <USB_WritePacket>
 8007752:	e105      	b.n	8007960 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800776e:	0cdb      	lsrs	r3, r3, #19
 8007770:	04db      	lsls	r3, r3, #19
 8007772:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	440a      	add	r2, r1
 800778a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800778e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007792:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007796:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d132      	bne.n	8007804 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6a1b      	ldr	r3, [r3, #32]
 80077c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077cc:	69b9      	ldr	r1, [r7, #24]
 80077ce:	0148      	lsls	r0, r1, #5
 80077d0:	69f9      	ldr	r1, [r7, #28]
 80077d2:	4401      	add	r1, r0
 80077d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80077d8:	4313      	orrs	r3, r2
 80077da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	0151      	lsls	r1, r2, #5
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	440a      	add	r2, r1
 80077f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077fa:	6113      	str	r3, [r2, #16]
 80077fc:	e062      	b.n	80078c4 <USB_EPStartXfer+0x490>
 80077fe:	bf00      	nop
 8007800:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d123      	bne.n	8007854 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007818:	691a      	ldr	r2, [r3, #16]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007822:	69b9      	ldr	r1, [r7, #24]
 8007824:	0148      	lsls	r0, r1, #5
 8007826:	69f9      	ldr	r1, [r7, #28]
 8007828:	4401      	add	r1, r0
 800782a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800782e:	4313      	orrs	r3, r2
 8007830:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800784c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007850:	6113      	str	r3, [r2, #16]
 8007852:	e037      	b.n	80078c4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	4413      	add	r3, r2
 800785e:	1e5a      	subs	r2, r3, #1
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	fbb2 f3f3 	udiv	r3, r2, r3
 8007868:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	8afa      	ldrh	r2, [r7, #22]
 8007870:	fb03 f202 	mul.w	r2, r3, r2
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007884:	691a      	ldr	r2, [r3, #16]
 8007886:	8afb      	ldrh	r3, [r7, #22]
 8007888:	04d9      	lsls	r1, r3, #19
 800788a:	4b38      	ldr	r3, [pc, #224]	@ (800796c <USB_EPStartXfer+0x538>)
 800788c:	400b      	ands	r3, r1
 800788e:	69b9      	ldr	r1, [r7, #24]
 8007890:	0148      	lsls	r0, r1, #5
 8007892:	69f9      	ldr	r1, [r7, #28]
 8007894:	4401      	add	r1, r0
 8007896:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800789a:	4313      	orrs	r3, r2
 800789c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078b4:	69b9      	ldr	r1, [r7, #24]
 80078b6:	0148      	lsls	r0, r1, #5
 80078b8:	69f9      	ldr	r1, [r7, #28]
 80078ba:	4401      	add	r1, r0
 80078bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078c0:	4313      	orrs	r3, r2
 80078c2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d10d      	bne.n	80078e6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d009      	beq.n	80078e6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	68d9      	ldr	r1, [r3, #12]
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e2:	460a      	mov	r2, r1
 80078e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	791b      	ldrb	r3, [r3, #4]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d128      	bne.n	8007940 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d110      	bne.n	8007920 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007918:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800791c:	6013      	str	r3, [r2, #0]
 800791e:	e00f      	b.n	8007940 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	0151      	lsls	r1, r2, #5
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	440a      	add	r2, r1
 8007936:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800793a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800793e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	0151      	lsls	r1, r2, #5
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	440a      	add	r2, r1
 8007956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800795a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800795e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3720      	adds	r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	1ff80000 	.word	0x1ff80000

08007970 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	785b      	ldrb	r3, [r3, #1]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d14a      	bne.n	8007a24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079a6:	f040 8086 	bne.w	8007ab6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	7812      	ldrb	r2, [r2, #0]
 80079be:	0151      	lsls	r1, r2, #5
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	440a      	add	r2, r1
 80079c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80079cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	7812      	ldrb	r2, [r2, #0]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d902      	bls.n	8007a08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	75fb      	strb	r3, [r7, #23]
          break;
 8007a06:	e056      	b.n	8007ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a20:	d0e7      	beq.n	80079f2 <USB_EPStopXfer+0x82>
 8007a22:	e048      	b.n	8007ab6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a3c:	d13b      	bne.n	8007ab6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	7812      	ldrb	r2, [r2, #0]
 8007a52:	0151      	lsls	r1, r2, #5
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	440a      	add	r2, r1
 8007a58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	7812      	ldrb	r2, [r2, #0]
 8007a76:	0151      	lsls	r1, r2, #5
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	440a      	add	r2, r1
 8007a7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d902      	bls.n	8007a9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	75fb      	strb	r3, [r7, #23]
          break;
 8007a9a:	e00c      	b.n	8007ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ab4:	d0e7      	beq.n	8007a86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b089      	sub	sp, #36	@ 0x24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	4611      	mov	r1, r2
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	71fb      	strb	r3, [r7, #7]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d123      	bne.n	8007b32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007aea:	88bb      	ldrh	r3, [r7, #4]
 8007aec:	3303      	adds	r3, #3
 8007aee:	089b      	lsrs	r3, r3, #2
 8007af0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007af2:	2300      	movs	r3, #0
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	e018      	b.n	8007b2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	031a      	lsls	r2, r3, #12
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b04:	461a      	mov	r2, r3
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	3301      	adds	r3, #1
 8007b16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	3301      	adds	r3, #1
 8007b22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	3301      	adds	r3, #1
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d3e2      	bcc.n	8007af8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3724      	adds	r7, #36	@ 0x24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b08b      	sub	sp, #44	@ 0x2c
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b56:	88fb      	ldrh	r3, [r7, #6]
 8007b58:	089b      	lsrs	r3, r3, #2
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b5e:	88fb      	ldrh	r3, [r7, #6]
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b66:	2300      	movs	r3, #0
 8007b68:	623b      	str	r3, [r7, #32]
 8007b6a:	e014      	b.n	8007b96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b80:	3301      	adds	r3, #1
 8007b82:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b86:	3301      	adds	r3, #1
 8007b88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	3301      	adds	r3, #1
 8007b94:	623b      	str	r3, [r7, #32]
 8007b96:	6a3a      	ldr	r2, [r7, #32]
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d3e6      	bcc.n	8007b6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b9e:	8bfb      	ldrh	r3, [r7, #30]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d01e      	beq.n	8007be2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f107 0310 	add.w	r3, r7, #16
 8007bb4:	6812      	ldr	r2, [r2, #0]
 8007bb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	701a      	strb	r2, [r3, #0]
      i++;
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	623b      	str	r3, [r7, #32]
      pDest++;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007bd6:	8bfb      	ldrh	r3, [r7, #30]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bdc:	8bfb      	ldrh	r3, [r7, #30]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1ea      	bne.n	8007bb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	372c      	adds	r7, #44	@ 0x2c
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	785b      	ldrb	r3, [r3, #1]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d12c      	bne.n	8007c66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	db12      	blt.n	8007c44 <USB_EPSetStall+0x54>
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00f      	beq.n	8007c44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	0151      	lsls	r1, r2, #5
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	440a      	add	r2, r1
 8007c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	0151      	lsls	r1, r2, #5
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	440a      	add	r2, r1
 8007c5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	e02b      	b.n	8007cbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	db12      	blt.n	8007c9e <USB_EPSetStall+0xae>
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00f      	beq.n	8007c9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	0151      	lsls	r1, r2, #5
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	440a      	add	r2, r1
 8007c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	0151      	lsls	r1, r2, #5
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	440a      	add	r2, r1
 8007cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007cbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d128      	bne.n	8007d3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	791b      	ldrb	r3, [r3, #4]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d003      	beq.n	8007d18 <USB_EPClearStall+0x4c>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	791b      	ldrb	r3, [r3, #4]
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d138      	bne.n	8007d8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	0151      	lsls	r1, r2, #5
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	440a      	add	r2, r1
 8007d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	e027      	b.n	8007d8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	0151      	lsls	r1, r2, #5
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	440a      	add	r2, r1
 8007d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	791b      	ldrb	r3, [r3, #4]
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d003      	beq.n	8007d6a <USB_EPClearStall+0x9e>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	791b      	ldrb	r3, [r3, #4]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d10f      	bne.n	8007d8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	0151      	lsls	r1, r2, #5
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	440a      	add	r2, r1
 8007d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007db6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007dba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007dcc:	68f9      	ldr	r1, [r7, #12]
 8007dce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e12:	f023 0302 	bic.w	r3, r3, #2
 8007e16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e40:	f023 0303 	bic.w	r3, r3, #3
 8007e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e54:	f043 0302 	orr.w	r3, r3, #2
 8007e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e80:	68fb      	ldr	r3, [r7, #12]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	0c1b      	lsrs	r3, r3, #16
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	b29b      	uxth	r3, r3
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b085      	sub	sp, #20
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	4013      	ands	r3, r2
 8007f22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f24:	68bb      	ldr	r3, [r7, #8]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b087      	sub	sp, #28
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	f003 030f 	and.w	r3, r3, #15
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f62:	01db      	lsls	r3, r3, #7
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f80:	68bb      	ldr	r3, [r7, #8]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	371c      	adds	r7, #28
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fc4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007fc8:	f023 0307 	bic.w	r3, r3, #7
 8007fcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fe0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	333c      	adds	r3, #60	@ 0x3c
 8008006:	3304      	adds	r3, #4
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	4a26      	ldr	r2, [pc, #152]	@ (80080a8 <USB_EP0_OutStart+0xb8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d90a      	bls.n	800802a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008024:	d101      	bne.n	800802a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	e037      	b.n	800809a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008030:	461a      	mov	r2, r3
 8008032:	2300      	movs	r3, #0
 8008034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008044:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008058:	f043 0318 	orr.w	r3, r3, #24
 800805c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800806c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008070:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008072:	7afb      	ldrb	r3, [r7, #11]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d10f      	bne.n	8008098 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800807e:	461a      	mov	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008092:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008096:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	4f54300a 	.word	0x4f54300a

080080ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3301      	adds	r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080c4:	d901      	bls.n	80080ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e01b      	b.n	8008102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	daf2      	bge.n	80080b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f043 0201 	orr.w	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3301      	adds	r3, #1
 80080e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080ee:	d901      	bls.n	80080f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e006      	b.n	8008102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d0f0      	beq.n	80080e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
	...

08008110 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800811c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008120:	f002 fc9a 	bl	800aa58 <USBD_static_malloc>
 8008124:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d109      	bne.n	8008140 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	32b0      	adds	r2, #176	@ 0xb0
 8008136:	2100      	movs	r1, #0
 8008138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800813c:	2302      	movs	r3, #2
 800813e:	e0d4      	b.n	80082ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008140:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008144:	2100      	movs	r1, #0
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f002 fcca 	bl	800aae0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	32b0      	adds	r2, #176	@ 0xb0
 8008156:	68f9      	ldr	r1, [r7, #12]
 8008158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	32b0      	adds	r2, #176	@ 0xb0
 8008166:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	7c1b      	ldrb	r3, [r3, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d138      	bne.n	80081ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008178:	4b5e      	ldr	r3, [pc, #376]	@ (80082f4 <USBD_CDC_Init+0x1e4>)
 800817a:	7819      	ldrb	r1, [r3, #0]
 800817c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008180:	2202      	movs	r2, #2
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f002 fb45 	bl	800a812 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008188:	4b5a      	ldr	r3, [pc, #360]	@ (80082f4 <USBD_CDC_Init+0x1e4>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	f003 020f 	and.w	r2, r3, #15
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	440b      	add	r3, r1
 800819c:	3324      	adds	r3, #36	@ 0x24
 800819e:	2201      	movs	r2, #1
 80081a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80081a2:	4b55      	ldr	r3, [pc, #340]	@ (80082f8 <USBD_CDC_Init+0x1e8>)
 80081a4:	7819      	ldrb	r1, [r3, #0]
 80081a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081aa:	2202      	movs	r2, #2
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f002 fb30 	bl	800a812 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80081b2:	4b51      	ldr	r3, [pc, #324]	@ (80082f8 <USBD_CDC_Init+0x1e8>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	f003 020f 	and.w	r2, r3, #15
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	4613      	mov	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80081ca:	2201      	movs	r2, #1
 80081cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80081ce:	4b4b      	ldr	r3, [pc, #300]	@ (80082fc <USBD_CDC_Init+0x1ec>)
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	f003 020f 	and.w	r2, r3, #15
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	3326      	adds	r3, #38	@ 0x26
 80081e4:	2210      	movs	r2, #16
 80081e6:	801a      	strh	r2, [r3, #0]
 80081e8:	e035      	b.n	8008256 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80081ea:	4b42      	ldr	r3, [pc, #264]	@ (80082f4 <USBD_CDC_Init+0x1e4>)
 80081ec:	7819      	ldrb	r1, [r3, #0]
 80081ee:	2340      	movs	r3, #64	@ 0x40
 80081f0:	2202      	movs	r2, #2
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f002 fb0d 	bl	800a812 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80081f8:	4b3e      	ldr	r3, [pc, #248]	@ (80082f4 <USBD_CDC_Init+0x1e4>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	f003 020f 	and.w	r2, r3, #15
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	4613      	mov	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	440b      	add	r3, r1
 800820c:	3324      	adds	r3, #36	@ 0x24
 800820e:	2201      	movs	r2, #1
 8008210:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008212:	4b39      	ldr	r3, [pc, #228]	@ (80082f8 <USBD_CDC_Init+0x1e8>)
 8008214:	7819      	ldrb	r1, [r3, #0]
 8008216:	2340      	movs	r3, #64	@ 0x40
 8008218:	2202      	movs	r2, #2
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f002 faf9 	bl	800a812 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008220:	4b35      	ldr	r3, [pc, #212]	@ (80082f8 <USBD_CDC_Init+0x1e8>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	f003 020f 	and.w	r2, r3, #15
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	440b      	add	r3, r1
 8008234:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008238:	2201      	movs	r2, #1
 800823a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800823c:	4b2f      	ldr	r3, [pc, #188]	@ (80082fc <USBD_CDC_Init+0x1ec>)
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	f003 020f 	and.w	r2, r3, #15
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	4613      	mov	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	440b      	add	r3, r1
 8008250:	3326      	adds	r3, #38	@ 0x26
 8008252:	2210      	movs	r2, #16
 8008254:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008256:	4b29      	ldr	r3, [pc, #164]	@ (80082fc <USBD_CDC_Init+0x1ec>)
 8008258:	7819      	ldrb	r1, [r3, #0]
 800825a:	2308      	movs	r3, #8
 800825c:	2203      	movs	r2, #3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f002 fad7 	bl	800a812 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008264:	4b25      	ldr	r3, [pc, #148]	@ (80082fc <USBD_CDC_Init+0x1ec>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	f003 020f 	and.w	r2, r3, #15
 800826c:	6879      	ldr	r1, [r7, #4]
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	440b      	add	r3, r1
 8008278:	3324      	adds	r3, #36	@ 0x24
 800827a:	2201      	movs	r2, #1
 800827c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	33b0      	adds	r3, #176	@ 0xb0
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80082b4:	2302      	movs	r3, #2
 80082b6:	e018      	b.n	80082ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	7c1b      	ldrb	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082c0:	4b0d      	ldr	r3, [pc, #52]	@ (80082f8 <USBD_CDC_Init+0x1e8>)
 80082c2:	7819      	ldrb	r1, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f002 fb8e 	bl	800a9f0 <USBD_LL_PrepareReceive>
 80082d4:	e008      	b.n	80082e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082d6:	4b08      	ldr	r3, [pc, #32]	@ (80082f8 <USBD_CDC_Init+0x1e8>)
 80082d8:	7819      	ldrb	r1, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082e0:	2340      	movs	r3, #64	@ 0x40
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f002 fb84 	bl	800a9f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	200000c3 	.word	0x200000c3
 80082f8:	200000c4 	.word	0x200000c4
 80082fc:	200000c5 	.word	0x200000c5

08008300 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800830c:	4b3a      	ldr	r3, [pc, #232]	@ (80083f8 <USBD_CDC_DeInit+0xf8>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f002 faa3 	bl	800a85e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008318:	4b37      	ldr	r3, [pc, #220]	@ (80083f8 <USBD_CDC_DeInit+0xf8>)
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	f003 020f 	and.w	r2, r3, #15
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	440b      	add	r3, r1
 800832c:	3324      	adds	r3, #36	@ 0x24
 800832e:	2200      	movs	r2, #0
 8008330:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008332:	4b32      	ldr	r3, [pc, #200]	@ (80083fc <USBD_CDC_DeInit+0xfc>)
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f002 fa90 	bl	800a85e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800833e:	4b2f      	ldr	r3, [pc, #188]	@ (80083fc <USBD_CDC_DeInit+0xfc>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	f003 020f 	and.w	r2, r3, #15
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	4613      	mov	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008356:	2200      	movs	r2, #0
 8008358:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800835a:	4b29      	ldr	r3, [pc, #164]	@ (8008400 <USBD_CDC_DeInit+0x100>)
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f002 fa7c 	bl	800a85e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008366:	4b26      	ldr	r3, [pc, #152]	@ (8008400 <USBD_CDC_DeInit+0x100>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	f003 020f 	and.w	r2, r3, #15
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	3324      	adds	r3, #36	@ 0x24
 800837c:	2200      	movs	r2, #0
 800837e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008380:	4b1f      	ldr	r3, [pc, #124]	@ (8008400 <USBD_CDC_DeInit+0x100>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	f003 020f 	and.w	r2, r3, #15
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	440b      	add	r3, r1
 8008394:	3326      	adds	r3, #38	@ 0x26
 8008396:	2200      	movs	r2, #0
 8008398:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	32b0      	adds	r2, #176	@ 0xb0
 80083a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01f      	beq.n	80083ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	33b0      	adds	r3, #176	@ 0xb0
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	32b0      	adds	r2, #176	@ 0xb0
 80083ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f002 fb50 	bl	800aa74 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	32b0      	adds	r2, #176	@ 0xb0
 80083de:	2100      	movs	r1, #0
 80083e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	200000c3 	.word	0x200000c3
 80083fc:	200000c4 	.word	0x200000c4
 8008400:	200000c5 	.word	0x200000c5

08008404 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	32b0      	adds	r2, #176	@ 0xb0
 8008418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008430:	2303      	movs	r3, #3
 8008432:	e0bf      	b.n	80085b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800843c:	2b00      	cmp	r3, #0
 800843e:	d050      	beq.n	80084e2 <USBD_CDC_Setup+0xde>
 8008440:	2b20      	cmp	r3, #32
 8008442:	f040 80af 	bne.w	80085a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	88db      	ldrh	r3, [r3, #6]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d03a      	beq.n	80084c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	b25b      	sxtb	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	da1b      	bge.n	8008490 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	33b0      	adds	r3, #176	@ 0xb0
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800846e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	88d2      	ldrh	r2, [r2, #6]
 8008474:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	88db      	ldrh	r3, [r3, #6]
 800847a:	2b07      	cmp	r3, #7
 800847c:	bf28      	it	cs
 800847e:	2307      	movcs	r3, #7
 8008480:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	89fa      	ldrh	r2, [r7, #14]
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f001 fd93 	bl	8009fb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800848e:	e090      	b.n	80085b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	785a      	ldrb	r2, [r3, #1]
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	88db      	ldrh	r3, [r3, #6]
 800849e:	2b3f      	cmp	r3, #63	@ 0x3f
 80084a0:	d803      	bhi.n	80084aa <USBD_CDC_Setup+0xa6>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	88db      	ldrh	r3, [r3, #6]
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	e000      	b.n	80084ac <USBD_CDC_Setup+0xa8>
 80084aa:	2240      	movs	r2, #64	@ 0x40
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80084b2:	6939      	ldr	r1, [r7, #16]
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80084ba:	461a      	mov	r2, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 fda5 	bl	800a00c <USBD_CtlPrepareRx>
      break;
 80084c2:	e076      	b.n	80085b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	33b0      	adds	r3, #176	@ 0xb0
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	7850      	ldrb	r0, [r2, #1]
 80084da:	2200      	movs	r2, #0
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	4798      	blx	r3
      break;
 80084e0:	e067      	b.n	80085b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	785b      	ldrb	r3, [r3, #1]
 80084e6:	2b0b      	cmp	r3, #11
 80084e8:	d851      	bhi.n	800858e <USBD_CDC_Setup+0x18a>
 80084ea:	a201      	add	r2, pc, #4	@ (adr r2, 80084f0 <USBD_CDC_Setup+0xec>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008521 	.word	0x08008521
 80084f4:	0800859d 	.word	0x0800859d
 80084f8:	0800858f 	.word	0x0800858f
 80084fc:	0800858f 	.word	0x0800858f
 8008500:	0800858f 	.word	0x0800858f
 8008504:	0800858f 	.word	0x0800858f
 8008508:	0800858f 	.word	0x0800858f
 800850c:	0800858f 	.word	0x0800858f
 8008510:	0800858f 	.word	0x0800858f
 8008514:	0800858f 	.word	0x0800858f
 8008518:	0800854b 	.word	0x0800854b
 800851c:	08008575 	.word	0x08008575
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b03      	cmp	r3, #3
 800852a:	d107      	bne.n	800853c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800852c:	f107 030a 	add.w	r3, r7, #10
 8008530:	2202      	movs	r2, #2
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 fd3d 	bl	8009fb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800853a:	e032      	b.n	80085a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f001 fcbb 	bl	8009eba <USBD_CtlError>
            ret = USBD_FAIL;
 8008544:	2303      	movs	r3, #3
 8008546:	75fb      	strb	r3, [r7, #23]
          break;
 8008548:	e02b      	b.n	80085a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b03      	cmp	r3, #3
 8008554:	d107      	bne.n	8008566 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008556:	f107 030d 	add.w	r3, r7, #13
 800855a:	2201      	movs	r2, #1
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 fd28 	bl	8009fb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008564:	e01d      	b.n	80085a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f001 fca6 	bl	8009eba <USBD_CtlError>
            ret = USBD_FAIL;
 800856e:	2303      	movs	r3, #3
 8008570:	75fb      	strb	r3, [r7, #23]
          break;
 8008572:	e016      	b.n	80085a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b03      	cmp	r3, #3
 800857e:	d00f      	beq.n	80085a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 fc99 	bl	8009eba <USBD_CtlError>
            ret = USBD_FAIL;
 8008588:	2303      	movs	r3, #3
 800858a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800858c:	e008      	b.n	80085a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 fc92 	bl	8009eba <USBD_CtlError>
          ret = USBD_FAIL;
 8008596:	2303      	movs	r3, #3
 8008598:	75fb      	strb	r3, [r7, #23]
          break;
 800859a:	e002      	b.n	80085a2 <USBD_CDC_Setup+0x19e>
          break;
 800859c:	bf00      	nop
 800859e:	e008      	b.n	80085b2 <USBD_CDC_Setup+0x1ae>
          break;
 80085a0:	bf00      	nop
      }
      break;
 80085a2:	e006      	b.n	80085b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f001 fc87 	bl	8009eba <USBD_CtlError>
      ret = USBD_FAIL;
 80085ac:	2303      	movs	r3, #3
 80085ae:	75fb      	strb	r3, [r7, #23]
      break;
 80085b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	32b0      	adds	r2, #176	@ 0xb0
 80085da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e065      	b.n	80086b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	32b0      	adds	r2, #176	@ 0xb0
 80085f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	f003 020f 	and.w	r2, r3, #15
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	440b      	add	r3, r1
 8008608:	3318      	adds	r3, #24
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d02f      	beq.n	8008670 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	f003 020f 	and.w	r2, r3, #15
 8008616:	6879      	ldr	r1, [r7, #4]
 8008618:	4613      	mov	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	440b      	add	r3, r1
 8008622:	3318      	adds	r3, #24
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	78fb      	ldrb	r3, [r7, #3]
 8008628:	f003 010f 	and.w	r1, r3, #15
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	460b      	mov	r3, r1
 8008630:	00db      	lsls	r3, r3, #3
 8008632:	440b      	add	r3, r1
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4403      	add	r3, r0
 8008638:	331c      	adds	r3, #28
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008640:	fb01 f303 	mul.w	r3, r1, r3
 8008644:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008646:	2b00      	cmp	r3, #0
 8008648:	d112      	bne.n	8008670 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	f003 020f 	and.w	r2, r3, #15
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	4613      	mov	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	440b      	add	r3, r1
 800865c:	3318      	adds	r3, #24
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008662:	78f9      	ldrb	r1, [r7, #3]
 8008664:	2300      	movs	r3, #0
 8008666:	2200      	movs	r2, #0
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f002 f9a0 	bl	800a9ae <USBD_LL_Transmit>
 800866e:	e01f      	b.n	80086b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2200      	movs	r2, #0
 8008674:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	33b0      	adds	r3, #176	@ 0xb0
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d010      	beq.n	80086b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	33b0      	adds	r3, #176	@ 0xb0
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80086ac:	78fa      	ldrb	r2, [r7, #3]
 80086ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	32b0      	adds	r2, #176	@ 0xb0
 80086d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	32b0      	adds	r2, #176	@ 0xb0
 80086e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e01a      	b.n	8008722 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f002 f99e 	bl	800aa32 <USBD_LL_GetRxDataSize>
 80086f6:	4602      	mov	r2, r0
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	33b0      	adds	r3, #176	@ 0xb0
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800871c:	4611      	mov	r1, r2
 800871e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	32b0      	adds	r2, #176	@ 0xb0
 800873c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008740:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008748:	2303      	movs	r3, #3
 800874a:	e024      	b.n	8008796 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	33b0      	adds	r3, #176	@ 0xb0
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d019      	beq.n	8008794 <USBD_CDC_EP0_RxReady+0x6a>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008766:	2bff      	cmp	r3, #255	@ 0xff
 8008768:	d014      	beq.n	8008794 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	33b0      	adds	r3, #176	@ 0xb0
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008782:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800878a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	22ff      	movs	r2, #255	@ 0xff
 8008790:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087a8:	2182      	movs	r1, #130	@ 0x82
 80087aa:	4818      	ldr	r0, [pc, #96]	@ (800880c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087ac:	f000 fd4f 	bl	800924e <USBD_GetEpDesc>
 80087b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087b2:	2101      	movs	r1, #1
 80087b4:	4815      	ldr	r0, [pc, #84]	@ (800880c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087b6:	f000 fd4a 	bl	800924e <USBD_GetEpDesc>
 80087ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087bc:	2181      	movs	r1, #129	@ 0x81
 80087be:	4813      	ldr	r0, [pc, #76]	@ (800880c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087c0:	f000 fd45 	bl	800924e <USBD_GetEpDesc>
 80087c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2210      	movs	r2, #16
 80087d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d006      	beq.n	80087e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	2200      	movs	r2, #0
 80087dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087e0:	711a      	strb	r2, [r3, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d006      	beq.n	80087fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087f4:	711a      	strb	r2, [r3, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2243      	movs	r2, #67	@ 0x43
 80087fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008800:	4b02      	ldr	r3, [pc, #8]	@ (800880c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008802:	4618      	mov	r0, r3
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	20000080 	.word	0x20000080

08008810 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008818:	2182      	movs	r1, #130	@ 0x82
 800881a:	4818      	ldr	r0, [pc, #96]	@ (800887c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800881c:	f000 fd17 	bl	800924e <USBD_GetEpDesc>
 8008820:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008822:	2101      	movs	r1, #1
 8008824:	4815      	ldr	r0, [pc, #84]	@ (800887c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008826:	f000 fd12 	bl	800924e <USBD_GetEpDesc>
 800882a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800882c:	2181      	movs	r1, #129	@ 0x81
 800882e:	4813      	ldr	r0, [pc, #76]	@ (800887c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008830:	f000 fd0d 	bl	800924e <USBD_GetEpDesc>
 8008834:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	2210      	movs	r2, #16
 8008840:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d006      	beq.n	8008856 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	2200      	movs	r2, #0
 800884c:	711a      	strb	r2, [r3, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f042 0202 	orr.w	r2, r2, #2
 8008854:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d006      	beq.n	800886a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	711a      	strb	r2, [r3, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f042 0202 	orr.w	r2, r2, #2
 8008868:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2243      	movs	r2, #67	@ 0x43
 800886e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008870:	4b02      	ldr	r3, [pc, #8]	@ (800887c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20000080 	.word	0x20000080

08008880 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008888:	2182      	movs	r1, #130	@ 0x82
 800888a:	4818      	ldr	r0, [pc, #96]	@ (80088ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800888c:	f000 fcdf 	bl	800924e <USBD_GetEpDesc>
 8008890:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008892:	2101      	movs	r1, #1
 8008894:	4815      	ldr	r0, [pc, #84]	@ (80088ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008896:	f000 fcda 	bl	800924e <USBD_GetEpDesc>
 800889a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800889c:	2181      	movs	r1, #129	@ 0x81
 800889e:	4813      	ldr	r0, [pc, #76]	@ (80088ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088a0:	f000 fcd5 	bl	800924e <USBD_GetEpDesc>
 80088a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d002      	beq.n	80088b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2210      	movs	r2, #16
 80088b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d006      	beq.n	80088c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088c0:	711a      	strb	r2, [r3, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d006      	beq.n	80088da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088d4:	711a      	strb	r2, [r3, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2243      	movs	r2, #67	@ 0x43
 80088de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088e0:	4b02      	ldr	r3, [pc, #8]	@ (80088ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3718      	adds	r7, #24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	20000080 	.word	0x20000080

080088f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	220a      	movs	r2, #10
 80088fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80088fe:	4b03      	ldr	r3, [pc, #12]	@ (800890c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	2000003c 	.word	0x2000003c

08008910 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008920:	2303      	movs	r3, #3
 8008922:	e009      	b.n	8008938 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	33b0      	adds	r3, #176	@ 0xb0
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	32b0      	adds	r2, #176	@ 0xb0
 800895a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008966:	2303      	movs	r3, #3
 8008968:	e008      	b.n	800897c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	371c      	adds	r7, #28
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	32b0      	adds	r2, #176	@ 0xb0
 800899c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e004      	b.n	80089b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
	...

080089c4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	32b0      	adds	r2, #176	@ 0xb0
 80089d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089da:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80089dc:	2301      	movs	r3, #1
 80089de:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e025      	b.n	8008a36 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d11f      	bne.n	8008a34 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80089fc:	4b10      	ldr	r3, [pc, #64]	@ (8008a40 <USBD_CDC_TransmitPacket+0x7c>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	f003 020f 	and.w	r2, r3, #15
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4403      	add	r3, r0
 8008a16:	3318      	adds	r3, #24
 8008a18:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008a1a:	4b09      	ldr	r3, [pc, #36]	@ (8008a40 <USBD_CDC_TransmitPacket+0x7c>)
 8008a1c:	7819      	ldrb	r1, [r3, #0]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f001 ffbf 	bl	800a9ae <USBD_LL_Transmit>

    ret = USBD_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	200000c3 	.word	0x200000c3

08008a44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	32b0      	adds	r2, #176	@ 0xb0
 8008a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	32b0      	adds	r2, #176	@ 0xb0
 8008a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e018      	b.n	8008aa4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	7c1b      	ldrb	r3, [r3, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10a      	bne.n	8008a90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008aac <USBD_CDC_ReceivePacket+0x68>)
 8008a7c:	7819      	ldrb	r1, [r3, #0]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 ffb1 	bl	800a9f0 <USBD_LL_PrepareReceive>
 8008a8e:	e008      	b.n	8008aa2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a90:	4b06      	ldr	r3, [pc, #24]	@ (8008aac <USBD_CDC_ReceivePacket+0x68>)
 8008a92:	7819      	ldrb	r1, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a9a:	2340      	movs	r3, #64	@ 0x40
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f001 ffa7 	bl	800a9f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	200000c4 	.word	0x200000c4

08008ab0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e01f      	b.n	8008b08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	79fa      	ldrb	r2, [r7, #7]
 8008afa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f001 fe21 	bl	800a744 <USBD_LL_Init>
 8008b02:	4603      	mov	r3, r0
 8008b04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e025      	b.n	8008b74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	32ae      	adds	r2, #174	@ 0xae
 8008b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00f      	beq.n	8008b64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	32ae      	adds	r2, #174	@ 0xae
 8008b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b54:	f107 020e 	add.w	r2, r7, #14
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f001 fe29 	bl	800a7dc <USBD_LL_Start>
 8008b8a:	4603      	mov	r3, r0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d009      	beq.n	8008bd8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	78fa      	ldrb	r2, [r7, #3]
 8008bce:	4611      	mov	r1, r2
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	4798      	blx	r3
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	78fa      	ldrb	r2, [r7, #3]
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	4798      	blx	r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f001 f90c 	bl	8009e46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008c4a:	f003 031f 	and.w	r3, r3, #31
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d01a      	beq.n	8008c88 <USBD_LL_SetupStage+0x72>
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d822      	bhi.n	8008c9c <USBD_LL_SetupStage+0x86>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <USBD_LL_SetupStage+0x4a>
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d00a      	beq.n	8008c74 <USBD_LL_SetupStage+0x5e>
 8008c5e:	e01d      	b.n	8008c9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fb63 	bl	8009334 <USBD_StdDevReq>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	73fb      	strb	r3, [r7, #15]
      break;
 8008c72:	e020      	b.n	8008cb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fbcb 	bl	8009418 <USBD_StdItfReq>
 8008c82:	4603      	mov	r3, r0
 8008c84:	73fb      	strb	r3, [r7, #15]
      break;
 8008c86:	e016      	b.n	8008cb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fc2d 	bl	80094f0 <USBD_StdEPReq>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]
      break;
 8008c9a:	e00c      	b.n	8008cb6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ca2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 fdf6 	bl	800a89c <USBD_LL_StallEP>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb4:	bf00      	nop
  }

  return ret;
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008cd2:	7afb      	ldrb	r3, [r7, #11]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d16e      	bne.n	8008db6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008cde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	f040 8098 	bne.w	8008e1c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d913      	bls.n	8008d20 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	1ad2      	subs	r2, r2, r3
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	bf28      	it	cs
 8008d12:	4613      	movcs	r3, r2
 8008d14:	461a      	mov	r2, r3
 8008d16:	6879      	ldr	r1, [r7, #4]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f001 f994 	bl	800a046 <USBD_CtlContinueRx>
 8008d1e:	e07d      	b.n	8008e1c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d26:	f003 031f 	and.w	r3, r3, #31
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d014      	beq.n	8008d58 <USBD_LL_DataOutStage+0x98>
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d81d      	bhi.n	8008d6e <USBD_LL_DataOutStage+0xae>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <USBD_LL_DataOutStage+0x7c>
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d003      	beq.n	8008d42 <USBD_LL_DataOutStage+0x82>
 8008d3a:	e018      	b.n	8008d6e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	75bb      	strb	r3, [r7, #22]
            break;
 8008d40:	e018      	b.n	8008d74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 fa64 	bl	800921a <USBD_CoreFindIF>
 8008d52:	4603      	mov	r3, r0
 8008d54:	75bb      	strb	r3, [r7, #22]
            break;
 8008d56:	e00d      	b.n	8008d74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	4619      	mov	r1, r3
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 fa66 	bl	8009234 <USBD_CoreFindEP>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	75bb      	strb	r3, [r7, #22]
            break;
 8008d6c:	e002      	b.n	8008d74 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75bb      	strb	r3, [r7, #22]
            break;
 8008d72:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008d74:	7dbb      	ldrb	r3, [r7, #22]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d119      	bne.n	8008dae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d113      	bne.n	8008dae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008d86:	7dba      	ldrb	r2, [r7, #22]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	32ae      	adds	r2, #174	@ 0xae
 8008d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00b      	beq.n	8008dae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008d96:	7dba      	ldrb	r2, [r7, #22]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008d9e:	7dba      	ldrb	r2, [r7, #22]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	32ae      	adds	r2, #174	@ 0xae
 8008da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f001 f95a 	bl	800a068 <USBD_CtlSendStatus>
 8008db4:	e032      	b.n	8008e1c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008db6:	7afb      	ldrb	r3, [r7, #11]
 8008db8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 fa37 	bl	8009234 <USBD_CoreFindEP>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dca:	7dbb      	ldrb	r3, [r7, #22]
 8008dcc:	2bff      	cmp	r3, #255	@ 0xff
 8008dce:	d025      	beq.n	8008e1c <USBD_LL_DataOutStage+0x15c>
 8008dd0:	7dbb      	ldrb	r3, [r7, #22]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d122      	bne.n	8008e1c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d117      	bne.n	8008e12 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008de2:	7dba      	ldrb	r2, [r7, #22]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	32ae      	adds	r2, #174	@ 0xae
 8008de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00f      	beq.n	8008e12 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008df2:	7dba      	ldrb	r2, [r7, #22]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008dfa:	7dba      	ldrb	r2, [r7, #22]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	32ae      	adds	r2, #174	@ 0xae
 8008e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	7afa      	ldrb	r2, [r7, #11]
 8008e08:	4611      	mov	r1, r2
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	4798      	blx	r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008e12:	7dfb      	ldrb	r3, [r7, #23]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	e000      	b.n	8008e1e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3718      	adds	r7, #24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b086      	sub	sp, #24
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	60f8      	str	r0, [r7, #12]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	607a      	str	r2, [r7, #4]
 8008e32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d16f      	bne.n	8008f1a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3314      	adds	r3, #20
 8008e3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d15a      	bne.n	8008f00 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	689a      	ldr	r2, [r3, #8]
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d914      	bls.n	8008e80 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	689a      	ldr	r2, [r3, #8]
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	1ad2      	subs	r2, r2, r3
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f001 f8bc 	bl	8009fea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e72:	2300      	movs	r3, #0
 8008e74:	2200      	movs	r2, #0
 8008e76:	2100      	movs	r1, #0
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f001 fdb9 	bl	800a9f0 <USBD_LL_PrepareReceive>
 8008e7e:	e03f      	b.n	8008f00 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d11c      	bne.n	8008ec6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d316      	bcc.n	8008ec6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d20f      	bcs.n	8008ec6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f001 f89d 	bl	8009fea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eb8:	2300      	movs	r3, #0
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f001 fd96 	bl	800a9f0 <USBD_LL_PrepareReceive>
 8008ec4:	e01c      	b.n	8008f00 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d10f      	bne.n	8008ef2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ef2:	2180      	movs	r1, #128	@ 0x80
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f001 fcd1 	bl	800a89c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f001 f8c7 	bl	800a08e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d03a      	beq.n	8008f80 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f7ff fe42 	bl	8008b94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008f18:	e032      	b.n	8008f80 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	4619      	mov	r1, r3
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 f985 	bl	8009234 <USBD_CoreFindEP>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	2bff      	cmp	r3, #255	@ 0xff
 8008f32:	d025      	beq.n	8008f80 <USBD_LL_DataInStage+0x15a>
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d122      	bne.n	8008f80 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d11c      	bne.n	8008f80 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008f46:	7dfa      	ldrb	r2, [r7, #23]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	32ae      	adds	r2, #174	@ 0xae
 8008f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d014      	beq.n	8008f80 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008f56:	7dfa      	ldrb	r2, [r7, #23]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008f5e:	7dfa      	ldrb	r2, [r7, #23]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	32ae      	adds	r2, #174	@ 0xae
 8008f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	7afa      	ldrb	r2, [r7, #11]
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	4798      	blx	r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008f76:	7dbb      	ldrb	r3, [r7, #22]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008f7c:	7dbb      	ldrb	r3, [r7, #22]
 8008f7e:	e000      	b.n	8008f82 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3718      	adds	r7, #24
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d014      	beq.n	8008ff0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00e      	beq.n	8008ff0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	6852      	ldr	r2, [r2, #4]
 8008fde:	b2d2      	uxtb	r2, r2
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008fec:	2303      	movs	r3, #3
 8008fee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ff0:	2340      	movs	r3, #64	@ 0x40
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f001 fc0b 	bl	800a812 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2240      	movs	r2, #64	@ 0x40
 8009008:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800900c:	2340      	movs	r3, #64	@ 0x40
 800900e:	2200      	movs	r2, #0
 8009010:	2180      	movs	r1, #128	@ 0x80
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 fbfd 	bl	800a812 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2240      	movs	r2, #64	@ 0x40
 8009022:	621a      	str	r2, [r3, #32]

  return ret;
 8009024:	7bfb      	ldrb	r3, [r7, #15]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800902e:	b480      	push	{r7}
 8009030:	b083      	sub	sp, #12
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	78fa      	ldrb	r2, [r7, #3]
 800903e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b04      	cmp	r3, #4
 8009060:	d006      	beq.n	8009070 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009068:	b2da      	uxtb	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2204      	movs	r2, #4
 8009074:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b04      	cmp	r3, #4
 8009098:	d106      	bne.n	80090a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d110      	bne.n	80090ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00b      	beq.n	80090ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d005      	beq.n	80090ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	32ae      	adds	r2, #174	@ 0xae
 800910c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009114:	2303      	movs	r3, #3
 8009116:	e01c      	b.n	8009152 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b03      	cmp	r3, #3
 8009122:	d115      	bne.n	8009150 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	32ae      	adds	r2, #174	@ 0xae
 800912e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009132:	6a1b      	ldr	r3, [r3, #32]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	32ae      	adds	r2, #174	@ 0xae
 8009142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009146:	6a1b      	ldr	r3, [r3, #32]
 8009148:	78fa      	ldrb	r2, [r7, #3]
 800914a:	4611      	mov	r1, r2
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	460b      	mov	r3, r1
 8009164:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	32ae      	adds	r2, #174	@ 0xae
 8009170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009178:	2303      	movs	r3, #3
 800917a:	e01c      	b.n	80091b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b03      	cmp	r3, #3
 8009186:	d115      	bne.n	80091b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	32ae      	adds	r2, #174	@ 0xae
 8009192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00b      	beq.n	80091b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	32ae      	adds	r2, #174	@ 0xae
 80091a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ac:	78fa      	ldrb	r2, [r7, #3]
 80091ae:	4611      	mov	r1, r2
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00e      	beq.n	8009210 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	6852      	ldr	r2, [r2, #4]
 80091fe:	b2d2      	uxtb	r2, r2
 8009200:	4611      	mov	r1, r2
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	4798      	blx	r3
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800920c:	2303      	movs	r3, #3
 800920e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009210:	7bfb      	ldrb	r3, [r7, #15]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800921a:	b480      	push	{r7}
 800921c:	b083      	sub	sp, #12
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	460b      	mov	r3, r1
 8009224:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009226:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009240:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009242:	4618      	mov	r0, r3
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b086      	sub	sp, #24
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009262:	2300      	movs	r3, #0
 8009264:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	885b      	ldrh	r3, [r3, #2]
 800926a:	b29b      	uxth	r3, r3
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	7812      	ldrb	r2, [r2, #0]
 8009270:	4293      	cmp	r3, r2
 8009272:	d91f      	bls.n	80092b4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800927a:	e013      	b.n	80092a4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800927c:	f107 030a 	add.w	r3, r7, #10
 8009280:	4619      	mov	r1, r3
 8009282:	6978      	ldr	r0, [r7, #20]
 8009284:	f000 f81b 	bl	80092be <USBD_GetNextDesc>
 8009288:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	785b      	ldrb	r3, [r3, #1]
 800928e:	2b05      	cmp	r3, #5
 8009290:	d108      	bne.n	80092a4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	789b      	ldrb	r3, [r3, #2]
 800929a:	78fa      	ldrb	r2, [r7, #3]
 800929c:	429a      	cmp	r2, r3
 800929e:	d008      	beq.n	80092b2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80092a0:	2300      	movs	r3, #0
 80092a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	885b      	ldrh	r3, [r3, #2]
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	897b      	ldrh	r3, [r7, #10]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d8e5      	bhi.n	800927c <USBD_GetEpDesc+0x2e>
 80092b0:	e000      	b.n	80092b4 <USBD_GetEpDesc+0x66>
          break;
 80092b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80092b4:	693b      	ldr	r3, [r7, #16]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80092be:	b480      	push	{r7}
 80092c0:	b085      	sub	sp, #20
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	881b      	ldrh	r3, [r3, #0]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	7812      	ldrb	r2, [r2, #0]
 80092d4:	4413      	add	r3, r2
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	461a      	mov	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4413      	add	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80092e8:	68fb      	ldr	r3, [r7, #12]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b087      	sub	sp, #28
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	3301      	adds	r3, #1
 800930c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009314:	8a3b      	ldrh	r3, [r7, #16]
 8009316:	021b      	lsls	r3, r3, #8
 8009318:	b21a      	sxth	r2, r3
 800931a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800931e:	4313      	orrs	r3, r2
 8009320:	b21b      	sxth	r3, r3
 8009322:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009324:	89fb      	ldrh	r3, [r7, #14]
}
 8009326:	4618      	mov	r0, r3
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
	...

08009334 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800934a:	2b40      	cmp	r3, #64	@ 0x40
 800934c:	d005      	beq.n	800935a <USBD_StdDevReq+0x26>
 800934e:	2b40      	cmp	r3, #64	@ 0x40
 8009350:	d857      	bhi.n	8009402 <USBD_StdDevReq+0xce>
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00f      	beq.n	8009376 <USBD_StdDevReq+0x42>
 8009356:	2b20      	cmp	r3, #32
 8009358:	d153      	bne.n	8009402 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	32ae      	adds	r2, #174	@ 0xae
 8009364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	4798      	blx	r3
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]
      break;
 8009374:	e04a      	b.n	800940c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	785b      	ldrb	r3, [r3, #1]
 800937a:	2b09      	cmp	r3, #9
 800937c:	d83b      	bhi.n	80093f6 <USBD_StdDevReq+0xc2>
 800937e:	a201      	add	r2, pc, #4	@ (adr r2, 8009384 <USBD_StdDevReq+0x50>)
 8009380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009384:	080093d9 	.word	0x080093d9
 8009388:	080093ed 	.word	0x080093ed
 800938c:	080093f7 	.word	0x080093f7
 8009390:	080093e3 	.word	0x080093e3
 8009394:	080093f7 	.word	0x080093f7
 8009398:	080093b7 	.word	0x080093b7
 800939c:	080093ad 	.word	0x080093ad
 80093a0:	080093f7 	.word	0x080093f7
 80093a4:	080093cf 	.word	0x080093cf
 80093a8:	080093c1 	.word	0x080093c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fa3c 	bl	800982c <USBD_GetDescriptor>
          break;
 80093b4:	e024      	b.n	8009400 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fba1 	bl	8009b00 <USBD_SetAddress>
          break;
 80093be:	e01f      	b.n	8009400 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fbe0 	bl	8009b88 <USBD_SetConfig>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73fb      	strb	r3, [r7, #15]
          break;
 80093cc:	e018      	b.n	8009400 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fc83 	bl	8009cdc <USBD_GetConfig>
          break;
 80093d6:	e013      	b.n	8009400 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fcb4 	bl	8009d48 <USBD_GetStatus>
          break;
 80093e0:	e00e      	b.n	8009400 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fce3 	bl	8009db0 <USBD_SetFeature>
          break;
 80093ea:	e009      	b.n	8009400 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fd07 	bl	8009e02 <USBD_ClrFeature>
          break;
 80093f4:	e004      	b.n	8009400 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fd5e 	bl	8009eba <USBD_CtlError>
          break;
 80093fe:	bf00      	nop
      }
      break;
 8009400:	e004      	b.n	800940c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fd58 	bl	8009eba <USBD_CtlError>
      break;
 800940a:	bf00      	nop
  }

  return ret;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop

08009418 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800942e:	2b40      	cmp	r3, #64	@ 0x40
 8009430:	d005      	beq.n	800943e <USBD_StdItfReq+0x26>
 8009432:	2b40      	cmp	r3, #64	@ 0x40
 8009434:	d852      	bhi.n	80094dc <USBD_StdItfReq+0xc4>
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <USBD_StdItfReq+0x26>
 800943a:	2b20      	cmp	r3, #32
 800943c:	d14e      	bne.n	80094dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009444:	b2db      	uxtb	r3, r3
 8009446:	3b01      	subs	r3, #1
 8009448:	2b02      	cmp	r3, #2
 800944a:	d840      	bhi.n	80094ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	889b      	ldrh	r3, [r3, #4]
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b01      	cmp	r3, #1
 8009454:	d836      	bhi.n	80094c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	889b      	ldrh	r3, [r3, #4]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff fedb 	bl	800921a <USBD_CoreFindIF>
 8009464:	4603      	mov	r3, r0
 8009466:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	2bff      	cmp	r3, #255	@ 0xff
 800946c:	d01d      	beq.n	80094aa <USBD_StdItfReq+0x92>
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d11a      	bne.n	80094aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009474:	7bba      	ldrb	r2, [r7, #14]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	32ae      	adds	r2, #174	@ 0xae
 800947a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00f      	beq.n	80094a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009484:	7bba      	ldrb	r2, [r7, #14]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800948c:	7bba      	ldrb	r2, [r7, #14]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	32ae      	adds	r2, #174	@ 0xae
 8009492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	4798      	blx	r3
 800949e:	4603      	mov	r3, r0
 80094a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094a2:	e004      	b.n	80094ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80094a4:	2303      	movs	r3, #3
 80094a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094a8:	e001      	b.n	80094ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80094aa:	2303      	movs	r3, #3
 80094ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	88db      	ldrh	r3, [r3, #6]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d110      	bne.n	80094d8 <USBD_StdItfReq+0xc0>
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10d      	bne.n	80094d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fdd3 	bl	800a068 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094c2:	e009      	b.n	80094d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fcf7 	bl	8009eba <USBD_CtlError>
          break;
 80094cc:	e004      	b.n	80094d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fcf2 	bl	8009eba <USBD_CtlError>
          break;
 80094d6:	e000      	b.n	80094da <USBD_StdItfReq+0xc2>
          break;
 80094d8:	bf00      	nop
      }
      break;
 80094da:	e004      	b.n	80094e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fceb 	bl	8009eba <USBD_CtlError>
      break;
 80094e4:	bf00      	nop
  }

  return ret;
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	889b      	ldrh	r3, [r3, #4]
 8009502:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800950c:	2b40      	cmp	r3, #64	@ 0x40
 800950e:	d007      	beq.n	8009520 <USBD_StdEPReq+0x30>
 8009510:	2b40      	cmp	r3, #64	@ 0x40
 8009512:	f200 817f 	bhi.w	8009814 <USBD_StdEPReq+0x324>
 8009516:	2b00      	cmp	r3, #0
 8009518:	d02a      	beq.n	8009570 <USBD_StdEPReq+0x80>
 800951a:	2b20      	cmp	r3, #32
 800951c:	f040 817a 	bne.w	8009814 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009520:	7bbb      	ldrb	r3, [r7, #14]
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7ff fe85 	bl	8009234 <USBD_CoreFindEP>
 800952a:	4603      	mov	r3, r0
 800952c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800952e:	7b7b      	ldrb	r3, [r7, #13]
 8009530:	2bff      	cmp	r3, #255	@ 0xff
 8009532:	f000 8174 	beq.w	800981e <USBD_StdEPReq+0x32e>
 8009536:	7b7b      	ldrb	r3, [r7, #13]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f040 8170 	bne.w	800981e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800953e:	7b7a      	ldrb	r2, [r7, #13]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009546:	7b7a      	ldrb	r2, [r7, #13]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	32ae      	adds	r2, #174	@ 0xae
 800954c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 8163 	beq.w	800981e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009558:	7b7a      	ldrb	r2, [r7, #13]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	32ae      	adds	r2, #174	@ 0xae
 800955e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	4798      	blx	r3
 800956a:	4603      	mov	r3, r0
 800956c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800956e:	e156      	b.n	800981e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	785b      	ldrb	r3, [r3, #1]
 8009574:	2b03      	cmp	r3, #3
 8009576:	d008      	beq.n	800958a <USBD_StdEPReq+0x9a>
 8009578:	2b03      	cmp	r3, #3
 800957a:	f300 8145 	bgt.w	8009808 <USBD_StdEPReq+0x318>
 800957e:	2b00      	cmp	r3, #0
 8009580:	f000 809b 	beq.w	80096ba <USBD_StdEPReq+0x1ca>
 8009584:	2b01      	cmp	r3, #1
 8009586:	d03c      	beq.n	8009602 <USBD_StdEPReq+0x112>
 8009588:	e13e      	b.n	8009808 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b02      	cmp	r3, #2
 8009594:	d002      	beq.n	800959c <USBD_StdEPReq+0xac>
 8009596:	2b03      	cmp	r3, #3
 8009598:	d016      	beq.n	80095c8 <USBD_StdEPReq+0xd8>
 800959a:	e02c      	b.n	80095f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00d      	beq.n	80095be <USBD_StdEPReq+0xce>
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
 80095a4:	2b80      	cmp	r3, #128	@ 0x80
 80095a6:	d00a      	beq.n	80095be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f001 f975 	bl	800a89c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095b2:	2180      	movs	r1, #128	@ 0x80
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 f971 	bl	800a89c <USBD_LL_StallEP>
 80095ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095bc:	e020      	b.n	8009600 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fc7a 	bl	8009eba <USBD_CtlError>
              break;
 80095c6:	e01b      	b.n	8009600 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	885b      	ldrh	r3, [r3, #2]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10e      	bne.n	80095ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00b      	beq.n	80095ee <USBD_StdEPReq+0xfe>
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	2b80      	cmp	r3, #128	@ 0x80
 80095da:	d008      	beq.n	80095ee <USBD_StdEPReq+0xfe>
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	88db      	ldrh	r3, [r3, #6]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d104      	bne.n	80095ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	4619      	mov	r1, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 f957 	bl	800a89c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fd3a 	bl	800a068 <USBD_CtlSendStatus>

              break;
 80095f4:	e004      	b.n	8009600 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fc5e 	bl	8009eba <USBD_CtlError>
              break;
 80095fe:	bf00      	nop
          }
          break;
 8009600:	e107      	b.n	8009812 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b02      	cmp	r3, #2
 800960c:	d002      	beq.n	8009614 <USBD_StdEPReq+0x124>
 800960e:	2b03      	cmp	r3, #3
 8009610:	d016      	beq.n	8009640 <USBD_StdEPReq+0x150>
 8009612:	e04b      	b.n	80096ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00d      	beq.n	8009636 <USBD_StdEPReq+0x146>
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	2b80      	cmp	r3, #128	@ 0x80
 800961e:	d00a      	beq.n	8009636 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f001 f939 	bl	800a89c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800962a:	2180      	movs	r1, #128	@ 0x80
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f001 f935 	bl	800a89c <USBD_LL_StallEP>
 8009632:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009634:	e040      	b.n	80096b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fc3e 	bl	8009eba <USBD_CtlError>
              break;
 800963e:	e03b      	b.n	80096b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	885b      	ldrh	r3, [r3, #2]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d136      	bne.n	80096b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009648:	7bbb      	ldrb	r3, [r7, #14]
 800964a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800964e:	2b00      	cmp	r3, #0
 8009650:	d004      	beq.n	800965c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f001 f93f 	bl	800a8da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fd03 	bl	800a068 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009662:	7bbb      	ldrb	r3, [r7, #14]
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7ff fde4 	bl	8009234 <USBD_CoreFindEP>
 800966c:	4603      	mov	r3, r0
 800966e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009670:	7b7b      	ldrb	r3, [r7, #13]
 8009672:	2bff      	cmp	r3, #255	@ 0xff
 8009674:	d01f      	beq.n	80096b6 <USBD_StdEPReq+0x1c6>
 8009676:	7b7b      	ldrb	r3, [r7, #13]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d11c      	bne.n	80096b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800967c:	7b7a      	ldrb	r2, [r7, #13]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009684:	7b7a      	ldrb	r2, [r7, #13]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	32ae      	adds	r2, #174	@ 0xae
 800968a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d010      	beq.n	80096b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009694:	7b7a      	ldrb	r2, [r7, #13]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	32ae      	adds	r2, #174	@ 0xae
 800969a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	4798      	blx	r3
 80096a6:	4603      	mov	r3, r0
 80096a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80096aa:	e004      	b.n	80096b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fc03 	bl	8009eba <USBD_CtlError>
              break;
 80096b4:	e000      	b.n	80096b8 <USBD_StdEPReq+0x1c8>
              break;
 80096b6:	bf00      	nop
          }
          break;
 80096b8:	e0ab      	b.n	8009812 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d002      	beq.n	80096cc <USBD_StdEPReq+0x1dc>
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d032      	beq.n	8009730 <USBD_StdEPReq+0x240>
 80096ca:	e097      	b.n	80097fc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d007      	beq.n	80096e2 <USBD_StdEPReq+0x1f2>
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
 80096d4:	2b80      	cmp	r3, #128	@ 0x80
 80096d6:	d004      	beq.n	80096e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fbed 	bl	8009eba <USBD_CtlError>
                break;
 80096e0:	e091      	b.n	8009806 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	da0b      	bge.n	8009702 <USBD_StdEPReq+0x212>
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096f0:	4613      	mov	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	3310      	adds	r3, #16
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	4413      	add	r3, r2
 80096fe:	3304      	adds	r3, #4
 8009700:	e00b      	b.n	800971a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009708:	4613      	mov	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	4413      	add	r3, r2
 8009718:	3304      	adds	r3, #4
 800971a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2202      	movs	r2, #2
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fc43 	bl	8009fb4 <USBD_CtlSendData>
              break;
 800972e:	e06a      	b.n	8009806 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009734:	2b00      	cmp	r3, #0
 8009736:	da11      	bge.n	800975c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009738:	7bbb      	ldrb	r3, [r7, #14]
 800973a:	f003 020f 	and.w	r2, r3, #15
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	4613      	mov	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	440b      	add	r3, r1
 800974a:	3324      	adds	r3, #36	@ 0x24
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d117      	bne.n	8009782 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fbb0 	bl	8009eba <USBD_CtlError>
                  break;
 800975a:	e054      	b.n	8009806 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800975c:	7bbb      	ldrb	r3, [r7, #14]
 800975e:	f003 020f 	and.w	r2, r3, #15
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	440b      	add	r3, r1
 800976e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fb9d 	bl	8009eba <USBD_CtlError>
                  break;
 8009780:	e041      	b.n	8009806 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009786:	2b00      	cmp	r3, #0
 8009788:	da0b      	bge.n	80097a2 <USBD_StdEPReq+0x2b2>
 800978a:	7bbb      	ldrb	r3, [r7, #14]
 800978c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009790:	4613      	mov	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	3310      	adds	r3, #16
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	4413      	add	r3, r2
 800979e:	3304      	adds	r3, #4
 80097a0:	e00b      	b.n	80097ba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
 80097a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	4413      	add	r3, r2
 80097b8:	3304      	adds	r3, #4
 80097ba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <USBD_StdEPReq+0x2d8>
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
 80097c4:	2b80      	cmp	r3, #128	@ 0x80
 80097c6:	d103      	bne.n	80097d0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2200      	movs	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	e00e      	b.n	80097ee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f001 f89f 	bl	800a918 <USBD_LL_IsStallEP>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2201      	movs	r2, #1
 80097e4:	601a      	str	r2, [r3, #0]
 80097e6:	e002      	b.n	80097ee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2200      	movs	r2, #0
 80097ec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2202      	movs	r2, #2
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fbdd 	bl	8009fb4 <USBD_CtlSendData>
              break;
 80097fa:	e004      	b.n	8009806 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fb5b 	bl	8009eba <USBD_CtlError>
              break;
 8009804:	bf00      	nop
          }
          break;
 8009806:	e004      	b.n	8009812 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fb55 	bl	8009eba <USBD_CtlError>
          break;
 8009810:	bf00      	nop
      }
      break;
 8009812:	e005      	b.n	8009820 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fb4f 	bl	8009eba <USBD_CtlError>
      break;
 800981c:	e000      	b.n	8009820 <USBD_StdEPReq+0x330>
      break;
 800981e:	bf00      	nop
  }

  return ret;
 8009820:	7bfb      	ldrb	r3, [r7, #15]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009836:	2300      	movs	r3, #0
 8009838:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800983a:	2300      	movs	r3, #0
 800983c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800983e:	2300      	movs	r3, #0
 8009840:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	885b      	ldrh	r3, [r3, #2]
 8009846:	0a1b      	lsrs	r3, r3, #8
 8009848:	b29b      	uxth	r3, r3
 800984a:	3b01      	subs	r3, #1
 800984c:	2b06      	cmp	r3, #6
 800984e:	f200 8128 	bhi.w	8009aa2 <USBD_GetDescriptor+0x276>
 8009852:	a201      	add	r2, pc, #4	@ (adr r2, 8009858 <USBD_GetDescriptor+0x2c>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	08009875 	.word	0x08009875
 800985c:	0800988d 	.word	0x0800988d
 8009860:	080098cd 	.word	0x080098cd
 8009864:	08009aa3 	.word	0x08009aa3
 8009868:	08009aa3 	.word	0x08009aa3
 800986c:	08009a43 	.word	0x08009a43
 8009870:	08009a6f 	.word	0x08009a6f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	7c12      	ldrb	r2, [r2, #16]
 8009880:	f107 0108 	add.w	r1, r7, #8
 8009884:	4610      	mov	r0, r2
 8009886:	4798      	blx	r3
 8009888:	60f8      	str	r0, [r7, #12]
      break;
 800988a:	e112      	b.n	8009ab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	7c1b      	ldrb	r3, [r3, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10d      	bne.n	80098b0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800989a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800989c:	f107 0208 	add.w	r2, r7, #8
 80098a0:	4610      	mov	r0, r2
 80098a2:	4798      	blx	r3
 80098a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3301      	adds	r3, #1
 80098aa:	2202      	movs	r2, #2
 80098ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098ae:	e100      	b.n	8009ab2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b8:	f107 0208 	add.w	r2, r7, #8
 80098bc:	4610      	mov	r0, r2
 80098be:	4798      	blx	r3
 80098c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	3301      	adds	r3, #1
 80098c6:	2202      	movs	r2, #2
 80098c8:	701a      	strb	r2, [r3, #0]
      break;
 80098ca:	e0f2      	b.n	8009ab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	885b      	ldrh	r3, [r3, #2]
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	f200 80ac 	bhi.w	8009a30 <USBD_GetDescriptor+0x204>
 80098d8:	a201      	add	r2, pc, #4	@ (adr r2, 80098e0 <USBD_GetDescriptor+0xb4>)
 80098da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098de:	bf00      	nop
 80098e0:	080098f9 	.word	0x080098f9
 80098e4:	0800992d 	.word	0x0800992d
 80098e8:	08009961 	.word	0x08009961
 80098ec:	08009995 	.word	0x08009995
 80098f0:	080099c9 	.word	0x080099c9
 80098f4:	080099fd 	.word	0x080099fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00b      	beq.n	800991c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	7c12      	ldrb	r2, [r2, #16]
 8009910:	f107 0108 	add.w	r1, r7, #8
 8009914:	4610      	mov	r0, r2
 8009916:	4798      	blx	r3
 8009918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800991a:	e091      	b.n	8009a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 facb 	bl	8009eba <USBD_CtlError>
            err++;
 8009924:	7afb      	ldrb	r3, [r7, #11]
 8009926:	3301      	adds	r3, #1
 8009928:	72fb      	strb	r3, [r7, #11]
          break;
 800992a:	e089      	b.n	8009a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00b      	beq.n	8009950 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	7c12      	ldrb	r2, [r2, #16]
 8009944:	f107 0108 	add.w	r1, r7, #8
 8009948:	4610      	mov	r0, r2
 800994a:	4798      	blx	r3
 800994c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800994e:	e077      	b.n	8009a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fab1 	bl	8009eba <USBD_CtlError>
            err++;
 8009958:	7afb      	ldrb	r3, [r7, #11]
 800995a:	3301      	adds	r3, #1
 800995c:	72fb      	strb	r3, [r7, #11]
          break;
 800995e:	e06f      	b.n	8009a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00b      	beq.n	8009984 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	7c12      	ldrb	r2, [r2, #16]
 8009978:	f107 0108 	add.w	r1, r7, #8
 800997c:	4610      	mov	r0, r2
 800997e:	4798      	blx	r3
 8009980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009982:	e05d      	b.n	8009a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fa97 	bl	8009eba <USBD_CtlError>
            err++;
 800998c:	7afb      	ldrb	r3, [r7, #11]
 800998e:	3301      	adds	r3, #1
 8009990:	72fb      	strb	r3, [r7, #11]
          break;
 8009992:	e055      	b.n	8009a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00b      	beq.n	80099b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	7c12      	ldrb	r2, [r2, #16]
 80099ac:	f107 0108 	add.w	r1, r7, #8
 80099b0:	4610      	mov	r0, r2
 80099b2:	4798      	blx	r3
 80099b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099b6:	e043      	b.n	8009a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099b8:	6839      	ldr	r1, [r7, #0]
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fa7d 	bl	8009eba <USBD_CtlError>
            err++;
 80099c0:	7afb      	ldrb	r3, [r7, #11]
 80099c2:	3301      	adds	r3, #1
 80099c4:	72fb      	strb	r3, [r7, #11]
          break;
 80099c6:	e03b      	b.n	8009a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099ce:	695b      	ldr	r3, [r3, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00b      	beq.n	80099ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	7c12      	ldrb	r2, [r2, #16]
 80099e0:	f107 0108 	add.w	r1, r7, #8
 80099e4:	4610      	mov	r0, r2
 80099e6:	4798      	blx	r3
 80099e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ea:	e029      	b.n	8009a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fa63 	bl	8009eba <USBD_CtlError>
            err++;
 80099f4:	7afb      	ldrb	r3, [r7, #11]
 80099f6:	3301      	adds	r3, #1
 80099f8:	72fb      	strb	r3, [r7, #11]
          break;
 80099fa:	e021      	b.n	8009a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00b      	beq.n	8009a20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	7c12      	ldrb	r2, [r2, #16]
 8009a14:	f107 0108 	add.w	r1, r7, #8
 8009a18:	4610      	mov	r0, r2
 8009a1a:	4798      	blx	r3
 8009a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a1e:	e00f      	b.n	8009a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa49 	bl	8009eba <USBD_CtlError>
            err++;
 8009a28:	7afb      	ldrb	r3, [r7, #11]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a2e:	e007      	b.n	8009a40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fa41 	bl	8009eba <USBD_CtlError>
          err++;
 8009a38:	7afb      	ldrb	r3, [r7, #11]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009a3e:	bf00      	nop
      }
      break;
 8009a40:	e037      	b.n	8009ab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	7c1b      	ldrb	r3, [r3, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d109      	bne.n	8009a5e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a52:	f107 0208 	add.w	r2, r7, #8
 8009a56:	4610      	mov	r0, r2
 8009a58:	4798      	blx	r3
 8009a5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a5c:	e029      	b.n	8009ab2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fa2a 	bl	8009eba <USBD_CtlError>
        err++;
 8009a66:	7afb      	ldrb	r3, [r7, #11]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	72fb      	strb	r3, [r7, #11]
      break;
 8009a6c:	e021      	b.n	8009ab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	7c1b      	ldrb	r3, [r3, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10d      	bne.n	8009a92 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a7e:	f107 0208 	add.w	r2, r7, #8
 8009a82:	4610      	mov	r0, r2
 8009a84:	4798      	blx	r3
 8009a86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	2207      	movs	r2, #7
 8009a8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a90:	e00f      	b.n	8009ab2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fa10 	bl	8009eba <USBD_CtlError>
        err++;
 8009a9a:	7afb      	ldrb	r3, [r7, #11]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009aa0:	e007      	b.n	8009ab2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fa08 	bl	8009eba <USBD_CtlError>
      err++;
 8009aaa:	7afb      	ldrb	r3, [r7, #11]
 8009aac:	3301      	adds	r3, #1
 8009aae:	72fb      	strb	r3, [r7, #11]
      break;
 8009ab0:	bf00      	nop
  }

  if (err != 0U)
 8009ab2:	7afb      	ldrb	r3, [r7, #11]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d11e      	bne.n	8009af6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	88db      	ldrh	r3, [r3, #6]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d016      	beq.n	8009aee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009ac0:	893b      	ldrh	r3, [r7, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00e      	beq.n	8009ae4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	88da      	ldrh	r2, [r3, #6]
 8009aca:	893b      	ldrh	r3, [r7, #8]
 8009acc:	4293      	cmp	r3, r2
 8009ace:	bf28      	it	cs
 8009ad0:	4613      	movcs	r3, r2
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ad6:	893b      	ldrh	r3, [r7, #8]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	68f9      	ldr	r1, [r7, #12]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fa69 	bl	8009fb4 <USBD_CtlSendData>
 8009ae2:	e009      	b.n	8009af8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f9e7 	bl	8009eba <USBD_CtlError>
 8009aec:	e004      	b.n	8009af8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 faba 	bl	800a068 <USBD_CtlSendStatus>
 8009af4:	e000      	b.n	8009af8 <USBD_GetDescriptor+0x2cc>
    return;
 8009af6:	bf00      	nop
  }
}
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop

08009b00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	889b      	ldrh	r3, [r3, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d131      	bne.n	8009b76 <USBD_SetAddress+0x76>
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	88db      	ldrh	r3, [r3, #6]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d12d      	bne.n	8009b76 <USBD_SetAddress+0x76>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	885b      	ldrh	r3, [r3, #2]
 8009b1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b20:	d829      	bhi.n	8009b76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	885b      	ldrh	r3, [r3, #2]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d104      	bne.n	8009b44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 f9bc 	bl	8009eba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b42:	e01d      	b.n	8009b80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	7bfa      	ldrb	r2, [r7, #15]
 8009b48:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 ff0d 	bl	800a970 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fa86 	bl	800a068 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d004      	beq.n	8009b6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2202      	movs	r2, #2
 8009b66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b6a:	e009      	b.n	8009b80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b74:	e004      	b.n	8009b80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f99e 	bl	8009eba <USBD_CtlError>
  }
}
 8009b7e:	bf00      	nop
 8009b80:	bf00      	nop
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	885b      	ldrh	r3, [r3, #2]
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	4b4e      	ldr	r3, [pc, #312]	@ (8009cd8 <USBD_SetConfig+0x150>)
 8009b9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8009cd8 <USBD_SetConfig+0x150>)
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d905      	bls.n	8009bb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f985 	bl	8009eba <USBD_CtlError>
    return USBD_FAIL;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e08c      	b.n	8009cce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d002      	beq.n	8009bc6 <USBD_SetConfig+0x3e>
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d029      	beq.n	8009c18 <USBD_SetConfig+0x90>
 8009bc4:	e075      	b.n	8009cb2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009bc6:	4b44      	ldr	r3, [pc, #272]	@ (8009cd8 <USBD_SetConfig+0x150>)
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d020      	beq.n	8009c10 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009bce:	4b42      	ldr	r3, [pc, #264]	@ (8009cd8 <USBD_SetConfig+0x150>)
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8009cd8 <USBD_SetConfig+0x150>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7fe ffe3 	bl	8008baa <USBD_SetClassConfig>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d008      	beq.n	8009c00 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f962 	bl	8009eba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2202      	movs	r2, #2
 8009bfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009bfe:	e065      	b.n	8009ccc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fa31 	bl	800a068 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2203      	movs	r2, #3
 8009c0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009c0e:	e05d      	b.n	8009ccc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fa29 	bl	800a068 <USBD_CtlSendStatus>
      break;
 8009c16:	e059      	b.n	8009ccc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c18:	4b2f      	ldr	r3, [pc, #188]	@ (8009cd8 <USBD_SetConfig+0x150>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d112      	bne.n	8009c46 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2202      	movs	r2, #2
 8009c24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009c28:	4b2b      	ldr	r3, [pc, #172]	@ (8009cd8 <USBD_SetConfig+0x150>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c32:	4b29      	ldr	r3, [pc, #164]	@ (8009cd8 <USBD_SetConfig+0x150>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7fe ffd2 	bl	8008be2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fa12 	bl	800a068 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c44:	e042      	b.n	8009ccc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009c46:	4b24      	ldr	r3, [pc, #144]	@ (8009cd8 <USBD_SetConfig+0x150>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d02a      	beq.n	8009caa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7fe ffc0 	bl	8008be2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009c62:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd8 <USBD_SetConfig+0x150>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	461a      	mov	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8009cd8 <USBD_SetConfig+0x150>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	4619      	mov	r1, r3
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7fe ff99 	bl	8008baa <USBD_SetClassConfig>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00f      	beq.n	8009ca2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f918 	bl	8009eba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	4619      	mov	r1, r3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7fe ffa5 	bl	8008be2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009ca0:	e014      	b.n	8009ccc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f9e0 	bl	800a068 <USBD_CtlSendStatus>
      break;
 8009ca8:	e010      	b.n	8009ccc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f9dc 	bl	800a068 <USBD_CtlSendStatus>
      break;
 8009cb0:	e00c      	b.n	8009ccc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f900 	bl	8009eba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cba:	4b07      	ldr	r3, [pc, #28]	@ (8009cd8 <USBD_SetConfig+0x150>)
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7fe ff8e 	bl	8008be2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8009cca:	bf00      	nop
  }

  return ret;
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000560 	.word	0x20000560

08009cdc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	88db      	ldrh	r3, [r3, #6]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d004      	beq.n	8009cf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f8e2 	bl	8009eba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009cf6:	e023      	b.n	8009d40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	dc02      	bgt.n	8009d0a <USBD_GetConfig+0x2e>
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	dc03      	bgt.n	8009d10 <USBD_GetConfig+0x34>
 8009d08:	e015      	b.n	8009d36 <USBD_GetConfig+0x5a>
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d00b      	beq.n	8009d26 <USBD_GetConfig+0x4a>
 8009d0e:	e012      	b.n	8009d36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3308      	adds	r3, #8
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f948 	bl	8009fb4 <USBD_CtlSendData>
        break;
 8009d24:	e00c      	b.n	8009d40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3304      	adds	r3, #4
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f940 	bl	8009fb4 <USBD_CtlSendData>
        break;
 8009d34:	e004      	b.n	8009d40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d36:	6839      	ldr	r1, [r7, #0]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f8be 	bl	8009eba <USBD_CtlError>
        break;
 8009d3e:	bf00      	nop
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d81e      	bhi.n	8009d9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	88db      	ldrh	r3, [r3, #6]
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d004      	beq.n	8009d72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f8a5 	bl	8009eba <USBD_CtlError>
        break;
 8009d70:	e01a      	b.n	8009da8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d005      	beq.n	8009d8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	f043 0202 	orr.w	r2, r3, #2
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	330c      	adds	r3, #12
 8009d92:	2202      	movs	r2, #2
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f90c 	bl	8009fb4 <USBD_CtlSendData>
      break;
 8009d9c:	e004      	b.n	8009da8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f88a 	bl	8009eba <USBD_CtlError>
      break;
 8009da6:	bf00      	nop
  }
}
 8009da8:	bf00      	nop
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	885b      	ldrh	r3, [r3, #2]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d107      	bne.n	8009dd2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f94c 	bl	800a068 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009dd0:	e013      	b.n	8009dfa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	885b      	ldrh	r3, [r3, #2]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d10b      	bne.n	8009df2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	889b      	ldrh	r3, [r3, #4]
 8009dde:	0a1b      	lsrs	r3, r3, #8
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f93c 	bl	800a068 <USBD_CtlSendStatus>
}
 8009df0:	e003      	b.n	8009dfa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f860 	bl	8009eba <USBD_CtlError>
}
 8009dfa:	bf00      	nop
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	3b01      	subs	r3, #1
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d80b      	bhi.n	8009e32 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	885b      	ldrh	r3, [r3, #2]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d10c      	bne.n	8009e3c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f91c 	bl	800a068 <USBD_CtlSendStatus>
      }
      break;
 8009e30:	e004      	b.n	8009e3c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f840 	bl	8009eba <USBD_CtlError>
      break;
 8009e3a:	e000      	b.n	8009e3e <USBD_ClrFeature+0x3c>
      break;
 8009e3c:	bf00      	nop
  }
}
 8009e3e:	bf00      	nop
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b084      	sub	sp, #16
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	781a      	ldrb	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	781a      	ldrb	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7ff fa40 	bl	80092f6 <SWAPBYTE>
 8009e76:	4603      	mov	r3, r0
 8009e78:	461a      	mov	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3301      	adds	r3, #1
 8009e82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	3301      	adds	r3, #1
 8009e88:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f7ff fa33 	bl	80092f6 <SWAPBYTE>
 8009e90:	4603      	mov	r3, r0
 8009e92:	461a      	mov	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7ff fa26 	bl	80092f6 <SWAPBYTE>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	461a      	mov	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	80da      	strh	r2, [r3, #6]
}
 8009eb2:	bf00      	nop
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ec4:	2180      	movs	r1, #128	@ 0x80
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fce8 	bl	800a89c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ecc:	2100      	movs	r1, #0
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fce4 	bl	800a89c <USBD_LL_StallEP>
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d042      	beq.n	8009f78 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009ef6:	6938      	ldr	r0, [r7, #16]
 8009ef8:	f000 f842 	bl	8009f80 <USBD_GetLen>
 8009efc:	4603      	mov	r3, r0
 8009efe:	3301      	adds	r3, #1
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f06:	d808      	bhi.n	8009f1a <USBD_GetString+0x3e>
 8009f08:	6938      	ldr	r0, [r7, #16]
 8009f0a:	f000 f839 	bl	8009f80 <USBD_GetLen>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	3301      	adds	r3, #1
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	e001      	b.n	8009f1e <USBD_GetString+0x42>
 8009f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f22:	7dfb      	ldrb	r3, [r7, #23]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	4413      	add	r3, r2
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	7812      	ldrb	r2, [r2, #0]
 8009f2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	3301      	adds	r3, #1
 8009f32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f34:	7dfb      	ldrb	r3, [r7, #23]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	4413      	add	r3, r2
 8009f3a:	2203      	movs	r2, #3
 8009f3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
 8009f40:	3301      	adds	r3, #1
 8009f42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f44:	e013      	b.n	8009f6e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	7812      	ldrb	r2, [r2, #0]
 8009f50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	3301      	adds	r3, #1
 8009f56:	613b      	str	r3, [r7, #16]
    idx++;
 8009f58:	7dfb      	ldrb	r3, [r7, #23]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f5e:	7dfb      	ldrb	r3, [r7, #23]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	4413      	add	r3, r2
 8009f64:	2200      	movs	r2, #0
 8009f66:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1e7      	bne.n	8009f46 <USBD_GetString+0x6a>
 8009f76:	e000      	b.n	8009f7a <USBD_GetString+0x9e>
    return;
 8009f78:	bf00      	nop
  }
}
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009f90:	e005      	b.n	8009f9e <USBD_GetLen+0x1e>
  {
    len++;
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
 8009f94:	3301      	adds	r3, #1
 8009f96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1f5      	bne.n	8009f92 <USBD_GetLen+0x12>
  }

  return len;
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	2100      	movs	r1, #0
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 fce7 	bl	800a9ae <USBD_LL_Transmit>

  return USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f000 fcd6 	bl	800a9ae <USBD_LL_Transmit>

  return USBD_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2203      	movs	r2, #3
 800a01c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	2100      	movs	r1, #0
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f000 fcda 	bl	800a9f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b084      	sub	sp, #16
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	60f8      	str	r0, [r7, #12]
 800a04e:	60b9      	str	r1, [r7, #8]
 800a050:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	2100      	movs	r1, #0
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 fcc9 	bl	800a9f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2204      	movs	r2, #4
 800a074:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a078:	2300      	movs	r3, #0
 800a07a:	2200      	movs	r2, #0
 800a07c:	2100      	movs	r1, #0
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fc95 	bl	800a9ae <USBD_LL_Transmit>

  return USBD_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b082      	sub	sp, #8
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2205      	movs	r2, #5
 800a09a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a09e:	2300      	movs	r3, #0
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fca3 	bl	800a9f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	4912      	ldr	r1, [pc, #72]	@ (800a104 <MX_USB_DEVICE_Init+0x50>)
 800a0bc:	4812      	ldr	r0, [pc, #72]	@ (800a108 <MX_USB_DEVICE_Init+0x54>)
 800a0be:	f7fe fcf7 	bl	8008ab0 <USBD_Init>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a0c8:	f7f8 f8ee 	bl	80022a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a0cc:	490f      	ldr	r1, [pc, #60]	@ (800a10c <MX_USB_DEVICE_Init+0x58>)
 800a0ce:	480e      	ldr	r0, [pc, #56]	@ (800a108 <MX_USB_DEVICE_Init+0x54>)
 800a0d0:	f7fe fd1e 	bl	8008b10 <USBD_RegisterClass>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a0da:	f7f8 f8e5 	bl	80022a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a0de:	490c      	ldr	r1, [pc, #48]	@ (800a110 <MX_USB_DEVICE_Init+0x5c>)
 800a0e0:	4809      	ldr	r0, [pc, #36]	@ (800a108 <MX_USB_DEVICE_Init+0x54>)
 800a0e2:	f7fe fc15 	bl	8008910 <USBD_CDC_RegisterInterface>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a0ec:	f7f8 f8dc 	bl	80022a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a0f0:	4805      	ldr	r0, [pc, #20]	@ (800a108 <MX_USB_DEVICE_Init+0x54>)
 800a0f2:	f7fe fd43 	bl	8008b7c <USBD_Start>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a0fc:	f7f8 f8d4 	bl	80022a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a100:	bf00      	nop
 800a102:	bd80      	pop	{r7, pc}
 800a104:	200000dc 	.word	0x200000dc
 800a108:	20000564 	.word	0x20000564
 800a10c:	20000048 	.word	0x20000048
 800a110:	200000c8 	.word	0x200000c8

0800a114 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a118:	2200      	movs	r2, #0
 800a11a:	4905      	ldr	r1, [pc, #20]	@ (800a130 <CDC_Init_FS+0x1c>)
 800a11c:	4805      	ldr	r0, [pc, #20]	@ (800a134 <CDC_Init_FS+0x20>)
 800a11e:	f7fe fc11 	bl	8008944 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a122:	4905      	ldr	r1, [pc, #20]	@ (800a138 <CDC_Init_FS+0x24>)
 800a124:	4803      	ldr	r0, [pc, #12]	@ (800a134 <CDC_Init_FS+0x20>)
 800a126:	f7fe fc2f 	bl	8008988 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a12a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	20001040 	.word	0x20001040
 800a134:	20000564 	.word	0x20000564
 800a138:	20000840 	.word	0x20000840

0800a13c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a13c:	b480      	push	{r7}
 800a13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a140:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a142:	4618      	mov	r0, r3
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	6039      	str	r1, [r7, #0]
 800a156:	71fb      	strb	r3, [r7, #7]
 800a158:	4613      	mov	r3, r2
 800a15a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a15c:	79fb      	ldrb	r3, [r7, #7]
 800a15e:	2b23      	cmp	r3, #35	@ 0x23
 800a160:	d84a      	bhi.n	800a1f8 <CDC_Control_FS+0xac>
 800a162:	a201      	add	r2, pc, #4	@ (adr r2, 800a168 <CDC_Control_FS+0x1c>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a1f9 	.word	0x0800a1f9
 800a16c:	0800a1f9 	.word	0x0800a1f9
 800a170:	0800a1f9 	.word	0x0800a1f9
 800a174:	0800a1f9 	.word	0x0800a1f9
 800a178:	0800a1f9 	.word	0x0800a1f9
 800a17c:	0800a1f9 	.word	0x0800a1f9
 800a180:	0800a1f9 	.word	0x0800a1f9
 800a184:	0800a1f9 	.word	0x0800a1f9
 800a188:	0800a1f9 	.word	0x0800a1f9
 800a18c:	0800a1f9 	.word	0x0800a1f9
 800a190:	0800a1f9 	.word	0x0800a1f9
 800a194:	0800a1f9 	.word	0x0800a1f9
 800a198:	0800a1f9 	.word	0x0800a1f9
 800a19c:	0800a1f9 	.word	0x0800a1f9
 800a1a0:	0800a1f9 	.word	0x0800a1f9
 800a1a4:	0800a1f9 	.word	0x0800a1f9
 800a1a8:	0800a1f9 	.word	0x0800a1f9
 800a1ac:	0800a1f9 	.word	0x0800a1f9
 800a1b0:	0800a1f9 	.word	0x0800a1f9
 800a1b4:	0800a1f9 	.word	0x0800a1f9
 800a1b8:	0800a1f9 	.word	0x0800a1f9
 800a1bc:	0800a1f9 	.word	0x0800a1f9
 800a1c0:	0800a1f9 	.word	0x0800a1f9
 800a1c4:	0800a1f9 	.word	0x0800a1f9
 800a1c8:	0800a1f9 	.word	0x0800a1f9
 800a1cc:	0800a1f9 	.word	0x0800a1f9
 800a1d0:	0800a1f9 	.word	0x0800a1f9
 800a1d4:	0800a1f9 	.word	0x0800a1f9
 800a1d8:	0800a1f9 	.word	0x0800a1f9
 800a1dc:	0800a1f9 	.word	0x0800a1f9
 800a1e0:	0800a1f9 	.word	0x0800a1f9
 800a1e4:	0800a1f9 	.word	0x0800a1f9
 800a1e8:	0800a1f9 	.word	0x0800a1f9
 800a1ec:	0800a1f9 	.word	0x0800a1f9
 800a1f0:	0800a1f9 	.word	0x0800a1f9
 800a1f4:	0800a1f9 	.word	0x0800a1f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a1f8:	bf00      	nop
  }

  return (USBD_OK);
 800a1fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	4808      	ldr	r0, [pc, #32]	@ (800a238 <CDC_Receive_FS+0x30>)
 800a216:	f7fe fbb7 	bl	8008988 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a21a:	4807      	ldr	r0, [pc, #28]	@ (800a238 <CDC_Receive_FS+0x30>)
 800a21c:	f7fe fc12 	bl	8008a44 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf,Len[0]);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7f7 f860 	bl	80012ec <CDC_ReceiveCallBack>
  return (USBD_OK);
 800a22c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20000564 	.word	0x20000564

0800a23c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	460b      	mov	r3, r1
 800a246:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a24c:	4b0d      	ldr	r3, [pc, #52]	@ (800a284 <CDC_Transmit_FS+0x48>)
 800a24e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a252:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a25e:	2301      	movs	r3, #1
 800a260:	e00b      	b.n	800a27a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a262:	887b      	ldrh	r3, [r7, #2]
 800a264:	461a      	mov	r2, r3
 800a266:	6879      	ldr	r1, [r7, #4]
 800a268:	4806      	ldr	r0, [pc, #24]	@ (800a284 <CDC_Transmit_FS+0x48>)
 800a26a:	f7fe fb6b 	bl	8008944 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a26e:	4805      	ldr	r0, [pc, #20]	@ (800a284 <CDC_Transmit_FS+0x48>)
 800a270:	f7fe fba8 	bl	80089c4 <USBD_CDC_TransmitPacket>
 800a274:	4603      	mov	r3, r0
 800a276:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a278:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20000564 	.word	0x20000564

0800a288 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a288:	b480      	push	{r7}
 800a28a:	b087      	sub	sp, #28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	4613      	mov	r3, r2
 800a294:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a29a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	371c      	adds	r7, #28
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
	...

0800a2ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	6039      	str	r1, [r7, #0]
 800a2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	2212      	movs	r2, #18
 800a2bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a2be:	4b03      	ldr	r3, [pc, #12]	@ (800a2cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	200000f8 	.word	0x200000f8

0800a2d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	6039      	str	r1, [r7, #0]
 800a2da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	2204      	movs	r2, #4
 800a2e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2e2:	4b03      	ldr	r3, [pc, #12]	@ (800a2f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	2000010c 	.word	0x2000010c

0800a2f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	6039      	str	r1, [r7, #0]
 800a2fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a300:	79fb      	ldrb	r3, [r7, #7]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d105      	bne.n	800a312 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	4907      	ldr	r1, [pc, #28]	@ (800a328 <USBD_FS_ProductStrDescriptor+0x34>)
 800a30a:	4808      	ldr	r0, [pc, #32]	@ (800a32c <USBD_FS_ProductStrDescriptor+0x38>)
 800a30c:	f7ff fde6 	bl	8009edc <USBD_GetString>
 800a310:	e004      	b.n	800a31c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	4904      	ldr	r1, [pc, #16]	@ (800a328 <USBD_FS_ProductStrDescriptor+0x34>)
 800a316:	4805      	ldr	r0, [pc, #20]	@ (800a32c <USBD_FS_ProductStrDescriptor+0x38>)
 800a318:	f7ff fde0 	bl	8009edc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a31c:	4b02      	ldr	r3, [pc, #8]	@ (800a328 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20001840 	.word	0x20001840
 800a32c:	0800ab6c 	.word	0x0800ab6c

0800a330 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	6039      	str	r1, [r7, #0]
 800a33a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	4904      	ldr	r1, [pc, #16]	@ (800a350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a340:	4804      	ldr	r0, [pc, #16]	@ (800a354 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a342:	f7ff fdcb 	bl	8009edc <USBD_GetString>
  return USBD_StrDesc;
 800a346:	4b02      	ldr	r3, [pc, #8]	@ (800a350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20001840 	.word	0x20001840
 800a354:	0800ab84 	.word	0x0800ab84

0800a358 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	4603      	mov	r3, r0
 800a360:	6039      	str	r1, [r7, #0]
 800a362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	221a      	movs	r2, #26
 800a368:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a36a:	f000 f843 	bl	800a3f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a36e:	4b02      	ldr	r3, [pc, #8]	@ (800a378 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a370:	4618      	mov	r0, r3
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	20000110 	.word	0x20000110

0800a37c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	6039      	str	r1, [r7, #0]
 800a386:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d105      	bne.n	800a39a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	4907      	ldr	r1, [pc, #28]	@ (800a3b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a392:	4808      	ldr	r0, [pc, #32]	@ (800a3b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a394:	f7ff fda2 	bl	8009edc <USBD_GetString>
 800a398:	e004      	b.n	800a3a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	4904      	ldr	r1, [pc, #16]	@ (800a3b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a39e:	4805      	ldr	r0, [pc, #20]	@ (800a3b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3a0:	f7ff fd9c 	bl	8009edc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3a4:	4b02      	ldr	r3, [pc, #8]	@ (800a3b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20001840 	.word	0x20001840
 800a3b4:	0800ab98 	.word	0x0800ab98

0800a3b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	6039      	str	r1, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3c4:	79fb      	ldrb	r3, [r7, #7]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d105      	bne.n	800a3d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	4907      	ldr	r1, [pc, #28]	@ (800a3ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3ce:	4808      	ldr	r0, [pc, #32]	@ (800a3f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3d0:	f7ff fd84 	bl	8009edc <USBD_GetString>
 800a3d4:	e004      	b.n	800a3e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	4904      	ldr	r1, [pc, #16]	@ (800a3ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3da:	4805      	ldr	r0, [pc, #20]	@ (800a3f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3dc:	f7ff fd7e 	bl	8009edc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e0:	4b02      	ldr	r3, [pc, #8]	@ (800a3ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20001840 	.word	0x20001840
 800a3f0:	0800aba4 	.word	0x0800aba4

0800a3f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a3fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a438 <Get_SerialNum+0x44>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a400:	4b0e      	ldr	r3, [pc, #56]	@ (800a43c <Get_SerialNum+0x48>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a406:	4b0e      	ldr	r3, [pc, #56]	@ (800a440 <Get_SerialNum+0x4c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4413      	add	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d009      	beq.n	800a42e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a41a:	2208      	movs	r2, #8
 800a41c:	4909      	ldr	r1, [pc, #36]	@ (800a444 <Get_SerialNum+0x50>)
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f000 f814 	bl	800a44c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a424:	2204      	movs	r2, #4
 800a426:	4908      	ldr	r1, [pc, #32]	@ (800a448 <Get_SerialNum+0x54>)
 800a428:	68b8      	ldr	r0, [r7, #8]
 800a42a:	f000 f80f 	bl	800a44c <IntToUnicode>
  }
}
 800a42e:	bf00      	nop
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	1fff7a10 	.word	0x1fff7a10
 800a43c:	1fff7a14 	.word	0x1fff7a14
 800a440:	1fff7a18 	.word	0x1fff7a18
 800a444:	20000112 	.word	0x20000112
 800a448:	20000122 	.word	0x20000122

0800a44c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b087      	sub	sp, #28
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	4613      	mov	r3, r2
 800a458:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a45a:	2300      	movs	r3, #0
 800a45c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a45e:	2300      	movs	r3, #0
 800a460:	75fb      	strb	r3, [r7, #23]
 800a462:	e027      	b.n	800a4b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	0f1b      	lsrs	r3, r3, #28
 800a468:	2b09      	cmp	r3, #9
 800a46a:	d80b      	bhi.n	800a484 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	0f1b      	lsrs	r3, r3, #28
 800a470:	b2da      	uxtb	r2, r3
 800a472:	7dfb      	ldrb	r3, [r7, #23]
 800a474:	005b      	lsls	r3, r3, #1
 800a476:	4619      	mov	r1, r3
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	440b      	add	r3, r1
 800a47c:	3230      	adds	r2, #48	@ 0x30
 800a47e:	b2d2      	uxtb	r2, r2
 800a480:	701a      	strb	r2, [r3, #0]
 800a482:	e00a      	b.n	800a49a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	0f1b      	lsrs	r3, r3, #28
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	4619      	mov	r1, r3
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	440b      	add	r3, r1
 800a494:	3237      	adds	r2, #55	@ 0x37
 800a496:	b2d2      	uxtb	r2, r2
 800a498:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	011b      	lsls	r3, r3, #4
 800a49e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4a0:	7dfb      	ldrb	r3, [r7, #23]
 800a4a2:	005b      	lsls	r3, r3, #1
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	75fb      	strb	r3, [r7, #23]
 800a4b4:	7dfa      	ldrb	r2, [r7, #23]
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d3d3      	bcc.n	800a464 <IntToUnicode+0x18>
  }
}
 800a4bc:	bf00      	nop
 800a4be:	bf00      	nop
 800a4c0:	371c      	adds	r7, #28
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
	...

0800a4cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b08a      	sub	sp, #40	@ 0x28
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4d4:	f107 0314 	add.w	r3, r7, #20
 800a4d8:	2200      	movs	r2, #0
 800a4da:	601a      	str	r2, [r3, #0]
 800a4dc:	605a      	str	r2, [r3, #4]
 800a4de:	609a      	str	r2, [r3, #8]
 800a4e0:	60da      	str	r2, [r3, #12]
 800a4e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4ec:	d13a      	bne.n	800a564 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	613b      	str	r3, [r7, #16]
 800a4f2:	4b1e      	ldr	r3, [pc, #120]	@ (800a56c <HAL_PCD_MspInit+0xa0>)
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f6:	4a1d      	ldr	r2, [pc, #116]	@ (800a56c <HAL_PCD_MspInit+0xa0>)
 800a4f8:	f043 0301 	orr.w	r3, r3, #1
 800a4fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800a4fe:	4b1b      	ldr	r3, [pc, #108]	@ (800a56c <HAL_PCD_MspInit+0xa0>)
 800a500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	613b      	str	r3, [r7, #16]
 800a508:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a50a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a50e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a510:	2302      	movs	r3, #2
 800a512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a514:	2300      	movs	r3, #0
 800a516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a518:	2303      	movs	r3, #3
 800a51a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a51c:	230a      	movs	r3, #10
 800a51e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a520:	f107 0314 	add.w	r3, r7, #20
 800a524:	4619      	mov	r1, r3
 800a526:	4812      	ldr	r0, [pc, #72]	@ (800a570 <HAL_PCD_MspInit+0xa4>)
 800a528:	f7f9 fad2 	bl	8003ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a52c:	4b0f      	ldr	r3, [pc, #60]	@ (800a56c <HAL_PCD_MspInit+0xa0>)
 800a52e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a530:	4a0e      	ldr	r2, [pc, #56]	@ (800a56c <HAL_PCD_MspInit+0xa0>)
 800a532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a536:	6353      	str	r3, [r2, #52]	@ 0x34
 800a538:	2300      	movs	r3, #0
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	4b0b      	ldr	r3, [pc, #44]	@ (800a56c <HAL_PCD_MspInit+0xa0>)
 800a53e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a540:	4a0a      	ldr	r2, [pc, #40]	@ (800a56c <HAL_PCD_MspInit+0xa0>)
 800a542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a546:	6453      	str	r3, [r2, #68]	@ 0x44
 800a548:	4b08      	ldr	r3, [pc, #32]	@ (800a56c <HAL_PCD_MspInit+0xa0>)
 800a54a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a54c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a554:	2200      	movs	r2, #0
 800a556:	2100      	movs	r1, #0
 800a558:	2043      	movs	r0, #67	@ 0x43
 800a55a:	f7f8 ff12 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a55e:	2043      	movs	r0, #67	@ 0x43
 800a560:	f7f8 ff2b 	bl	80033ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a564:	bf00      	nop
 800a566:	3728      	adds	r7, #40	@ 0x28
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	40023800 	.word	0x40023800
 800a570:	40020000 	.word	0x40020000

0800a574 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a588:	4619      	mov	r1, r3
 800a58a:	4610      	mov	r0, r2
 800a58c:	f7fe fb43 	bl	8008c16 <USBD_LL_SetupStage>
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a5aa:	78fa      	ldrb	r2, [r7, #3]
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	00db      	lsls	r3, r3, #3
 800a5b2:	4413      	add	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	440b      	add	r3, r1
 800a5b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	78fb      	ldrb	r3, [r7, #3]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	f7fe fb7d 	bl	8008cc0 <USBD_LL_DataOutStage>
}
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b082      	sub	sp, #8
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a5e0:	78fa      	ldrb	r2, [r7, #3]
 800a5e2:	6879      	ldr	r1, [r7, #4]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	00db      	lsls	r3, r3, #3
 800a5e8:	4413      	add	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	440b      	add	r3, r1
 800a5ee:	3320      	adds	r3, #32
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	78fb      	ldrb	r3, [r7, #3]
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	f7fe fc16 	bl	8008e26 <USBD_LL_DataInStage>
}
 800a5fa:	bf00      	nop
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b082      	sub	sp, #8
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a610:	4618      	mov	r0, r3
 800a612:	f7fe fd50 	bl	80090b6 <USBD_LL_SOF>
}
 800a616:	bf00      	nop
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b084      	sub	sp, #16
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a626:	2301      	movs	r3, #1
 800a628:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	79db      	ldrb	r3, [r3, #7]
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d001      	beq.n	800a636 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a632:	f7f7 fe39 	bl	80022a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a63c:	7bfa      	ldrb	r2, [r7, #15]
 800a63e:	4611      	mov	r1, r2
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fcf4 	bl	800902e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fe fc9c 	bl	8008f8a <USBD_LL_Reset>
}
 800a652:	bf00      	nop
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
	...

0800a65c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fe fcef 	bl	800904e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	6812      	ldr	r2, [r2, #0]
 800a67e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a682:	f043 0301 	orr.w	r3, r3, #1
 800a686:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	7adb      	ldrb	r3, [r3, #11]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d005      	beq.n	800a69c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a690:	4b04      	ldr	r3, [pc, #16]	@ (800a6a4 <HAL_PCD_SuspendCallback+0x48>)
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	4a03      	ldr	r2, [pc, #12]	@ (800a6a4 <HAL_PCD_SuspendCallback+0x48>)
 800a696:	f043 0306 	orr.w	r3, r3, #6
 800a69a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a69c:	bf00      	nop
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	e000ed00 	.word	0xe000ed00

0800a6a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fe fce5 	bl	8009086 <USBD_LL_Resume>
}
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6d6:	78fa      	ldrb	r2, [r7, #3]
 800a6d8:	4611      	mov	r1, r2
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fe fd3d 	bl	800915a <USBD_LL_IsoOUTIncomplete>
}
 800a6e0:	bf00      	nop
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6fa:	78fa      	ldrb	r2, [r7, #3]
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe fcf9 	bl	80090f6 <USBD_LL_IsoINIncomplete>
}
 800a704:	bf00      	nop
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7fe fd4f 	bl	80091be <USBD_LL_DevConnected>
}
 800a720:	bf00      	nop
 800a722:	3708      	adds	r7, #8
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe fd4c 	bl	80091d4 <USBD_LL_DevDisconnected>
}
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d13c      	bne.n	800a7ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a754:	4a20      	ldr	r2, [pc, #128]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a1e      	ldr	r2, [pc, #120]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a760:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a764:	4b1c      	ldr	r3, [pc, #112]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a766:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a76a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a76c:	4b1a      	ldr	r3, [pc, #104]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a76e:	2204      	movs	r2, #4
 800a770:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a772:	4b19      	ldr	r3, [pc, #100]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a774:	2202      	movs	r2, #2
 800a776:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a778:	4b17      	ldr	r3, [pc, #92]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a77e:	4b16      	ldr	r3, [pc, #88]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a780:	2202      	movs	r2, #2
 800a782:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a784:	4b14      	ldr	r3, [pc, #80]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a786:	2200      	movs	r2, #0
 800a788:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a78a:	4b13      	ldr	r3, [pc, #76]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a790:	4b11      	ldr	r3, [pc, #68]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a792:	2200      	movs	r2, #0
 800a794:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a796:	4b10      	ldr	r3, [pc, #64]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a798:	2200      	movs	r2, #0
 800a79a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a79c:	4b0e      	ldr	r3, [pc, #56]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a7a2:	480d      	ldr	r0, [pc, #52]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a7a4:	f7f9 fb31 	bl	8003e0a <HAL_PCD_Init>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d001      	beq.n	800a7b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a7ae:	f7f7 fd7b 	bl	80022a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a7b2:	2180      	movs	r1, #128	@ 0x80
 800a7b4:	4808      	ldr	r0, [pc, #32]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a7b6:	f7fa fd5e 	bl	8005276 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a7ba:	2240      	movs	r2, #64	@ 0x40
 800a7bc:	2100      	movs	r1, #0
 800a7be:	4806      	ldr	r0, [pc, #24]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a7c0:	f7fa fd12 	bl	80051e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a7c4:	2280      	movs	r2, #128	@ 0x80
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	4803      	ldr	r0, [pc, #12]	@ (800a7d8 <USBD_LL_Init+0x94>)
 800a7ca:	f7fa fd0d 	bl	80051e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20001a40 	.word	0x20001a40

0800a7dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7f9 fc18 	bl	8004028 <HAL_PCD_Start>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 f942 	bl	800aa88 <USBD_Get_USB_Status>
 800a804:	4603      	mov	r3, r0
 800a806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a808:	7bbb      	ldrb	r3, [r7, #14]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b084      	sub	sp, #16
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	4608      	mov	r0, r1
 800a81c:	4611      	mov	r1, r2
 800a81e:	461a      	mov	r2, r3
 800a820:	4603      	mov	r3, r0
 800a822:	70fb      	strb	r3, [r7, #3]
 800a824:	460b      	mov	r3, r1
 800a826:	70bb      	strb	r3, [r7, #2]
 800a828:	4613      	mov	r3, r2
 800a82a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a83a:	78bb      	ldrb	r3, [r7, #2]
 800a83c:	883a      	ldrh	r2, [r7, #0]
 800a83e:	78f9      	ldrb	r1, [r7, #3]
 800a840:	f7fa f8ec 	bl	8004a1c <HAL_PCD_EP_Open>
 800a844:	4603      	mov	r3, r0
 800a846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a848:	7bfb      	ldrb	r3, [r7, #15]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 f91c 	bl	800aa88 <USBD_Get_USB_Status>
 800a850:	4603      	mov	r3, r0
 800a852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a854:	7bbb      	ldrb	r3, [r7, #14]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	460b      	mov	r3, r1
 800a868:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a878:	78fa      	ldrb	r2, [r7, #3]
 800a87a:	4611      	mov	r1, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7fa f937 	bl	8004af0 <HAL_PCD_EP_Close>
 800a882:	4603      	mov	r3, r0
 800a884:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a886:	7bfb      	ldrb	r3, [r7, #15]
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 f8fd 	bl	800aa88 <USBD_Get_USB_Status>
 800a88e:	4603      	mov	r3, r0
 800a890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a892:	7bbb      	ldrb	r3, [r7, #14]
}
 800a894:	4618      	mov	r0, r3
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8b6:	78fa      	ldrb	r2, [r7, #3]
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fa f9ef 	bl	8004c9e <HAL_PCD_EP_SetStall>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f000 f8de 	bl	800aa88 <USBD_Get_USB_Status>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8f4:	78fa      	ldrb	r2, [r7, #3]
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fa fa33 	bl	8004d64 <HAL_PCD_EP_ClrStall>
 800a8fe:	4603      	mov	r3, r0
 800a900:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a902:	7bfb      	ldrb	r3, [r7, #15]
 800a904:	4618      	mov	r0, r3
 800a906:	f000 f8bf 	bl	800aa88 <USBD_Get_USB_Status>
 800a90a:	4603      	mov	r3, r0
 800a90c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a92a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a92c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a930:	2b00      	cmp	r3, #0
 800a932:	da0b      	bge.n	800a94c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a934:	78fb      	ldrb	r3, [r7, #3]
 800a936:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a93a:	68f9      	ldr	r1, [r7, #12]
 800a93c:	4613      	mov	r3, r2
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	4413      	add	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	440b      	add	r3, r1
 800a946:	3316      	adds	r3, #22
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	e00b      	b.n	800a964 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a94c:	78fb      	ldrb	r3, [r7, #3]
 800a94e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a952:	68f9      	ldr	r1, [r7, #12]
 800a954:	4613      	mov	r3, r2
 800a956:	00db      	lsls	r3, r3, #3
 800a958:	4413      	add	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	440b      	add	r3, r1
 800a95e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a962:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a98a:	78fa      	ldrb	r2, [r7, #3]
 800a98c:	4611      	mov	r1, r2
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fa f820 	bl	80049d4 <HAL_PCD_SetAddress>
 800a994:	4603      	mov	r3, r0
 800a996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a998:	7bfb      	ldrb	r3, [r7, #15]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 f874 	bl	800aa88 <USBD_Get_USB_Status>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b086      	sub	sp, #24
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	60f8      	str	r0, [r7, #12]
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a9cc:	7af9      	ldrb	r1, [r7, #11]
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	f7fa f92a 	bl	8004c2a <HAL_PCD_EP_Transmit>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9da:	7dfb      	ldrb	r3, [r7, #23]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f000 f853 	bl	800aa88 <USBD_Get_USB_Status>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3718      	adds	r7, #24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	607a      	str	r2, [r7, #4]
 800a9fa:	603b      	str	r3, [r7, #0]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa04:	2300      	movs	r3, #0
 800aa06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa0e:	7af9      	ldrb	r1, [r7, #11]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	f7fa f8b6 	bl	8004b84 <HAL_PCD_EP_Receive>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa1c:	7dfb      	ldrb	r3, [r7, #23]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 f832 	bl	800aa88 <USBD_Get_USB_Status>
 800aa24:	4603      	mov	r3, r0
 800aa26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa28:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa44:	78fa      	ldrb	r2, [r7, #3]
 800aa46:	4611      	mov	r1, r2
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fa f8d6 	bl	8004bfa <HAL_PCD_EP_GetRxCount>
 800aa4e:	4603      	mov	r3, r0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa60:	4b03      	ldr	r3, [pc, #12]	@ (800aa70 <USBD_static_malloc+0x18>)
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	20001f24 	.word	0x20001f24

0800aa74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]

}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	4603      	mov	r3, r0
 800aa90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa96:	79fb      	ldrb	r3, [r7, #7]
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	d817      	bhi.n	800aacc <USBD_Get_USB_Status+0x44>
 800aa9c:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa4 <USBD_Get_USB_Status+0x1c>)
 800aa9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa2:	bf00      	nop
 800aaa4:	0800aab5 	.word	0x0800aab5
 800aaa8:	0800aabb 	.word	0x0800aabb
 800aaac:	0800aac1 	.word	0x0800aac1
 800aab0:	0800aac7 	.word	0x0800aac7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73fb      	strb	r3, [r7, #15]
    break;
 800aab8:	e00b      	b.n	800aad2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aaba:	2303      	movs	r3, #3
 800aabc:	73fb      	strb	r3, [r7, #15]
    break;
 800aabe:	e008      	b.n	800aad2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aac0:	2301      	movs	r3, #1
 800aac2:	73fb      	strb	r3, [r7, #15]
    break;
 800aac4:	e005      	b.n	800aad2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aac6:	2303      	movs	r3, #3
 800aac8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaca:	e002      	b.n	800aad2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aacc:	2303      	movs	r3, #3
 800aace:	73fb      	strb	r3, [r7, #15]
    break;
 800aad0:	bf00      	nop
  }
  return usb_status;
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3714      	adds	r7, #20
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <memset>:
 800aae0:	4402      	add	r2, r0
 800aae2:	4603      	mov	r3, r0
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d100      	bne.n	800aaea <memset+0xa>
 800aae8:	4770      	bx	lr
 800aaea:	f803 1b01 	strb.w	r1, [r3], #1
 800aaee:	e7f9      	b.n	800aae4 <memset+0x4>

0800aaf0 <__libc_init_array>:
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	4d0d      	ldr	r5, [pc, #52]	@ (800ab28 <__libc_init_array+0x38>)
 800aaf4:	4c0d      	ldr	r4, [pc, #52]	@ (800ab2c <__libc_init_array+0x3c>)
 800aaf6:	1b64      	subs	r4, r4, r5
 800aaf8:	10a4      	asrs	r4, r4, #2
 800aafa:	2600      	movs	r6, #0
 800aafc:	42a6      	cmp	r6, r4
 800aafe:	d109      	bne.n	800ab14 <__libc_init_array+0x24>
 800ab00:	4d0b      	ldr	r5, [pc, #44]	@ (800ab30 <__libc_init_array+0x40>)
 800ab02:	4c0c      	ldr	r4, [pc, #48]	@ (800ab34 <__libc_init_array+0x44>)
 800ab04:	f000 f826 	bl	800ab54 <_init>
 800ab08:	1b64      	subs	r4, r4, r5
 800ab0a:	10a4      	asrs	r4, r4, #2
 800ab0c:	2600      	movs	r6, #0
 800ab0e:	42a6      	cmp	r6, r4
 800ab10:	d105      	bne.n	800ab1e <__libc_init_array+0x2e>
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab18:	4798      	blx	r3
 800ab1a:	3601      	adds	r6, #1
 800ab1c:	e7ee      	b.n	800aafc <__libc_init_array+0xc>
 800ab1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab22:	4798      	blx	r3
 800ab24:	3601      	adds	r6, #1
 800ab26:	e7f2      	b.n	800ab0e <__libc_init_array+0x1e>
 800ab28:	0800abd4 	.word	0x0800abd4
 800ab2c:	0800abd4 	.word	0x0800abd4
 800ab30:	0800abd4 	.word	0x0800abd4
 800ab34:	0800abd8 	.word	0x0800abd8

0800ab38 <memcpy>:
 800ab38:	440a      	add	r2, r1
 800ab3a:	4291      	cmp	r1, r2
 800ab3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab40:	d100      	bne.n	800ab44 <memcpy+0xc>
 800ab42:	4770      	bx	lr
 800ab44:	b510      	push	{r4, lr}
 800ab46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab4e:	4291      	cmp	r1, r2
 800ab50:	d1f9      	bne.n	800ab46 <memcpy+0xe>
 800ab52:	bd10      	pop	{r4, pc}

0800ab54 <_init>:
 800ab54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab56:	bf00      	nop
 800ab58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab5a:	bc08      	pop	{r3}
 800ab5c:	469e      	mov	lr, r3
 800ab5e:	4770      	bx	lr

0800ab60 <_fini>:
 800ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab62:	bf00      	nop
 800ab64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab66:	bc08      	pop	{r3}
 800ab68:	469e      	mov	lr, r3
 800ab6a:	4770      	bx	lr
